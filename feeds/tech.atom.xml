<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>#!/bin/bash it 'till it works - Tech</title><link href="https://cannoncontraption.github.io/" rel="alternate"></link><link href="https://cannoncontraption.github.io/feeds/tech.atom.xml" rel="self"></link><id>https://cannoncontraption.github.io/</id><updated>2022-08-13T13:04:00-04:00</updated><subtitle>The blog of a Zsh user.</subtitle><entry><title>Desktop Configuration Management with Ansible</title><link href="https://cannoncontraption.github.io/ansible.html" rel="alternate"></link><published>2022-08-13T13:04:00-04:00</published><updated>2022-08-13T13:04:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-13:/ansible.html</id><summary type="html">&lt;p&gt;If you read some of my other articles, you might be able to guess that my systems are all set up in a pretty unique and custom way. I use my own window manager, a copy of Emacs that's heavily customized, I use my own photo system, &lt;a href="https://cannoncontraption.github.io/making-bash-prompt-you-with-information.html"&gt;while this post â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you read some of my other articles, you might be able to guess that my systems are all set up in a pretty unique and custom way. I use my own window manager, a copy of Emacs that's heavily customized, I use my own photo system, &lt;a href="https://cannoncontraption.github.io/making-bash-prompt-you-with-information.html"&gt;while this post is hilariously out of date, I do have my own shell prompt setup,&lt;/a&gt; I manage my files like a manual (dumb) version of virtual memory, and I have a dedicated rack to house my laptops. If there isn't a link to one (or more) of these things, I'm probably going to blog about them later. I'll try to remember to update this post as I do that (though no promises). Needless to say, with such a customized and specific desktop setup, I want a way to manage it all as seamlessly as I can.&lt;/p&gt;
&lt;p&gt;So, that brings a lot of issues. I basically want every computer I own to behave as close to identically to every other one as I can. That means the same software, the same configuration, the same scripts, the same filesystem structure. I've already basically solved the file sharing part (post forthcoming at some point, will link it in my list above if I remember), so at least I don't have to solve that. However, until recently the dream of every machine behaving like every other one went practically totally unrealized.&lt;/p&gt;
&lt;p&gt;I've solved it now, and all of my machines behave the same. I tried a lot of stuff that didn't work first, however.&lt;/p&gt;
&lt;h1&gt;Avoid These Setups&lt;/h1&gt;
&lt;h2&gt;SkyDrive/DropBox/GDrive/CloudStation&lt;/h2&gt;
&lt;p&gt;When I was in college, I had a desktop and a laptop at first. They were for a combination of schoolwork and gaming, though admittedly the iGPU in the laptop could really only run Team Fortress and not much else.&lt;/p&gt;
&lt;p&gt;Since I wanted to use my desktop for schoolwork, though, I had to have a way to take what I did in class (on the laptop) and push it to the desktop. My first solution was to just use off the shelf file sync services. I had been using Google Drive in high school, but back then I was using Google Docs and such, and without a desire to use these (and without a great amount of Linux support at the time, except for mounting the drive as a share via GNOME) I had little reason to keep doing this.&lt;/p&gt;
&lt;p&gt;I moved to DropBox, and quickly ran out of storage space.&lt;/p&gt;
&lt;p&gt;I then moved to my dad's server and Synology CloudStation, but it didn't have a sync button so I'd lose my work all the time since CloudStation had to notice files had changed and actually sync them by itself before I'd have them on the other computer. This made fetching my homework in class really pretty impractical, so I ditched this, too.&lt;/p&gt;
&lt;p&gt;I think I briefly toyed with using SkyDrive (possibly renamed to OneDrive at this point, I honestly don't remember) but again I needed Linux support. I was experimenting with Windows on my laptop back then, though, so it already was included. Early Windows 10 was even too slow for me, though, so I put Linux back on the laptop before my first semester was out, so OneDrive is now a time capsule for me.&lt;/p&gt;
&lt;p&gt;Files I needed for configuration were usually just left in the CloudStation folder or whatever, and I'd point the individual applications I was using to them as needed. At this point, I was still using KDE, so my requirements weren't as complicated.&lt;/p&gt;
&lt;h2&gt;RSyncCStation&lt;/h2&gt;
&lt;p&gt;The first shell script I introduced into daily usage was &lt;code&gt;rsynccstation&lt;/code&gt;, which lives on now as &lt;code&gt;rscs&lt;/code&gt;. The original version was actually the longer command, and I hadn't learned tab completion yet so I spent a lot of time typing it.&lt;/p&gt;
&lt;p&gt;Basically, I spun up a Pi in my dorm room and just rsync'ed the CloudStation folder from when I was using CloudStation to and from the pi, rather than my dad's server. The script itself was about two lines long, one to get files, and one to put them.&lt;/p&gt;
&lt;p&gt;This directory got big fast, so, over time, I ported rsynccstation to Python (I guess I was afraid of shell?) and made it support different folder targets. One of them was a folder I called "Configs" at the time, since I thought the term "dotfiles" sounded dumb back then. That was my solution.&lt;/p&gt;
&lt;p&gt;I also used this as my file sync solution for schoolwork, but more details on the tool can wait for now. It had other benefits, and I think I may still use it in one or two places. &lt;a href="https://github.com/CannonContraption/rsynccstation"&gt;You can find rscs here&lt;/a&gt; and &lt;a href="https://gitlab.com/CannonContraption/rscs2"&gt;here for the Python version&lt;/a&gt;. I recommend the Shell version, I rewrote it in 2019.&lt;/p&gt;
&lt;p&gt;Eventually, through a lot of iterations, I ended up with a directory in &lt;code&gt;~/.config/vanilla/&lt;/code&gt; containing templates for every piece of configuration I would need. I briefly had a shell script that would install it all for me, but it was slow and would duplicate effort every time I changed something, so I took to just imaging my &lt;code&gt;~&lt;/code&gt; every time I reimaged a computer, then just restored it when I was done. This was horribly lazy and meant that some machines developed very pronounced quirks. I would forget to symlink certain things all the time, and sometimes I would copy something since the program would modify the configuration on its own with things like hostname information. Emacs especially would write to .emacs, so that wasn't a symlink.&lt;/p&gt;
&lt;p&gt;Any of this sound clumsy to you? It's probably at least as bad as you think, since during this time I started using i3 for a time, then eventually forked DWM so I could patch it to high hell so I wouldn't run out of battery in class and could show more code on a 1080p display, and so on. Again, post coming at some point, probably.&lt;/p&gt;
&lt;p&gt;This pile of configuration wasn't getting any smaller.&lt;/p&gt;
&lt;h1&gt;Switch to Ansible&lt;/h1&gt;
&lt;p&gt;My first time playing with Ansible was with the church I've attended for pretty much my whole life. We had an old office PC that I had needed to reimage a few times due to random OpenSuSE bugs (and my own recklessness just as often as not) so I set up a basic playbook to check for and install packages as needed. I was pretty happy with it, and always intended to expand it to include user creation and configuration steps. I didn't manage to finish before the pandemic hit, however, so I pretty much forgot about it.&lt;/p&gt;
&lt;p&gt;Later on, however, I joined Kitsune Security. We had ambition, and we wanted to back that up with solid technical frameworks as well. This meant that we wanted to be able to just roll out a copy of one of our corpnet VMs at any point based on some existing, known-good configuration. Ansible was the frontrunner in this conversation since we all had some exposure to it.&lt;/p&gt;
&lt;p&gt;This got the gears turning in my head again, and so I began looking into all of the components I needed set up for a working desktop experience. I found some guides online that talked about how to do certain things, but I ended up looking up a lot of it myself. So, I wanted to make this post to document where I came from, and describe how to skip all of that pain and just start with a solid foundation.&lt;/p&gt;
&lt;h1&gt;Common-Sense Recommendations&lt;/h1&gt;
&lt;p&gt;I'm going to be creating a Git repository to house everything in this walkthrough. Please, for the love of everything good in this world, &lt;strong&gt;&lt;em&gt;DO NOT STORE CREDENTIALS ON GITHUB!&lt;/em&gt;&lt;/strong&gt; You probably know better, but I'm putting this here just in case. If you follow my guide, your configuration may expose how your computer works to the web, but it shouldn't also expose any passwords. Don't store credentials (public/private keys included) in anything that syncs between machines.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt; use Git. This is mostly meant as a description of how to use Ansible, but I'm assuming you have more than one machine to sync between. If you don't, that's perfectly fine. This will still make a good starting point for reimaging from scratch if you ever need to, but even then putting your changes in Git will let you bisect your configuration files down the line to figure out where and why you introduced a bad change. This was basically the one feature I wanted that made me regret using Rsync pretty thoroughly for this job.&lt;/p&gt;
&lt;p&gt;If you have your own server (or even just a spare Pi) use this first for Git hosting. See &lt;a href="https://git-scm.com/book/en/v2"&gt;the Git Book&lt;/a&gt; if you want to learn how to do this. Same goes for anything else related to Git, if you choose to follow my last piece of advice I'm going to expect you already know how to use Git to some extent. If you don't, you'll benefit from learning it. Even non-technical things like writing benefit from Git, so time spent learning it is time well spent, if you ask me.&lt;/p&gt;
&lt;p&gt;At some point I may create a playbook to install &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;HeadCannon DWM&lt;/a&gt;, &lt;a href="https://alacritty.org/"&gt;Alacritty&lt;/a&gt;, &lt;a href="https://gitlab.com/CannonContraption/envy-scripts"&gt;Envy Scripts&lt;/a&gt;, &lt;a href="https://gitlab.com/CannonContraption/fswap"&gt;FSwap&lt;/a&gt; and so on like I do, but I haven't done it yet. Since I don't have a concrete example like this, you can treat this post like a "how-to" for people in my position when I got started. I had a pretty complete setup already that I wanted to import into Ansible, and nobody seemed to have a single place with a simple example of how to do the things I wanted. Obviously you can find all of this information separately on your own, I did, but I would have preferred it all in one place. Create the world you want to live in, they say.&lt;/p&gt;
&lt;h1&gt;Basic Structure&lt;/h1&gt;
&lt;p&gt;Ansible has two main concepts we're concerned with, playbooks and tasks. If you're a seasoned Ansible user, you can probably tell me how I'm leaving out so many features and important terms, but honestly I really only care about this operationally, and this is a very basic use case.&lt;/p&gt;
&lt;p&gt;Ansible has a few types of tasks we're worried about. They call these "modules", and it should be pretty clear why. As a quick disclaimer, I'm doing this for a Fedora setup, but you should be able to adapt this to another distro, it's not like Ansible is RedHat only or anything. Because of this, we're going to use the modules copy, command, file, dnf, git, and make. You probably won't need all of these, so rather than get prescriptive about how your desktop is set up, I'm going to assume you have something you already want to set up. I'll also briefly touch on Apt in case you run Raspbian, too (Fedora on a Pi 4 isn't here, as of writing). There's a generic "package" task as well, but I avoid it since each distribution uses its own package names. Filtering by package manager doesn't solve the problem completely, but it makes it much less likely you'll ask for &lt;code&gt;fonts-firacode&lt;/code&gt; rather than &lt;code&gt;fira-code-fonts&lt;/code&gt;, just to list a Debian/Fedora example.&lt;/p&gt;
&lt;p&gt;You can also import tasks from other YAML files into your playbook. This let me create a different "playbook" for my Raspberry Pis running Raspbian, just replacing the YAML file for packages with one specific to the pi. The configuration is otherwise the same. While this does introduce the risk of missing some packages, the names will always be correct for Raspbian this way, so it's the solution I've opted for.&lt;/p&gt;
&lt;h1&gt;Tutorial&lt;/h1&gt;
&lt;h2&gt;Make a Playbook&lt;/h2&gt;
&lt;p&gt;These are the only two boilerplate lines you need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- hosts: localhost
  tasks:
  - list your tasks here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For my use case, this is just a couple of import_tasks lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- hosts: localhost
  tasks:
  - import_tasks: tasks/fedora-packages.yml
  - import_tasks: tasks/desktop-configuration.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Doing it like this lets you split different components off in interesting ways. I specified in this example the files &lt;code&gt;fedora-packages.yml&lt;/code&gt;, meaning package installation for Fedora Linux, and &lt;code&gt;desktop-configuration.yml&lt;/code&gt; meaning install the configuration I want on my desktops and laptops, not my server. To make a server playbook, I could keep the exact same list of packages and just change the &lt;code&gt;desktop-configuration.yml&lt;/code&gt; include to be &lt;code&gt;server-configuration.yml&lt;/code&gt; to install specifically just server stuff. I do recommend putting your sub-playbooks in a separate directory (like &lt;code&gt;tasks/&lt;/code&gt; in my example) so that you don't mistake them for top-level configuration templates.&lt;/p&gt;
&lt;h2&gt;DNF Task&lt;/h2&gt;
&lt;p&gt;Again, I recommend putting all of these in their own file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: install some editors
  become: true
  dnf:
    name:
    - vim
    - emacs
    - kate
    - geany
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So in this example, we want to install some editors. There's a few things going on here.&lt;/p&gt;
&lt;p&gt;First of all, we named the task with the type of thing we're trying to install. This shows up in the terminal output when the playbook is run. I do recommend splitting packages into groups like this, it helps with troubleshooting when something goes wrong down the line. However, making another task for every package is tedious, so doing it like this also saves some time by bundling like packages together.&lt;/p&gt;
&lt;p&gt;Secondly, there's that &lt;code&gt;become: true&lt;/code&gt; line. This tells Ansible it needs to become &lt;code&gt;root&lt;/code&gt; in order for this task to run correctly. It's Ansible's version of &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we listed our packages under &lt;code&gt;dnf.name&lt;/code&gt;. The &lt;code&gt;name&lt;/code&gt; property is already a list, making our job easier.&lt;/p&gt;
&lt;h2&gt;Apt Task&lt;/h2&gt;
&lt;p&gt;This works &lt;em&gt;exactly&lt;/em&gt; like the DNF task for our purposes, just replace &lt;code&gt;dnf:&lt;/code&gt; with &lt;code&gt;apt:&lt;/code&gt; and use it the same way.&lt;/p&gt;
&lt;h2&gt;Copy Task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Copy LMMS Configuration
  copy:
    src: conf/lmmsrc.xml
    dest: /home/yourusername/lmmsrc.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the most straightforward type of copy, no permissions management included. In this case, I copied my LMMS configuration to my &lt;code&gt;~&lt;/code&gt; since it doesn't store its configuration in an XDG location like &lt;code&gt;~/.config&lt;/code&gt;, which I much prefer.&lt;/p&gt;
&lt;p&gt;Note that I'm using absolute paths. This is a weakness of Ansible copy. It's meant to work in server installations where you might need to reconfigure tens or hundreds of servers at once, and so it does not read anything from the environment, other than just its own directory. That means we can refer to local files in the same place as the playbook, but any path we want to copy those files to &lt;em&gt;must&lt;/em&gt; be an absolute path. If your usernames aren't already consistent across machines, now is a good time to fix that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;- name: Copy ZSH Configuration&lt;/span&gt;
&lt;span class="x"&gt;  copy:&lt;/span&gt;
&lt;span class="x"&gt;    src: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.src&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    dest: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.dest&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    mode: 0600&lt;/span&gt;
&lt;span class="x"&gt;  with_items:&lt;/span&gt;
&lt;span class="x"&gt;    - { src: conf/.zshrc, dest: /home/yourusername/.zshrc }&lt;/span&gt;
&lt;span class="x"&gt;    - { src: conf/.zprofile, dest: /home/yourusername/.zprofile }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a little trickier. We want to copy everything related to ZSH in one task, so we use Ansible's "with_items" syntax. We're creating a small data structure that we can then refer to in our copy command, and then all we have to do is just type in the source and destination for each file, and the files will be copied the same way in one step.&lt;/p&gt;
&lt;p&gt;I also included a permissions mode here. I use this pretty much only for my SSH configuration, but didn't want to type another example. You don't need a &lt;code&gt;with_items&lt;/code&gt; list to use the mode flag, and you don't need the mode flag to use &lt;code&gt;with_items&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Command Task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Disable ethernet autoconnect
  command: nmcli c mod eth0 connection.autoconnect no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one is straightforward. Here I used it to run nmcli to set eth0 to not auto-connect, but you could run essentially any command here. There's no shell, so if you need one you'll need to enclose your command in &lt;code&gt;sh -c&lt;/code&gt; or something like that. Remember that you can use &lt;code&gt;become: true&lt;/code&gt; if you need to run a command as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;File Task&lt;/h2&gt;
&lt;p&gt;Interestingly, I only use this to make directories, not files. However, its purpose is to do both.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;- name: Create config directories&lt;/span&gt;
&lt;span class="x"&gt;  file:&lt;/span&gt;
&lt;span class="x"&gt;    path: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.path&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    state: directory&lt;/span&gt;
&lt;span class="x"&gt;    mode: &amp;#39;0700&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;  with_items:&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.ssh }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/git }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/i3 }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/git }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/sway }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local/state }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local/share }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local/share/gnupg }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a bunch of skeleton directories in your home folder using the same &lt;code&gt;with_items&lt;/code&gt; syntax as before. There may be a more elegant way to do this (such as automatically making parent directories), but it's fast enough and I haven't had to touch it since I first ran it. My list is much (much) longer than this. It reads kind of like the output of &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Git Task&lt;/h2&gt;
&lt;p&gt;My WM &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;exists in GitLab&lt;/a&gt; but not in a package or binary format. That means I need to clone it and build it to use it. First step is cloning. Ansible will update a Git repository that already exists (and even update remotes information!) if it already exists with the &lt;code&gt;update: yes&lt;/code&gt; parameter. You can also set the ref with the &lt;code&gt;version: refname&lt;/code&gt; syntax, in this case I have it check out the &lt;code&gt;jim&lt;/code&gt; branch (which is my devel branch).&lt;/p&gt;
&lt;p&gt;In my case, this is doubly useful since changes to my WM get synced across machines each time I push to the repository and re-run the playbook.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Clone hcdwm
  git:
    repo: https://gitlab.com/CannonContraption/headcannon-dwm.git
    dest: /home/yourusername/dwm
    update: yes
    version: jim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Make Task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Compile/install hcdwm
  make:
    chdir: /home/yourusername/dwm
    target: localinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I used the target &lt;code&gt;localinstall&lt;/code&gt;, since I made one for my window manager. That builds it, then installs it to ~/.local/bin skipping the need for &lt;code&gt;root&lt;/code&gt; access. If you need &lt;code&gt;root&lt;/code&gt;, just add the &lt;code&gt;become: true&lt;/code&gt; line as with elsewhere. This is equivalent to changing to the &lt;code&gt;/home/yourusername/dwm&lt;/code&gt; directory and then executing &lt;code&gt;make localinstall&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Running your playbook&lt;/h2&gt;
&lt;p&gt;The last thing I need to describe is how to run the finished playbook. If your main playbook is &lt;code&gt;desktop.yml&lt;/code&gt;, you would run this to execute it as described here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ansible-playbook -K ./desktop.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The option &lt;code&gt;-K&lt;/code&gt; tells Ansible that you're using the &lt;code&gt;become&lt;/code&gt; feature and it needs to ask for a password. I believe this gets stored in memory while the playbook runs, but I'm not an Ansible developer so it's probably just as likely they spawn a process as &lt;code&gt;root&lt;/code&gt; right at the start and discard the password, or something along those lines. I'm really not sure.&lt;/p&gt;
&lt;h2&gt;What to Check In To Git&lt;/h2&gt;
&lt;p&gt;So if you followed this guide closely enough, you will probably end up with a directory structure like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;|- .gitignore
|- desktop.yml
|- pi-desktop.yml
|- tasks/
|  |- fedora-packages.yml
|  |- pi-packages.yml
|  |- desktop-configuration.yml
|- conf/
   |- .zshrc
   |- .zprofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should check all of these things into Git. If you store credentials in your zshrc, clean them out first using a tool like Pass, and use its integrated Git support to clone your (now encrypted) credentials across machines. Don't upload these to GitHub either, since it only takes decrypting them to read the passwords, but if you have a server this can be your central Git storage for Pass.&lt;/p&gt;
&lt;h2&gt;Never Check These into Git&lt;/h2&gt;
&lt;p&gt;If you have a Wireguard configuration file, add it to your .gitignore. Wireguard won't let you configure two physical machines with the same IP address, and you'll certainly cause problems if two machines share an IP &lt;em&gt;and&lt;/em&gt; a private key. Copy this separately for each machine. Ansible will tell you if you forgot this.&lt;/p&gt;
&lt;p&gt;If you intend to install GPG keys, treat these like WireGuard configuration files. These are secrets, handle them with care. Ansible will remind you if you forget them. The extra manual copy is (in my opinion, anyhow) worth the extra time.&lt;/p&gt;
&lt;h1&gt;Advantages over a Shell Script&lt;/h1&gt;
&lt;p&gt;Ansible won't touch things that don't need updating. This means if you already have all of the packages in your package list installed, it's going to very quickly just verify that and move on. The same goes for file copies, it won't copy a file that's the same between source and destination, etc. similar to &lt;code&gt;cp -u&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Learning Ansible, even in a limited way like this, should be enough so that if you ever end up with a wide array of home servers or VMs, you now have the tools to just image them to behave as you expect from the moment you spin them up, requiring nothing but an IP address. You can also use your own playbook as a springboard into more advanced Ansible usage.&lt;/p&gt;
&lt;p&gt;Shell scripts also blow right past programs that fail. If one of the packages you wanted to install doesn't exist, it's hard to know that unless you've explicitly written error checking for every command in your script. That gets tedious pretty quickly.&lt;/p&gt;
&lt;p&gt;Ansible playbooks are also slightly easier to read. Because they're highly structured &lt;em&gt;tasks&lt;/em&gt; to perform, a list of packages can look like a list rather than a really long command, and a long &lt;code&gt;cp&lt;/code&gt; command won't have a &lt;code&gt;-ruvZL&lt;/code&gt; hidden somewhere in the middle because you forgot to add it halfway through and didn't bother to put your cursor back to the start*.&lt;/p&gt;
&lt;p&gt;Since it only asks one question, 'What is your root password?', you don't have to babysit it as it runs. There's never going to be a surprise command that takes too long making &lt;code&gt;sudo&lt;/code&gt; time out and ask for your password again.&lt;/p&gt;
&lt;h1&gt;Chef? Puppet?&lt;/h1&gt;
&lt;p&gt;There are probably more of these. I've never used them or really seen the need to learn them. Maybe this is short-sighted, but Ansible has served me fine, so I've never needed to see what these tools are like. There will probably come a day when I learn one or both of these (and probably something else that does the same job, too), but it hasn't come yet. If you're debating Ansible vs Puppet vs Chef, just pick one. Assuming the other two are similar like I think they are, you're probably more likely to come out ahead just for having tried it. Hey, speaking of which, I have a great guide on how to use Ansible for this sort of thing, maybe you'll find it useful!&lt;/p&gt;
&lt;p&gt;It's also worth noting here I'm not an IT professional, I'm a software developer by trade. I do maintain my own things, but I'm very much on the homelab side of things rather than the professional side.&lt;/p&gt;
&lt;h1&gt;Is This Worth It for You?&lt;/h1&gt;
&lt;p&gt;If you skipped to the end wondering how long the post was and arrived here, welcome! If not, thanks for reading! Hopefully you got something out of this.&lt;/p&gt;
&lt;p&gt;If you're a GNOME or KDE user and you stick to the defaults, you probably don't need a solution that uses all of these tasks. If you're someone who doesn't do much more than check email and edit text documents, you probably also don't need them.&lt;/p&gt;
&lt;p&gt;If you constantly forget about some random program you always use every time you re-install your OS, try making a simple playbook! It's not that hard and will save a lot of frustration next time you're offline on an airplane looking for it. Don't go overboard if you don't want to, though. If your desktop settings don't matter to you, don't take them with you!&lt;/p&gt;
&lt;p&gt;If you're like me, and you have heavy customizations in place on your desktops and laptops, try Ansible. If my own story is any indication, it's probably going to be worth it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* I've been there at least once, though not with that &lt;em&gt;exact&lt;/em&gt; set of options.&lt;/p&gt;</content><category term="Tech"></category><category term="ansible"></category><category term="linux"></category><category term="code"></category><category term="desktop"></category><category term="shell"></category><category term="server"></category><category term="scripting"></category></entry><entry><title>Managing Tasks with Org Mode</title><link href="https://cannoncontraption.github.io/taskmanagement.html" rel="alternate"></link><published>2022-08-11T23:33:00-04:00</published><updated>2022-08-11T23:33:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-11:/taskmanagement.html</id><summary type="html">&lt;p&gt;I have ADHD. Personally, I see this as somewhat of a mixed bag, and I know for sure a number of other people with ADHD see it the same way. It's not so much an inability to focus as it is a difference in how focus is achieved. It means â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have ADHD. Personally, I see this as somewhat of a mixed bag, and I know for sure a number of other people with ADHD see it the same way. It's not so much an inability to focus as it is a difference in how focus is achieved. It means that while I may appear scattered and lacking focus in a lot of areas, I also have the ability to hyperfocus on things that interest me in a way that seems dogged and unbreakable to people without ADHD.&lt;/p&gt;
&lt;p&gt;There's still a weakness in this, though, since things like cleaning the bathroom can fall off the back end or get half-finished, so it's useful to have some additional structure. In order to accomplish this, I have a task system. It's not some magic bullet, and I do forget to keep it up-to-date from time to time, but the difference between me with and without the task list is dramatic.&lt;/p&gt;
&lt;h1&gt;What I Used to Do&lt;/h1&gt;
&lt;p&gt;I used a large number of to do apps in high school and college, but for the most part I settled on whatever Google Calendar offered. In general, the experience was... fine, though not especially impressive. I forgot about it regularly, and Google seemed to too, which made it that much harder to stick to.&lt;/p&gt;
&lt;p&gt;I briefly used a variety of different Linux-based task managers, but they all come with a central problem- none of them sync very easily between machines, and they all require that you're basically at your desk to use them. I have a solution for this &lt;em&gt;now&lt;/em&gt;, but at the time I didn't.&lt;/p&gt;
&lt;p&gt;I briefly also used Org mode. However, it didn't stick for very long. I'll get back to this, because it eventually did stick.&lt;/p&gt;
&lt;p&gt;The final solution I tried before what I use now is TaskWarrior. This actually stuck for a while, and I could have kept using it had I figured out how to integrate it with Git at the time.&lt;/p&gt;
&lt;h1&gt;TaskWarrior Pros and Cons&lt;/h1&gt;
&lt;h2&gt;Pros&lt;/h2&gt;
&lt;p&gt;TaskWarrior is an amazing tool. If you use it, you probably know what I mean. It includes a host of features that make complicated tasks and projects easy to break down.&lt;/p&gt;
&lt;p&gt;TW supports dependency management, projects with set goals and subtasks, along with progress tracking and burndown charts, hooks for making things in the system happen when a task is modified*, and colored, themeable terminal output. There's a separate project for client/server stuff, and a number of other supporting applications.&lt;/p&gt;
&lt;p&gt;When I was a partner in Kitsune Security, we used TaskWarrior internally as our company-wide task management system. This was long after I had transitioned myself to Org-Mode, but everyone else was familiar with TW only. We managed multiple users by adding a git hook to everyone's clients. That way, whenever a change was made to the task list it would automatically get added, then committed to the Git repository. Whenever the list was queried, it would perform a Git pull before showing the list. This meant that it effectively worked like Trello or Monday.com, except there was no need for another browser tab to read and manage the list.&lt;/p&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;p&gt;OK, so here's why I stopped using TaskWarrior myself.&lt;/p&gt;
&lt;p&gt;First and foremost, I hadn't used the hooks system with Git yet**. This meant I was using taskd, the task server. This worked OK, but had some serious drawbacks when actually scaled across machines. First of all, it had no conflict resolution abilities &lt;em&gt;at all&lt;/em&gt;. This meant that if two different clients made changes, the changes from one client could just be lost in favor of the copy of the tasks from the other machine. This led to data loss. Ultimately, this is why I moved on and everything else is just little annoyances that I dealt with otherwise.&lt;/p&gt;
&lt;p&gt;There was no quick and convenient way to type long-form in a task. Admittedly, most of the time I don't use this. From time to time, however, I have a lot of notes to add to a task. I ended up just keeping notes separate from TW, essentially splitting my task system into multiple parts.&lt;/p&gt;
&lt;p&gt;Dependencies were also clunky. It is easy and logical to start by outlining a goal, then all of the individual tasks related to the goal as they come to mind. In order to not have to repeatedly edit tasks to correct the dependency tree, you would have to input all of the smallest tasks first, then write the larger umbrella ones with all of the dependencies listed by number in one line in order to model a complex project. This means a lot of extra time spent reading through lists to see what number went with which task. The most reliable way to do this was to model your project on a piece of paper first, then type it in. However, at that point your task list is a separate chore to maintain outside of just project planning.&lt;/p&gt;
&lt;p&gt;The burndown chart was a nice motivator at first, but as time wore on it became more and more useless. Past a certain scale, your open tasks are completely dwarfed by closed tasks, and all you see is a flat line of open tasks with a big, giant sea of closed ones. You could scope this view to the past month to get a better view of things, but without some fairly specific filtering, it wasn't super useful.&lt;/p&gt;
&lt;p&gt;Recursion in TaskWarrior is garbage. It works, but only for a narrow, very basic "make this task every &lt;em&gt;x&lt;/em&gt; days" sort of thing. If you missed breakfast one day and it was your task, the task doesn't go away the next day. You need to make breakfast &lt;em&gt;every&lt;/em&gt; day, and do it twice when you miss a day. Frankly, this is dumb.&lt;/p&gt;
&lt;p&gt;There was probably more, but honestly all but the first of these is more of a nitpick than anything, I'm not trying to put you off TaskWarrior, it's a fabulous tool that I (at this point) do actually recommend, it's just not what I use for these reasons.&lt;/p&gt;
&lt;h1&gt;Switch (back) to Org Mode.&lt;/h1&gt;
&lt;h2&gt;First Attempt, and Why it Failed&lt;/h2&gt;
&lt;p&gt;First of all, Org mode is not a calendar. It doesn't do calendar things very well. For that matter, it's not really a phone thing, either. If you want tasks on your phone, look literally anywhere else.&lt;/p&gt;
&lt;p&gt;I also stuck to a rather narrow subset of features, pretty much just the standard "TODO" and "DONE" features. I used Org Mode for notes both before and after switching to TaskWarrior, in spite of moving off of it for task management. Ultimately, the tool didn't stick this first time. I honestly can't even recall that many details, it was so... unimpactful.&lt;/p&gt;
&lt;p&gt;Recursion was one area where I was impressed, but I didn't use it enough for that to make sense, even.&lt;/p&gt;
&lt;h2&gt;Post-TaskWarrior&lt;/h2&gt;
&lt;p&gt;TaskWarrior, for all of the issues I had with it, got me thinking about my tasks differently from every other tool I tried. I thought of them as atomic "items" that were actionable, rather than big, vague notions of projects I need to start at some point way in the future. This was critical to making my next experience with Emacs work.&lt;/p&gt;
&lt;p&gt;Second was habit tracking, but I'll get to that later.&lt;/p&gt;
&lt;p&gt;Org-mode also solved another big issue I had, since integrating it with Git was as easy as putting all of my Org files in a directory and running git init in the same directory. They cooperated fine, and while I do still need to manually commit/push, I could script that to happen when I close Emacs, for example. Easy stuff, no hidden directory with my tasks in it.&lt;/p&gt;
&lt;p&gt;Org is also readable outside of Emacs. It's not as nice, but it works. This means if I need to change something on the road, it works. Not super cleanly, admittedly, but it works.&lt;/p&gt;
&lt;p&gt;The recursion code is also good. It's not perfect, since the syntax is hard to remember, but you can make recurring items reappear based on a number of criteria, beyond just making another instance of a task appear every so often. The syntax for this is hard to remember, though, so I'll describe it here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SCHEDULED: &amp;lt;2022-08-11 +1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is basic recursion. This schedules the task every month, just like TaskWarrior would. It starts today, as of writing. You can do the same with a deadline by writing &lt;code&gt;DEADLINE&lt;/code&gt; rather than &lt;code&gt;SCHEDULED&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SCHEDULED: &amp;lt;2022-08-11 ++1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you miss this one, it won't pile up, but it'll still be scheduled in the next interval. So, if I want to make lunch for the week every Monday, if I miss a week I won't be asked to make two weeks of lunches, but I'll still get asked the next Monday.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SCHEDULED: &amp;lt;2022-08-11 .+1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This schedules the next one to one month after it's marked DONE. If I wanted to clean the garage every month, it would not pester me to do it again if it hadn't been a month yet since last time, even if last time was late.&lt;/p&gt;
&lt;p&gt;For recursion, this is enough for me. However, if you had more corner cases, you could probably extend the recursion system using some elisp. See my &lt;a href="https://cannoncontraption.github.io/lisp-recursive-glory.html"&gt;article on Lisp&lt;/a&gt; for why you shouldn't be afraid of this option. Bear in mind, however, this is one of my earlier articles before I was as practiced at expressing myself.&lt;/p&gt;
&lt;p&gt;Also, Org Mode supports top-down task creation. This means you can start with the biggest tasks, and then drill down logically. Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* TODO Fix the bike
** TODO Replace the chain
*** TODO buy chain
*** TODO clean chain
*** TODO re-lube new chain
*** TODO install lubed chain
** TODO replace tires
*** TODO buy new tires
*** TODO buy new inner tubes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...and so on. I don't have to specify buying new tires and inner tubes, then add the task to replace the tires on the bike, specifying the other two as dependencies. You can project plan from right within your task system.&lt;/p&gt;
&lt;p&gt;OK, you ready for the big two features?&lt;/p&gt;
&lt;h1&gt;Agenda View&lt;/h1&gt;
&lt;p&gt;If you tell Emacs where to find your Org-mode task lists, it can automatically create an agenda view for you. This is helpful for a lot of reasons, and is (to my knowledge) the only real place where the recursion information gets used. It lists out all of your scheduled and due tasks, or just due tasks, or sorts by tags, or any number of things. The org-agenda view has a lot of options, and basically any screen can be customized. New view modes can also be created as you like, making it extremely flexible.&lt;/p&gt;
&lt;h1&gt;Habit Tracking&lt;/h1&gt;
&lt;p&gt;This is why I've stuck with Org Mode. Literally no other feature is this useful.&lt;/p&gt;
&lt;p&gt;To quote the &lt;a href="https://orgmode.org/org.html#Tracking-your-habits"&gt;Org Mode manual&lt;/a&gt;, "Org has the ability to track the consistency of a special category of TODO, called 'habits.'" This is special because it lets you treat the scheduled date (or date range) of a task like a streak. You can see visually how close you were to meeting your intended completion time, and how close you are to the next time you will have to deal with that task. The visual part is handled by the agenda view.&lt;/p&gt;
&lt;p&gt;If you don't follow why this is huge, or you're like me the first time I used Org and just dismissed this idea, the gist is that Org can gameify regularly getting things done.&lt;/p&gt;
&lt;p&gt;For me, gameifying random tasks puts that motivation to finish everything to completion (and on time) back into the equation. This lets me manage my not-quite-normal attention span and stay organized.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There are other features I could talk about, but most of them boil down to the same few important ones here.&lt;/p&gt;
&lt;p&gt;Do what works for you. I recommend reading David Allen's book "Getting Things Done", either in its entirety or in part, and following some of his recommendations first. Tools are kind of secondary. That said, using Emacs has kept me on track, in spite of my ADHD, and maybe it'll help you too, even if you don't have ADHD.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* This is how the Git integration works, if you opt to write/use it.&lt;br&gt;
** I think I had &lt;em&gt;heard&lt;/em&gt; of it, but I certainly wasn't using it yet. I had individually been using both TW and Git for quite some time, too.  &lt;/p&gt;</content><category term="Tech"></category><category term="tasks"></category><category term="emacs"></category></entry><entry><title>Transition to Pelican, Part 2</title><link href="https://cannoncontraption.github.io/pelican2.html" rel="alternate"></link><published>2022-08-09T19:07:00-04:00</published><updated>2022-08-09T19:07:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-09:/pelican2.html</id><summary type="html">&lt;p&gt;It's been almost two weeks since transitioning this site over to Pelican, and I have some thoughts about the experience so far.&lt;/p&gt;
&lt;p&gt;First of all, it's way easier to write new posts this way, though if you read my last post you'd already know that. Check the &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;blog tag&lt;/a&gt; for â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been almost two weeks since transitioning this site over to Pelican, and I have some thoughts about the experience so far.&lt;/p&gt;
&lt;p&gt;First of all, it's way easier to write new posts this way, though if you read my last post you'd already know that. Check the &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;blog tag&lt;/a&gt; for (most of) the story about the evolution of my blog.&lt;/p&gt;
&lt;h1&gt;I'm Still Using the Default Theme&lt;/h1&gt;
&lt;p&gt;This is what the Fedora package for Pelican gives you for a theme on installation. I've made some minor tweaks to it, such as adding the tagline on a new line, but I haven't done anything groundbreaking yet. The desktop site is still there, nestled away behind a link at the bottom of the page. While it still works, the posts in there are pretty dated and haven't changed very much. I'll add it to the top of the page rather than the bottom once I've finished migrating it.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;There are some improvements I'd like to make in the short term, however. The theme isn't perfect for my needs for a number of reasons, but the main one is the article on the homepage.&lt;/p&gt;
&lt;p&gt;I'm fine with showing a preview of the latest article there, that makes a lot of sense. However, it doesn't really make a lot of sense to me to have it be the entire first page. That makes it much harder to find my back catalog of articles, since they're all shoved to the bottom of the page. Hopefully I'll have changed that by the time this goes live.&lt;/p&gt;
&lt;p&gt;There's also no real "archives" page. It exists, but again it's a link at the bottom of the page. Rather than a proper archives list, the archives will always be split up between the home page and tag/category lists. Since I'm writing more regularly, as I had originally hoped I would when I set up Blogger back in 2017,* that archives list is getting really big for it to be appropriate at the bottom of every page. Instead, it might make more sense to have a "next article" and a "previous article" button at the bottom to let readers start somewhere and progress in time, maybe taking into consideration what category they've picked.&lt;/p&gt;
&lt;p&gt;That leads well into my next issue, the categories at the top. Clicking on a category brings you to what looks like a single post, as if all of that category is contained within just that post. Obviously, this hurts discovery for pretty much everything that's not the most recent article or the oldest. To fix this, I intend to also turn those into classic blog lists.&lt;/p&gt;
&lt;h2&gt;Styling&lt;/h2&gt;
&lt;p&gt;I have some minor nitpicks with the styling, but that can wait. What's there is serviceable, and other than inverted header and link text on hover, it looks OK. I would prefer to eventually start over on this, though. I like light themes, but I tend to try to color-coordinate everything I develop. So, for example, I could copy the colors out of &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;Headcannon DWM&lt;/a&gt; or something along those lines.&lt;/p&gt;
&lt;h1&gt;Will I Keep Using It?&lt;/h1&gt;
&lt;p&gt;For now, the answer is an easy yes. For the future, there's a few things I want to consider. Chief among these is Python. Python is a beautiful teaching tool and prototyping language, with tons of features that make it very approachable for beginners. However, as the site grows I'll undoubtedly start running into instances where it takes Python a long time to process the whole site.&lt;/p&gt;
&lt;p&gt;I did consider just jumping to Hugo right away, but the main issue is that I &lt;em&gt;just&lt;/em&gt; transitioned to Pelican. The performance issue I mentioned at the start is still only a guess based on what I've heard online,** and I haven't run into any major issues. I also don't have some killer feature I'm missing in Pelican that's present in Hugo, though I leave it to time to change my mind on that.&lt;/p&gt;
&lt;p&gt;There are a lot of things that Pelican builds for me that I didn't end up hand-generating before. I have Atom feeds now, sorted by category if you'd like, as well as the ability to preview what I'm working on before I've even finished typing, as a couple of examples.&lt;/p&gt;
&lt;h1&gt;Other Notes&lt;/h1&gt;
&lt;p&gt;If you're looking to try Pelican yourself, use the &lt;code&gt;make devserver&lt;/code&gt; command to just run an auto-reloading web server on your local machine. It defaults to &lt;code&gt;localhost:8000&lt;/code&gt; as the address of the temp server, and makes development way easier.&lt;/p&gt;
&lt;p&gt;If you want to modify the default theme, you'll have to copy it out of wherever your installation system put it. In my case, that's buried somewhere in /usr/share since I used the Fedora package. I hear the theme system is Jinja2, but I know basically nothing about that just how to use themes in Pelican. For a basic blog like mine, this works great, but if your uses are more complicated than mine, be aware of this.&lt;/p&gt;
&lt;p&gt;I do recommend trying Pelican if you've never hosted a static site blog before. Using hand-coded web is tempting, but the convenience and consistency of Pelican makes it a no-brainer when it comes to actually getting writing done.&lt;/p&gt;
&lt;p&gt;That's pretty much it. Hopefully I can whip this site into some better shape soon, and the experience will make a little more sense, but I'm sticking with Pelican for now. It's still an enormous upgrade over what I was doing before.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* Anyone ever notice that, even before making the switch to Pelican, the majority of my posts were written in June and July?&lt;/p&gt;
&lt;p&gt;** I have run into performance issues with &lt;em&gt;Python&lt;/em&gt;, but that might not extend to Pelican specifically.&lt;/p&gt;</content><category term="Tech"></category><category term="pelican"></category><category term="python"></category><category term="blog"></category></entry><entry><title>Pop OS and Updates</title><link href="https://cannoncontraption.github.io/popos.html" rel="alternate"></link><published>2022-08-06T23:07:00-04:00</published><updated>2022-08-06T23:07:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-06:/popos.html</id><summary type="html">&lt;p&gt;I recently bought my grandmother a new PC, just this past year. She had been using a mid-2007 iMac 24". The Mac enthusiasts among you may realize how out of date this is. It last received software updates in 2018, and ever since it's whined about a pending OS update â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently bought my grandmother a new PC, just this past year. She had been using a mid-2007 iMac 24". The Mac enthusiasts among you may realize how out of date this is. It last received software updates in 2018, and ever since it's whined about a pending OS update it refuses to actually install. So, of course, when shopping for a computer I wanted something Mac like that I could keep updating basically forever. She had &lt;em&gt;not&lt;/em&gt; outgrown the Core 2 Duo that machine was running, in spite of it being a meager T7300, and aside from a minor backlight issue, the iMac worked fine, so it was difficult to convince other family members it was time.&lt;/p&gt;
&lt;p&gt;So I just went and did it. I bought a System76 Meerkat, which is an Intel NUC with Pop OS on it, grabbed a monitor, PC keyboard and mouse, and set it up for her.&lt;/p&gt;
&lt;h1&gt;I Didn't Use the LTS&lt;/h1&gt;
&lt;p&gt;In the process of setting up this new computer, I found out about System76's then freshly released Cosmic desktop. Honestly speaking, it looked pretty Mac like, so I took the plunge and upgraded from the LTS to 21.10. My logic was pretty simple, I'm there about every 6 months or so, surely that's enough time to keep things up to date, and no matter how far the OS lags the current release, everything I put on there is virtually guaranteed to be newer than whatever was available in 2018 from Apple.&lt;/p&gt;
&lt;p&gt;To be clear, my plan wasn't to keep upgrading my grandmother to each new non-LTS release of Pop, it was just to use this one so the interface wouldn't be changing as soon as I next showed up to her house. I live pretty far away, so stability is actually a priority here, so I figured this would be a risk for the first 6 months and at worst get ironed out after that.&lt;/p&gt;
&lt;h1&gt;Upgrade time!&lt;/h1&gt;
&lt;p&gt;So it was my first time back since I installed the new computer, and I see a bunch of ominous warnings. They said things along the lines of "This version of Pop is no longer supported!" alongside the usual cheery "upgrade available!" notices. Being a long-time Ubuntu user up until a year or so before they axed the Unity desktop, I wasn't expecting this. Non-LTS releases of Ubuntu last a few months before they go obsolete, and the sources stay online for a year or two after they've shuttered support.&lt;/p&gt;
&lt;p&gt;Not so here.&lt;/p&gt;
&lt;p&gt;I opened the Pop Shop to grab updates, and was greeted by a very detailed error message saying it couldn't pull some archives. I figured this had to be a mistake, the archives had moved, or there was some package I was missing.&lt;/p&gt;
&lt;p&gt;After some browsing around, I found the hard truth- System76 had pulled the archives for Impish off of their servers, and nothing I found pointed to an "old-releases" archive where I could get fresh copies. As a result, the official Pop OS updater repeatedly failed to update to Jammy, since it would try to replace the sources.list it expected, complete with the (now gone) Pop OS packages, then update the existing system first. This is usually good practice when doing an OS upgrade like this, it ensures that you're taking the smallest leap in versions possible, and it ensures that the core components are already patched for the upgrade, etc. Since it put the sources.list back on its own, though, I could never get it to even refresh the package indexes.&lt;/p&gt;
&lt;p&gt;I tried all sorts of things to make this work, like typing in the Pop OS PPA address that they used in the old days, which existed for Impish, but every time the updater would point back to System76's own site and the update would fail.&lt;/p&gt;
&lt;h1&gt;Solution?&lt;/h1&gt;
&lt;p&gt;I did get it to update.&lt;/p&gt;
&lt;p&gt;I've used Debian for a long time now, and I've upgraded at least from 9 -&amp;gt; 10 -&amp;gt; 11, and probably before that too. The process of upgrading sources.list by hand doesn't daunt me all that much, and I'm prepared to do it. The wild card was System76's customizations. I could expect this would work on Ubuntu or Debian, but this wasn't my machine, would it be better to wipe it and do all of the work of re-importing things from 6 months ago?&lt;/p&gt;
&lt;p&gt;I took the plunge, in the end. I just hand-edited the sources.list from &lt;code&gt;deb https://url.example.com impish main universe multiverse&lt;/code&gt; to &lt;code&gt;deb https://url.example.com jammy main universe multiverse&lt;/code&gt; or whatever for each line, ran &lt;code&gt;apt update&lt;/code&gt; then &lt;code&gt;apt dist-upgrade&lt;/code&gt; and waited for fireworks.&lt;/p&gt;
&lt;p&gt;Fortunately, they never came and the update went smoothly. I asked Pop OS to update its recovery partition, and that worked OK, too.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Be careful with these smaller distributions. They're great for a lot of things, but take them seriously when they say they recommend the LTS. There's a good chance they don't expect you'll be upgrading 6 months down the line with no opportunity to even check in between.&lt;/p&gt;
&lt;p&gt;In the case of Pop OS, back up your data and do what I did if you ever find yourself in a jam upgrading to Jammy (or whatever the latest release is, I couldn't resist the pun). Just remember what you're getting yourself into.&lt;/p&gt;
&lt;p&gt;I should also note at this point that the computer has otherwise been working great for her. I bought the "tall" model with the 10th gen chip and an SD slot so that she could store the 20+ years of digital photos she has, and Shotwell as worked excellently as an iPhoto replacement. Pop OS is really solid, and the System76 support team has always been good to me, so they would probably help you through things if you got stuck and didn't know what I know. I still recommend them highly, even for Grandma!&lt;/p&gt;</content><category term="Tech"></category><category term="popos"></category><category term="linux"></category></entry><entry><title>Running an Unfederated XMPP Server For Fun (but Not Profit)</title><link href="https://cannoncontraption.github.io/xmpp.html" rel="alternate"></link><published>2022-08-02T19:15:00-04:00</published><updated>2022-08-02T19:15:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-02:/xmpp.html</id><summary type="html">&lt;p&gt;Since late 2018 or early 2019, I've been running a personal XMPP server. It's not federated, and there's only about 4 or 5 users, but I've learned a lot in the process of maintaining it.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;When I was in college, I had a number of friends who would text â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since late 2018 or early 2019, I've been running a personal XMPP server. It's not federated, and there's only about 4 or 5 users, but I've learned a lot in the process of maintaining it.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;When I was in college, I had a number of friends who would text constantly. However, the state of text messaging on Android at the time was not all that great. There was no way to mute individual chats, nor was there a way to customize sounds on a chat-by-chat basis, and so on. Given these features, and the fact that some of my friends were somewhat disaster prone at the time, it was somewhat unwise to mute my phone in the car, but every time somebody sent a meme it would always buzz my pocket, pulling me out of the zone. I like driving quite a lot, but I definitely like it most when I can drive in the zone, uninterrupted and focused on getting the most out of the machine.*&lt;/p&gt;
&lt;p&gt;Given all of this, and the fact that SMS can sometimes be a bit flaky on the delivery side (leading to some heated arguments at times), I convinced the majority of the people I spent the most time with to switch to Hangouts.&lt;/p&gt;
&lt;p&gt;Who remembers Google's first few announcements about Hangouts going away?&lt;/p&gt;
&lt;h2&gt;Hangouts Substitutes&lt;/h2&gt;
&lt;p&gt;Around the first of these announcements I started searching for a replacement. I'm not sure if we had been on the platform for more than a year at this point, so feeling burned, I started my search.  There were a few that sat on my shortlist, but here are some of the highlights:&lt;/p&gt;
&lt;h3&gt;Tox&lt;/h3&gt;
&lt;p&gt;I'm not sure how seriously I took this one. Tox is a great system if everyone you're talking to has a degree in computing of some sort, and certainly the people that introduced this to me in high school were highly technical, so they would have used it OK. However, probably about half of the people I wanted to use this with would have gotten frustrated with it and moved on.&lt;/p&gt;
&lt;p&gt;This is mostly since Tox is totally peer-to-peer. This means no offline delivery, no central caching, and user IDs had to be carefully backed up in case somebody's phone broke. I suspect delivery in particular is handled slightly better by the most popular Tox clients today, but at the time this made it a non-starter.&lt;/p&gt;
&lt;h3&gt;IRC&lt;/h3&gt;
&lt;p&gt;This was my first choice, but I couldn't really figure out how to make it work right. The biggest problem was actually me- I didn't have mobile data at the time, which meant I couldn't just stay connected to an IRC channel all day. For anyone who doesn't know IRC all that well, I don't know of any server software that does delayed delivery. Either you're online and you receive the message from the server, or you're offline and you don't. This makes it actually an even harder sell than Tox, in spite of being centralized.&lt;/p&gt;
&lt;p&gt;I had planned at first to try and see if I could modify an IRC server to recognize registered nicks and send delayed messages, but in the end I never got around to even looking to see if an established server supported this. IRC is maybe a little &lt;em&gt;too&lt;/em&gt; barebones for my uses in this case.&lt;/p&gt;
&lt;h3&gt;Matrix&lt;/h3&gt;
&lt;p&gt;I wanted this to work so badly. Matrix had the most promising server software, along with the concept of "bridges" which would have allowed those of us who wanted to use a console CLI and an IRC client to join in. There was at least one such person. However, I followed the official install instructions for their python server software, Synapse, and couldn't ever get it to work properly. Not wanting to dive into Docker (which in hindsight was pretty dumb, Docker is dead simple), I ended up giving up on this, too.&lt;/p&gt;
&lt;h3&gt;XMPP&lt;/h3&gt;
&lt;p&gt;I'll get into this later. Obviously it's the option I went with.&lt;/p&gt;
&lt;h2&gt;Chat Services I Didn't Want at All&lt;/h2&gt;
&lt;h3&gt;Whatsapp&lt;/h3&gt;
&lt;p&gt;This got ruled out pretty quickly. since I believe by the time I had looked into it enough to know what it is, Facebook had long since bought it. I don't think I really need to explain this, we all know about Facebook and data privacy.&lt;/p&gt;
&lt;h3&gt;Skype&lt;/h3&gt;
&lt;p&gt;I never took this one seriously. In hindsight maybe I should have, since it's very close in function to Hangouts, but the interface always sucked and it probably wouldn't have stuck around for very long as our preferred choice.&lt;/p&gt;
&lt;h3&gt;Signal&lt;/h3&gt;
&lt;p&gt;This wasn't very big or polished yet. It worked, and I do recall a friend or two telling me I should use it, but these were the same people who were telling me about Tox some years ago, so I dismissed the option. My impression is that Signal was quite a lot rougher in 2017 and 2018 than it is now (2022), so this probably wasn't a bad decision for the time. I didn't check, though.&lt;/p&gt;
&lt;h3&gt;Discord&lt;/h3&gt;
&lt;p&gt;This was aimed at gaming chat rather than general chatter like it is now. Many of us did play video games, but we already used Steam chat for that, and there didn't seem to be another compelling reason to use it.&lt;/p&gt;
&lt;h1&gt;Switch to XMPP&lt;/h1&gt;
&lt;p&gt;We had all decided to take Hangouts' shutdown seriously at this point, and I had been promising people I'd come up with a solution for a while. So, eventually, I figured out hosting and spun up a Prosody instance.&lt;/p&gt;
&lt;p&gt;The transition was less than smooth, however. One of my friends owned an iPhone at the time, and this turned out to be a serious problem since I used a strange port for the server. It was only ever supposed to be just among friends. As it turns out, we couldn't find an XMPP app on the app store (that was free) that let us set the port number for the server.&lt;/p&gt;
&lt;p&gt;Once we all did manage to get onto the server, though, there was a significant number of problems with the Android app we used at first. Yaxim is not a bad option, all things considered, but it's kind of heavy on data and battery. Shortly after I got this working, I also got mobile data on my phone, but only up to a maximum of 512 MB. It also had a tendency to crash every now and again, leading to missed messages.&lt;/p&gt;
&lt;p&gt;Eventually, I heard about Conversations and OMEMO encryption, and moved everyone over. This not only improved our encryption from simple HTTPS (like Telegram, but with hosting we controlled) to real end-to-end double-ratchet goodness (a la Signal). This also crashes a lot less, and uses a lot less data and battery. However, the only way to get it for free is to use F-Droid or compile it yourself. Normally I would just pay for it, but I was moving away from using the Play Store as much as possible, and I didn't want to input my credit card on each person's phone just to buy them one app.&lt;/p&gt;
&lt;p&gt;I don't actually recommend you go this route, always support the creator if it's practical, and Conversations deserves your support. The $3 or whatever on the Play Store is worth it, this is one of the most quality apps on the platform (IMO).&lt;/p&gt;
&lt;p&gt;At any rate, this is more or less the state of things now. The friend with an iPhone had been having other minor problems with it for a while, and took the chance to switch to Android and has been there ever since.&lt;/p&gt;
&lt;h1&gt;Experience Since&lt;/h1&gt;
&lt;p&gt;Honestly, it's worked OK. If you don't want to read the rest, my final verdict is that it's worth the effort if you're in &lt;em&gt;exactly&lt;/em&gt; my position from a few years ago, but things have changed a bit since.&lt;/p&gt;
&lt;h2&gt;Pros&lt;/h2&gt;
&lt;p&gt;This is probably the most private solution for our uses. Like I've mentioned several times, we control the hosting, and since we all use either Profanity or Conversations (or both), we all have access to OMEMO encryption, which is on by default in most direct chats. All of the server and client code can be audited at any time, and we can rest easy to some degree since not being federated means that nobody is going to just server-to-server exploit our chat system. I actually briefly talked about federating the server, and the former iPhone friend actually stopped me for this reason.&lt;/p&gt;
&lt;p&gt;Since XMPP uses usernames (unlike cell phones), there are a few more options for notifications. For example, in a big group chat we can all link each other memes and say stuff that doesn't need everyone's attention, and anybody interested can see it. Anybody who's not interested doesn't have to have their pocket vibrate every time. This silence is truly golden, and the implementation of mentions (just say the person's username) is probably the smoothest one I've ever used. XMPP and IRC seem to be the primary users of this system, pretty much everywhere else you have to say +Somebody or @somebody, which is awkward on a cell phone keyboard. Equally critically, though, you can set this on a chat by chat basis, meaning that if there's a group chat where you want to hear everything right away, say for example for business reasons, you can just tell Conversations to make that chat always ping you. The default is mentions only, however.&lt;/p&gt;
&lt;p&gt;There's no storage limit on uploaded files, unless you impose one or use a tiny disk to store information. In our case space is pretty limited, but we don't tend to do a lot of large image or file transfers over XMPP, so storage hasn't been a problem yet.&lt;/p&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;p&gt;Just like any other chat system, you either have to trust someone else to host it for you, or host it yourself. There's a huge issue with the number of choices for hosting elsewhere, so choosing a provider can be the same type of decision paralysis as choosing a Linux distro, or even worse. Also, not every server provides every feature you might want, so choosing somebody else's comes with some caveats.&lt;/p&gt;
&lt;p&gt;Self-hosting comes with other compromises, too. Unless you pick someone else's datacenter, you will need to either pay to colocate, or purchase a UPS and other associated hardware. If you run disk encryption (which is probably a good idea on your own hardware, just for privacy reasons), you'll need to unlock the disks on bootup for the server to operate. This can mean power outages lead to extended downtime without that UPS.&lt;/p&gt;
&lt;p&gt;Some components aren't very well documented. I haven't run into much of this, but at the beginning of the pandemic we tried voice/video calling, just out of curiosity, and it "worked", but never managed to connect successfully. I never looked into it any farther, but my hunch is the strange ports have something to do with it.&lt;/p&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;In today's world, I would pick Signal over going this route. It's quite possible that this XMPP server setup isn't long for this world at this point, in spite of some of its advantages. This is in part due to the small user base, I've been pretty picky about who I grant access to the server, even among friends. It was never interesting enough for someone to even question that, most people who found out about it reacted with "oh, that's cool" or something similar.&lt;/p&gt;
&lt;p&gt;Signal, on the other hand, is far better than even when I started using it. Since it uses phone numbers, connecting with people on the platform is seamless, so long as they're a contact. Furthermore, I'm not maintaining the user database, that's someone else's problem. This means anyone can join. We can pull in new members of the friend group pretty much risk free. It can also replace your SMS app, making it very easy to just automatically start using it with someone new. This all avoids device-specific pitfalls like over-simplified iOS clients, or vendor lock-in like with iMessage.&lt;/p&gt;
&lt;p&gt;I'd love a world where we all use XMPP much like we all use email. It's designed to work like that, and because of this design it's likely going to outlive all of the other options. However, you'll want a federated server to get that.&lt;/p&gt;
&lt;p&gt;* I drive stick shift, hence why I even &lt;em&gt;can&lt;/em&gt; focus on that.&lt;/p&gt;</content><category term="Tech"></category><category term="xmpp"></category><category term="chat"></category><category term="server"></category><category term="communication"></category></entry><entry><title>GNOME Shell is a Great Tablet UI</title><link href="https://cannoncontraption.github.io/gnomeshell-tablets.html" rel="alternate"></link><published>2022-07-31T14:30:00-04:00</published><updated>2022-07-31T14:30:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-07-31:/gnomeshell-tablets.html</id><summary type="html">&lt;p&gt;GNOME Shell is a pretty great tablet UI. It's not the most polished one ever, but it works really well, in spite of targeting desktop first these days.&lt;/p&gt;
&lt;p&gt;I honestly wish I could get it on my (up-to-date) Surface RT.&lt;/p&gt;
&lt;p&gt;This all started from &lt;a href="https://cannoncontraption.github.io/tabletrevo.html"&gt;a post I did a couple â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;GNOME Shell is a pretty great tablet UI. It's not the most polished one ever, but it works really well, in spite of targeting desktop first these days.&lt;/p&gt;
&lt;p&gt;I honestly wish I could get it on my (up-to-date) Surface RT.&lt;/p&gt;
&lt;p&gt;This all started from &lt;a href="https://cannoncontraption.github.io/tabletrevo.html"&gt;a post I did a couple days ago&lt;/a&gt; about why the tablet revolution never came like we expected. This whole topic came to mind recently as I started reading other people's blogs, notably &lt;a href="mrmoneymustache.com"&gt;Mr. Money Mustache&lt;/a&gt;, and I dug up my old Surface RT so I could read the blog like a book. I got the Surface off of a friend who used it briefly in high school and was about to throw it out. It did get me to muse a little about what the future looked like back in 2012 when 'Surface' was a sexy new brand that showed a lot of promise, and some people still believed laptops and desktops would be gone in a few more years.&lt;/p&gt;
&lt;p&gt;The Surface wasn't the first tablet I reached for, though. I also have an XPS 15 2-in-1 (which in this case I bought myself) that I was briefly using GNOME on so I could use it like a tablet. In spite of its heft and size, this was a really nice way to read as far as I'm concerned, and I only really switched back to the Surface when the battery started running low.&lt;/p&gt;
&lt;p&gt;So that brings me to the other thought that occurred to me when I came up with &lt;a href="https://cannoncontraption.github.io/tabletrevo.html"&gt;the last post&lt;/a&gt;, GNOME is a really pretty excellent tablet and touch interface. It's not perfect, but it's very comfortable and really would only need minor tweaks to do excatly what Windows 8 set out to do, but much better.&lt;/p&gt;
&lt;h1&gt;GNOME still targets keyboard and mouse&lt;/h1&gt;
&lt;p&gt;This is probably the single most important point. GNOME still supports keyboard and mouse input, and still treats it like a first-class citizen. That's where Windows stumbled with Windows 8. I'll defend that UI, actually, I think Windows 8 made a much better tablet OS than Windows 10, it's not even close. However, it's hard to argue that in the process of making Windows tablet friendly they didn't neglect the desktop in the process. GNOME came from keyboard and mouse, and while they also made radical shifts, they never went so far as to make the desktop a second-class interface in favor of whatever new thing they were doing.&lt;/p&gt;
&lt;p&gt;I'd also like to point out here that GNOME makes an excellent desktop UI; even without a touchpad or touchscreen, GNOME shines as a great desktop for productivity use. I almost gave up my tiling window manager for work at one point because GNOME was working so well. That's saying something, since I &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;maintain my own&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind, the GNOME team made some really smart (but not too drastic) decisions about UI scaling over time that made GNOME easier to use with a mouse, as well. A lot of people complained about the bigger buttons and UI elements, but once you get used to it, they're not so big as to make the UI comical and it's much faster (even with a mouse) to hit the button you want.&lt;/p&gt;
&lt;p&gt;In addition, when running on a tablet, you do actually have enough space to manage windows like a desktop, and it lends itself well to a much more productive workflow. App switchers make sense on a phone, but on a tablet you should have the option to look at more than one thing at a time.&lt;/p&gt;
&lt;p&gt;They also didn't make the desktop an "app" or something dumb like that.&lt;/p&gt;
&lt;h1&gt;GTK+ 3&lt;/h1&gt;
&lt;p&gt;I think it's safe to say at this point that, in spite of all of its early adoption struggles and increased system resource usage, GTK 3 was a massive leap forward. Beyond just smoother rendering and CSS themes (even if some people are in denial about these), we also got real multitouch support, swipe to scroll, and eventually enhanced versions of these with Wayland.&lt;/p&gt;
&lt;p&gt;As a brief aside, if you're trying to use a touchscreen or trackpad with GNOME on Xorg, try Wayland instead and see if things improve. Xorg has some very sane design decisions for the 1980s and 90s, but misses a lot of finer points about desktop navigation in the 21st century. For example, touching the screen moves the mouse pointer and left-clicks on the screen. The behavior in Wayland is similar, but the touch input is its own cursor and can get much fancier much more easily. This manifests in small (but important) graphical and input glitches that just don't exist on Wayland.&lt;/p&gt;
&lt;h1&gt;Touch Gestures&lt;/h1&gt;
&lt;p&gt;GNOME has touch gestures! Seriously, on your laptop try swiping up or down with 3 fingers, your overview should appear. Left and right switch workspaces.&lt;/p&gt;
&lt;p&gt;I really don't think I have to say much more, these gestures are very reliable, and you'll end up using them a lot if you learn them. They also work on the touchpad just as well as on a touchscreen.&lt;/p&gt;
&lt;h1&gt;Multitasking&lt;/h1&gt;
&lt;h2&gt;Multiple Windows&lt;/h2&gt;
&lt;p&gt;I touched on this earlier, but I feel like this is important. GNOME makes an effort to make window titlebars grabbable. You can touch and drag any window anywhere on the screen, and with snapping gestures, split screen and maximized windows are easy to accomplish with a finger. I remember header bars being somewhat controversial, but honestly I think this is a smart way to use all of the space in a window without making the titlebar too small to grab with a finger.&lt;/p&gt;
&lt;h2&gt;Workspaces&lt;/h2&gt;
&lt;p&gt;This is the real winner for the GNOME workflow, in my opinion.&lt;/p&gt;
&lt;p&gt;When you ask someone how they organize their work vs how they organize their desktop, there's probably a disconnect somewhere in there. Either the person will get confused, and say that they have folders for all of their projects, or they'll lay out a detailed system of how to identify which windows they want to restore from minimize in their taskbar to bring up the exact project they were working on. Alternatively, they'll admit it's a mess and probably say they should close stuff more often.&lt;/p&gt;
&lt;p&gt;This is why I count the fact that GNOME has no minimize button by default as a hilariously, obviously positive trait. You'll never find me faulting you for turning it back on if that's your preference, and it's good they kept that option, but in all honesty workspaces should be the real way people organize their work. Rather than hiding the stuff you're not working on, why not just categorize it?&lt;/p&gt;
&lt;p&gt;On a tablet this works just as well. In fact, it's even better here since you don't have to target your finger at tiny little taskbar icons to pull your work back up, you just swipe to the side.&lt;/p&gt;
&lt;h1&gt;Rough Edges&lt;/h1&gt;
&lt;p&gt;So, this whole post is mostly just me gushing about GNOME and all that's great about it. Truthfully, it's far from perfect, and there are even a few things that Windows 8 does much better, notably in the app grid. There are other rough edges elsewhere, too.&lt;/p&gt;
&lt;p&gt;Normally this is where I would say that I intend to fix these things or at least take a crack at them, but in all honesty I use GNOME maybe a few times a year at the moment, since I do most of my work in Headcannon-DWM and Sway. I would encourage anyone working on the team who still sees these as issues to give it a try, this really is most of the extra polish someone like me is looking for to take this from a "great" desktop to an "excellent" or "nearly flawless" desktop.&lt;/p&gt;
&lt;h2&gt;Virtual Keyboard&lt;/h2&gt;
&lt;p&gt;This exists! It works pretty well, as a matter of fact. However, there's definitely a reason there's a button to pull it up in the taskbar on Windows, a button that GNOME really needs. Using my XPS as an example, if it's folded into 2-in-1 mode, autorotate turns on (by default) and hitting a text field in a GTK3 app brings up the virtual keyboard. However, this isn't 100% reliable in apps using other frameworks. If you open a window that uses an old version of Tk and try to type, you'll probably need the keyboard again. GNOME can tell when the system is folded, so making this icon contextual would make a lot of sense and save a lot of headaches.&lt;/p&gt;
&lt;h2&gt;App Grid&lt;/h2&gt;
&lt;p&gt;This is one of those things that is "fine". It works as it should for basic things, and mostly isn't a big issue. The icons are huge, but many of them look nice enough I don't mind. There are three main issues with it, though.&lt;/p&gt;
&lt;h3&gt;Switching Pages&lt;/h3&gt;
&lt;p&gt;This just plain sucks. You need to complete a full swipe across the entire screen for the page to turn. I mess this up much more than I get it right, so I'm hard pressed to believe that this couldn't use some tweaking. You can tap the dots at the bottom of the page, but they're tiny and as far as I can tell they're built for a mouse. If you use a touchpad this swipe is fairly reliable, so this really seems to just be an issue with the touchscreen implementation.&lt;/p&gt;
&lt;h3&gt;Folders&lt;/h3&gt;
&lt;p&gt;Folders work just fine, but they're only really usable through touch gestures. There used to be a way to add things via the Software app (horrible name for that, while I'm on the topic), but that's gone now, as far as I can tell. If you want to use a folder, you have to drag and drop every item by hand into the folder without missing it by one tile.&lt;/p&gt;
&lt;p&gt;Furthermore, if you have a lot of apps you haven't categorized yet (for example you downloaded the "security lab" group in Fedora), you'll probably be dragging and dropping each app across multiple pages of the app grid. See the section on switching pages for why this is annoying.&lt;/p&gt;
&lt;p&gt;The easiest way I can think of on the spot to make this work better is to simply rip off the PS4's folder interface. You can create a folder and then pick what you want to put in it (which is useful for when you're just starting to sort things), or you can pick an item and tell the system to put it in a specific folder. This could look similar to the WiFi network picker, but with checkboxes rather than just a flat list.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Especially if you have a 2-in-1 laptop, or maybe even if you just have a regular laptop with a big touchpad, give GNOME another crack if it's been a while. They did what I once considered to be the impossible, and made a UI that targets tablet and desktop &lt;em&gt;both&lt;/em&gt; without making either stick out as a bad experience.&lt;/p&gt;
&lt;p&gt;GNOME is a pretty solid tablet interface, and they didn't even make a "tablet mode" to get there. You'd also never know if you didn't have a touchscreen. I think that's pretty impressive indeed.&lt;/p&gt;</content><category term="Tech"></category><category term="tablet"></category><category term="tech"></category><category term="ios"></category><category term="android"></category></entry><entry><title>What Happened to the Tablet Revolution?</title><link href="https://cannoncontraption.github.io/tabletrevo.html" rel="alternate"></link><published>2022-07-29T00:00:00-04:00</published><updated>2022-07-29T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-07-29:/tabletrevo.html</id><summary type="html">&lt;p&gt;Not that many years ago, there was a significant amount of worry from people in the PC world. There was a new, disruptive marketplace segment that threatened to wipe out the PC world entirely. The tablet takeover is all but irrelevant now, and PCs remain (in one form or another â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Not that many years ago, there was a significant amount of worry from people in the PC world. There was a new, disruptive marketplace segment that threatened to wipe out the PC world entirely. The tablet takeover is all but irrelevant now, and PCs remain (in one form or another) completely dominant for serious work in many (perhaps even most) professions.&lt;/p&gt;
&lt;h2&gt;Why Use a Tablet?&lt;/h2&gt;
&lt;p&gt;First of all, it's probably worthwhile to first discuss what problems the tablet was suppsed to solve.&lt;/p&gt;
&lt;p&gt;Tablet computing was meant (as far as I can tell) to bring about a new revolution in computing by bringing a bigger screen to the more intuitive touchscreen interfaces. I don't think it's very hard to imagine why somebody would want this. Teaching someone new to computers how to use a mouse takes time, no matter how small that amount of time is. Ths time could be better spent teaching someone concepts such as design language in user interfaces, or what types of websites to avoid. Mousing around can be quite frustrating for a beginner, but by the time tablets were taken seriously, capacitive touchscreens had improved enough that they could be used to deliver actually compelling experiences all their own. It's natural to pinch to zoom, it's like stretching fabric, and you don't generally need a hint on screen to tell you how to do it. On the other hand, I'm not sure what portion of the popultion knows about Ctrl + and Ctrl -, but I'm pretty confident it's not 100%, or even as widely known as pinch to zoom. There's a lot of human factors involved in why this is, so intuitively it makes sense to push for this type of design. That's what progress looks like.&lt;/p&gt;
&lt;p&gt;So, the smartphone revolution happened, starting with the iPhone and cascading into Windows Mobile 7, the Zune HD, Android OS, and even (briefly) Blackberry OS. There were (and are) others, but these are the major players from the early days.&lt;/p&gt;
&lt;p&gt;Given this new revolution of friendly computing you can carry in your pocket, it made sense to scale this up to something bigger. We had been reading the news on our computers for ages, but a phone screen (still) is a little too small for many people to be comfortable using it to read the Times. The result was an immediate race to make the biggest and best tablet interface. Again, this more or less kicked into full gear with Apple's solution, the iPad.&lt;/p&gt;
&lt;h2&gt;Less than Excellent, Less than Last Time&lt;/h2&gt;
&lt;p&gt;This time was a little different, though. The major players (for the most part) took a phone interface and scaled it up for a tablet. Android 3.0, iOS, and Windows 8 all took this approach. Out of these, Windows largely went back to focusing on desktop, and Android went back to investing in the phone OS. Android still has a presence, as does Windows, but they're both relegated to budget offerings, where the iPad virtually dominates the high end of the market.&lt;/p&gt;
&lt;p&gt;Basically the only one of the thre of these to keep continuing to focus on a tablet interface in any meaningful way was Apple, and it shows. Android and Windows still offer tablet features, but both of them have kept their focuses on their original markets, respectively. More accurately, Android has never kept its focus on tablets, and Windows has opted to focus on 2-in-1 PCs over tablets.&lt;/p&gt;
&lt;p&gt;This has left us with Apple, Amazon's Kindle (basically the last serious long-running Android tablet), and 2-in-1 PCs that run desktop apps. Google's Play Store will ususally give you phone apps that scale poorly to larger screens, Windws apps scale poorly to smaller screens, and the iPad is left as the only really polished experience.&lt;/p&gt;
&lt;p&gt;Far from the revolution that was the smarphone, this time around we get a scaled up version of the phones we already have, or we get a lot of upset PC users over Windows 8.&lt;/p&gt;
&lt;h2&gt;Bad Email Device?&lt;/h2&gt;
&lt;p&gt;Typing on a tablet can be awkward. I'm writing this article on a Surface RT with the included touch cover, and while vastly better than using the touchscreen to try and type, it's far from a real keyboard and I mess up a lot more than even on my worst laptop.&lt;/p&gt;
&lt;p&gt;Phones get away with this due to their size. You can comfortably use your thumbs to type on the screen and get reasonable speeds that way. I think it's fair to say that the typing speed ceiling is far higher on a full size keyboard, but that doesn't make the phone terrible at typing. Then there's desktops and laptops. Both of these have a full size keyboard that (usually) give you individual, full size keys and a plethra of hotkeys to use with them, making the experience for keyboard users actually pretty good. Even Windows 8 could be operated comfortably from the keyboard without thinking too hard about it.&lt;/p&gt;
&lt;p&gt;Tablets, on the other hand, have a screen size that makes using thumbs to type a little awkward, since the full device is much bigger and heavier than a phone, but they're often too small to put a full size keyboard on screen; even when they're big enough, they rarely even try since half of the benefit of a full size keyboard is raised keys to aid in touch typing.&lt;/p&gt;
&lt;p&gt;The best solution that I've seen is on the Surface with the type cover, but then you're basically sitting down with a laptop and a stand. That's putting aside the fact that you're getting the touch cover with the $500 base surface, which doesn't even feature an Intel CPU. That's far less of a burden if you can at least install your own apps, but Microsoft's play during this era was to offer a tablet that only allows Windows Store apps. For a similar price you could get a much more capable laptop with a touchscreen and have a better in-lap experience anyhow.&lt;/p&gt;
&lt;p&gt;So while Ballmer's infamous soundbyte about the iPhone may seem funny now, had he been talking about tablets he may have had a point.&lt;/p&gt;
&lt;h2&gt;So do they Suck?&lt;/h2&gt;
&lt;p&gt;No*&lt;/p&gt;
&lt;p&gt;Tablets were never going to take over the PC market, and it's silly to think so in hindsight. The mouse offers so much more precision, and serious business usually requires a keyboard or something similar for conversations over email.&lt;/p&gt;
&lt;p&gt;Tablets are very good for reading things online, however, as well as in-car movies and light gaming, like Solitaire.&lt;/p&gt;
&lt;p&gt;This may seem kind of obvious in hindsight, but it's why the tablet revolution never came. Even for professions that now have the iPad Pro for their work, such as graphic design, there are lots and lots of industries that never got their tablets. Nobody seems to target the engineer or software developer with a tablet. It's widely preferred in these fields to have the precision and utility of a mouse and keyboard, and tablets sre specifically designed to remove the complicated options and precise input of a mouse in favor of a more intuitive touchscreen and fewer confusing looking ports on the side of the device.&lt;/p&gt;
&lt;p&gt;I feel like I should mention that this is in fact (very slowly) changing with the iPad. You /can/ do serious work on it in video and sound production, or really any artistic field that makes use of the pen. It's become a very cool /option/, and options are good. Furthermore, this iPad seems different with its keyboard case, similar to what the Surface attempted to do so many years ago.&lt;/p&gt;
&lt;p&gt;But that's it, that's my take on why the tablet revolution never came. Now to stop typing on this stupid touch cover and go back to my model M :)&lt;/p&gt;</content><category term="Tech"></category><category term="tech"></category><category term="tablet"></category><category term="android"></category><category term="ios"></category><category term="windows8"></category></entry><entry><title>Transition to Pelican</title><link href="https://cannoncontraption.github.io/transition-to-pelican.html" rel="alternate"></link><published>2022-07-27T00:00:00-04:00</published><updated>2022-07-27T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-07-27:/transition-to-pelican.html</id><summary type="html">&lt;p&gt;In my last post in the tech blog, I talked about how blogging tech is hard, and generally whined about how I managed my site for way too long. My conclusion was that it was my own fault and I should do better. Eventually, I implemented the changes I had â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my last post in the tech blog, I talked about how blogging tech is hard, and generally whined about how I managed my site for way too long. My conclusion was that it was my own fault and I should do better. Eventually, I implemented the changes I had suggested to myself in order to get myself to post more often, and lo and behold I nearly abandoned the blog immediately after that.&lt;/p&gt;
&lt;p&gt;I personally don't believe that the tech I had made before was all that bad, it was just a lot of manual effort for a blog I'm not super invested in at the moment, and any amount of real work to maintain it felt like it was too much work. I'm here to solve that now with probably the most drastic site redesign since I left Blogger and struck out to make my own site from my own tech.&lt;/p&gt;
&lt;h1&gt;Blogging Was Hard&lt;/h1&gt;
&lt;p&gt;First, I feel like I should talk about what I was doing before that made blogging so difficult to justify. In reality I've never had any trouble expressing myself with words, and I rather enjoy writing long-form articles every now and again. There's a lot of reasons why, but mainly it boils down to the same reason many software folks keep a rubber duck on their desks, it's a way to vent and clear one's thoughts in order to better organize them. Putting a structure on things that mentally crystallize for months or years can shed light on the full scope of those thoughts, and this organization process is therefore very valuable to me.&lt;/p&gt;
&lt;p&gt;This only works when it's easy to do.&lt;/p&gt;
&lt;h2&gt;First Generation Bashworks&lt;/h2&gt;
&lt;p&gt;My first iteration of the site was Blogger. This worked, but I ended up writing most of my posts directly in HTML. There's nothing wrong with doing this, but it's tedious and kind of defeats the purpose, in a way. I also never quite got the site looking like I wanted, it always seemed unfinished.&lt;/p&gt;
&lt;h2&gt;Second Generation Bashworks&lt;/h2&gt;
&lt;p&gt;At the time I was attending university, and had written a new blogging framework with some friends as a project for the computer science club. The idea was that we'd have an intranet site on campus that members of the club could post interesting things to, possibly hosted on a raspberry pi. We toyed with posting it to the internet but nobody came up with a good way to do that on the cheap (free). In the end, we made a desktop-in-a-browser, which we had licensed &lt;a href="http://www.wtfpl.net/"&gt;WTFPL&lt;/a&gt; meaning I could do as I pleased with it. There was also some server-side stuff involved, since we wanted user logins, and a simple way for new members to post stuff without having taken our classes on web programming. All of this I discarded, since my hosting platform would be GitHub Pages.&lt;/p&gt;
&lt;p&gt;Basically, I took &lt;a href="https://gitlab.com/CannonContraption/windowtools"&gt;WindowTools&lt;/a&gt; and &lt;a href="https://gitlab.com/CannonContraption/widgettools"&gt;WidgetTools&lt;/a&gt; and made a new site with them. However, I did a pretty lazy job in this first iteration, and rather than store articles as separate pages that are loaded upon request, the whole blog was pretty much contained to a single JS file which set up the page and also stored the posts as JavaScript strings. I knew this was insanely dumb at the time even, but I didn't really care. It got me up and running.&lt;/p&gt;
&lt;p&gt;Around the time I wrote the &lt;a href="blogging-is-hard.html"&gt;Blogging is Hard&lt;/a&gt; article, I had finally gotten fed up with this. I also wanted a static site. Read the post if you want more information about that generation of this site.&lt;/p&gt;
&lt;p&gt;I had used mainly groff at the time to compose articles. This was pretty convenient compared to the JavaScript strings, but still required some hand-editing afterwards. I had a custom font I wanted to use, and the new classic site and the desktop site both required hand-coded links to hook up the articles.&lt;/p&gt;
&lt;h1&gt;Transition to Pelican&lt;/h1&gt;
&lt;p&gt;Around the same time as I moved to the second-generation blog site, a &lt;a href="https://kroche.io"&gt;friend of mine&lt;/a&gt; had just transitioned to Pelican himself. He had told me in great detail how great it was, how it made a nice static site, and how all it required to compose articles was Markdown.&lt;/p&gt;
&lt;p&gt;It wasn't until a few years later that I went into business with him and a friend of his, and the site they had created was Pelican based. I was impressed.&lt;/p&gt;
&lt;p&gt;The site coming out the other side looked as professional as most other sites in our field, and it was really quite easy to add content to. The dev server was also very helpful in making changes of any type to the site, so I eventually concluded that this was the right move for my blog.&lt;/p&gt;
&lt;p&gt;There's also the added benefit that I have an Atom feed again, something that's been missing since I moved away from Blogger since I'm a little too lazy to hand-write that.&lt;/p&gt;
&lt;h2&gt;This looks pretty plain...&lt;/h2&gt;
&lt;p&gt;Yes it does. If you don't agree with this, you're probably reading this (far?) in the future once I've gotten around to rewriting the default theme with something a little more unique. If so, enjoy! I'm sure whatever I came up with is suitably dry and boring, just like this post probably is to most people.&lt;/p&gt;
&lt;h1&gt;Desktop site?&lt;/h1&gt;
&lt;p&gt;This is going to be in limbo for a bit, I think. The desktop site is pretty formulaic, so I could transition it to a simple Pelican theme, or I could start over entirely and just integrate WindowTools as an alternate frontend. I believe Pelican is flexible enough to support this well, without losing any of the simplicity of site management that it brings.&lt;/p&gt;
&lt;p&gt;So, I've moved all of my posts over to Pelican, and pretty soon I should have the desktop back up and running, available from a link at the top of the page or something.&lt;/p&gt;</content><category term="Tech"></category><category term="blog"></category><category term="tech"></category></entry><entry><title>Blogging is Hard.</title><link href="https://cannoncontraption.github.io/blogging-is-hard.html" rel="alternate"></link><published>2019-07-31T00:00:00-04:00</published><updated>2019-07-31T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2019-07-31:/blogging-is-hard.html</id><summary type="html">&lt;h2&gt;1. No It&amp;rsquo;s Not.
&lt;a name="1. No It&amp;rsquo;s Not."&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;My title this time is a lie.
It&amp;rsquo;s a big, fat, JUICY lie. I&amp;rsquo;ve just put myself
in a position where it&amp;rsquo;s hard. No, really.&lt;/p&gt;

&lt;h2&gt;2. Cool Tech
&lt;a name="2. Cool Tech"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;The existence of this whole blog
is a testament to one thing in particular- â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. No It&amp;rsquo;s Not.
&lt;a name="1. No It&amp;rsquo;s Not."&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;My title this time is a lie.
It&amp;rsquo;s a big, fat, JUICY lie. I&amp;rsquo;ve just put myself
in a position where it&amp;rsquo;s hard. No, really.&lt;/p&gt;

&lt;h2&gt;2. Cool Tech
&lt;a name="2. Cool Tech"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;The existence of this whole blog
is a testament to one thing in particular- I really love
technology. Many people would probably go so far as to say
that I love web technology, since I used so many
up-and-coming web browser features to make such a blog.
It&amp;rsquo;s this interest in cool tech that first drew my eye
to the Computer Science Club at school. This is where our
story about blogging starts.&lt;/p&gt;

&lt;h3&gt;2.1. The Computer Science Club
&lt;a name="2.1. The Computer Science Club"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;I loved the concept of a
computer science club, and for the first semester I was a
part of it, it introduced me to many wonderful people,
exciting tech, and challenging puzzles. All this was without
the aid of a professor. The first (and really only) major
project I embarked on during my time with the club was work
on a website. We had huge goals for the site, ranging from
personal blogs for members, to scheduling tools, to small
size for easy hosting down the road. And that&amp;rsquo;s
ignoring the big killer feature for me personally. It was
going to be a desktop in a browser.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;As is probably clear by now,
this site is sort of born out of the ashes of that project.
Club leadership was only solid for the first semester I was
there, and quickly as schedules filled up people started
wandering off to internships or other random commitments. It
wasn&amp;rsquo;t really even a lack of interest in the club,
there was plenty of that. It was lack of interest in
leadership. No one wanted to figure out the logistics, the
marketing, the random member questions, the finances of a
small club and restrictions on what can be done with
university funds.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;That project had gotten really
close to being finished, too. We had a solid front-end, as
I&amp;rsquo;ve mentioned (and you can probably see) it&amp;rsquo;s a
desktop in a browser, complete with most of the hallmark
features of a desktop like stacking windows, minimization,
maximization, a taskbar, and many other things. At the time
of writing there&amp;rsquo;s no mobile site, but I&amp;rsquo;ve been
mulling over options for that for a really long time, and
when the site was still the computer science club site I had
even begun development of a drop-in replacement window
manager for mobile, since, after all, the API itself is
really not too complex. What we lacked was a backend.&lt;/p&gt;

&lt;h3&gt;2.2. Server-side CMS systems suck.
&lt;a name="2.2. Server-side CMS systems suck."&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;That last sentence was a sort of
lie. We had most of a backend. We had enough so that our
site could list a directory and pull up blog posts, using a
database to hold metadata and other random stuff of that
nature. It worked, we had example blog &amp;quot;posts&amp;quot;,
and if it were just us we probably could have left it at
that and put the site live. The problem was it was supposed
to be club wide.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;The thing about computer science
as a major is that it attracts a wide variety of people, all
at different skill levels. There are people interested in
low- level programming for robotics, embedded systems, and
other such fields. They probably wouldn&amp;rsquo;t have much
interest in learning PHP in order to insert a blog post onto
a website, nor would they probably want to do it in
JavaScript. As a general rule, we wanted to avoid making
people learn database programming, probably some Python,
maybe PHP, and of course HTML and CSS just to post about
some new tool they were playing with in their Java I course,
or to post about how they think their class (and broadly
classes on a specific topic) might be improved. That kind of
learning curve would be a huge turn-off. To add insult to
injury, not everyone associated with the club would need to
even be a CS major, they&amp;rsquo;d just have to be interested
in the topic in some way. Shutting them off with huge
technical barriers would have been a mistake.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;To be clear about all of this,
we knew we didn&amp;rsquo;t have to do most of this. The problem
wasn&amp;rsquo;t at all how to make a blogging site, it was how
to make a site that could grow with the club, and also be a
project for the club. We wanted it to be a one-stop-shop for
everything CS, and we wanted it to be set up so that no one
could just waltz in and delete everyone else&amp;rsquo;s posts
with an accidental query or mis-click. We could have used
WordPress, but that has a lot of problems. We could have
used Pellican with someone managing the merge of new posts.
That doesn&amp;rsquo;t leave much avenue for people to just post
stuff though, since there&amp;rsquo;d be a social process to
getting things posted. We all know how the stereotypical CS
student loves social processes. So we may have bit off a bit
more than we were willing to chew.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Even now, though, I&amp;rsquo;m
underselling this a bit. We had a login system, we had
randomized user IDs for sessions, we had a salted, hashed
password table, and all of this had a frontend. We just
never finished the blog composer (we got really close
though) and we never integrated any of this with any other
part. If we had decided to go ahead and bring the site live
in the state it was in, it would have been a matter of a
couple of weeks before we had it more or less working fully.
That&amp;rsquo;s weeks as a side project, not weeks of constant
development time.&lt;/p&gt;

&lt;h2&gt;3. Surviving the CS Club Site
&lt;a name="3. Surviving the CS Club Site"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;By the time two months had
passed and no development had really happened on the site,
or even sooner when I realized I was the only one to commit
in a month or two, I was already thinking ahead a bit. Many
of my friends from the old CS club are what I like to refer
to as &amp;quot;technical &lt;br&gt;
minimalists&amp;quot;. We all like software that follows the
UNIX philosophy to some extent. Tools or components that
make up a bigger project have served all of us well over the
years, and so with that we wanted to make sure that the site
we use to post all of this random chatter followed that as
well to some extent. In reality, I was the one who really
enforced this, but I think everyone at worst approved of it.
So, the design of the site wasn&amp;rsquo;t one big
interconnected set of assets and scripts and so forth, but
instead a few frontend modules tied together with some light
scripts and a backend. And while the backend was two pieces
that never got integrated with one another, this design
proved effective enough that only the site-specific
&amp;quot;glue&amp;quot; scripts needed to even know about the fact
that any of these modules were used together. This model is
still in use today, and I&amp;rsquo;m going to briefly touch on
the different parts that survive.&lt;/p&gt;

&lt;h3&gt;3.1. WindowTools
&lt;a name="3.1. WindowTools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;This is, quite frankly, the most
important piece of the entire site from a pure front-end
perspective. It&amp;rsquo;s the window manager, as the name
implies. It handles all of the movement, drawing, resizing,
and actions that can be performed on windows, and more
broadly on elements on screen. It even has a sort of
rudimentary event processor, though that&amp;rsquo;s really more
a set of queues and lists copy-pasted into the various
places they make sense for autostarting programs and letting
window contents run some JS code to handle resizing and
maximization.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;WindowTools was one of the
single most challenging pieces of web software I&amp;rsquo;ve
ever written. It is pure JavaScript. No libraries were
harmed- I mean used- in the making of this tool.&lt;/p&gt;

&lt;h3&gt;3.2. WidgetTools
&lt;a name="3.2. WidgetTools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;This is one of the less exciting
pieces. It&amp;rsquo;s a big wrapper so you don&amp;rsquo;t have to
think about the fact that you can&amp;rsquo;t really sit down
and write a web page in any reasonable amount of time in
pure JavaScript. It&amp;rsquo;s just not meant for that.
Instead, I took cues from GTK and designed a wrapper that
could do more traditional widget drawing without needing to
reinvent the wheel every time a button shows up on screen.
It can also do some &amp;quot;cooler&amp;quot; things like take a 2
dimensional array and turn it into a table, but I
didn&amp;rsquo;t end up using that very much at all.&lt;/p&gt;

&lt;h3&gt;3.3. PageTools
&lt;a name="3.3. PageTools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;I mentioned a mobile site. This
would have been the wrapper for the WindowTools API that
would make it mobile-ready. I never finished it, and frankly
it&amp;rsquo;s a mess. This isn&amp;rsquo;t helped by the fact that
I didn&amp;rsquo;t know how to write web pages for mobile at
that point in time. At all. While the tool technically is
still around, I don&amp;rsquo;t know if I even bothered
uploading it to GitLab or GitHub along with the rest of the
project.&lt;/p&gt;

&lt;h2&gt;4. There Is No Backend; Long Live the Backend
&lt;a name="4. There Is No Backend; Long Live the Backend"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;This site, as you see it right
now, contains absolutely none of the backend that we had
worked so hard to develop for the CS club site. Instead, in
the glue scripts I wrote this time, I added a JS file with a
bunch of functions. Each function would return the full text
of a post, and the blog display window simply takes that
text and sets the inside of the content window to whatever
that post function returned.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This is for a number of reasons.
First of all, the club site was designed to work in a very
similar way. The big exception here is that instead of one
big, dumb JS file, there would be an actual backend.
That&amp;rsquo;s not to say I couldn&amp;rsquo;t still do something
similar, with each page in its own HTML file that&amp;rsquo;s
dynamically loaded when you start the page, but for whatever
reason I didn&amp;rsquo;t do that. I probably eventually will,
but this time I didn&amp;rsquo;t. Also, it means that if at some
point I want to put some more immersive content in a page,
there&amp;rsquo;s nothing to stop me from simply scripting that
in place. I think I had a concept for &amp;quot;live posts&amp;quot;
that I was going to start using after the first few, but
this turned out to be a little less practical and useful
than I had originally thought.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This is actually the first place
where the actual goal of a blogging site has been realized
with these tools. I had a previous site at this same
address, but rather than hosting any content on its own, it
simply linked back to my then-active blogspot site. That
situation had much worse challenges than this one does,
mainly stemming from limitations in blogspot that make
things like inserting code somewhat more challenging, since
it very much relies on its WYSIWYG editor. This editor
injects random style into even manually entered text should
you really touch it at all. Compared to that, this is quite
similar in terms of effort required to post.&lt;/p&gt;

&lt;h2&gt;5. The Future of #/bin/bash it
&lt;a name="5. The Future of #/bin/bash it"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;This has been something
I&amp;rsquo;ve thought about for a very long time. This site is
built around a lot of older ideas from a younger me. Someone
who used (and loved) every inch of KDE. Someone who believed
in text editors like Kate and GEdit, someone who would only
sometimes venture into the world of Vim for quick tweaks to
some configuration file, and who wholly avoided Emacs for
fear of it being &amp;quot;too complicated&amp;quot;. When I wrote
this site, I very much thought of true software minimalism
such as Suckless as a hindrance more than a useful and
productive way to use a computer. Times have changed.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;That doesn&amp;rsquo;t mean this
site is going away. I feel like this sort of idea in the web
space is something that isn&amp;rsquo;t explored or used enough,
and that many different styles of sites could benefit from
using something like this. It also amuses me that my blog,
which I have in the past thought of as a way to showcase the
various side projects I&amp;rsquo;ve developed over the years is
in fact one such project itself. I am, however, considering
my options.&lt;/p&gt;

&lt;h3&gt;5.1. Challenges with the Site Now
&lt;a name="5.1. Challenges with the Site Now"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;As I mentioned a little while
ago, this whole site is fed by a big ol&amp;rsquo; JS file which
contains the full text of every post. It just returns that
text and that&amp;rsquo;s about it. This needs to change before
too long, if for no other reason than it being the Wrong
Way(tm) to do things.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;The side I left alone to some
extent is exactly how metadata is stored. I have one
function call that creates the blog window, and at the
moment for each post button in the browse window, I have
&amp;quot;hard coded&amp;quot; the metadata for each post in
literals to this function call. Needless to say, if I ever
have enough volume of posts that any form of search becomes
relevant, this isn&amp;rsquo;t a good enough way to store
metadata.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;One of the biggest comments I
get about this site is how awful it is on mobile. When I
designed the site, I had intended to come up with some
clever way to determine platform, and simply refer people to
m.whatevermydomain.is and they&amp;rsquo;d be served up the
mobile version of the site. No additional thought required.
While this would probably work well for people who know
about it, there&amp;rsquo;s not exactly any magic-bullet
software that can tell a browser if you&amp;rsquo;re actually on
mobile or not. Furthermore, even if there were, I&amp;rsquo;d
probably want to do something similar to PageTools for the
site just to keep my duplication of effort to a minimum.
There are, of course, compromises. I&amp;rsquo;ll get into some
of those in a moment.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;As icing on the cake here, I
just started a second &amp;quot;blog&amp;quot;, or more accurately
started up a second category of my blog dedicated to food.
As a user of this site, you see the separation of posts
between the tech and food sides of the site. There is no
technical separation. The very same posts.js file houses all
of the texts for the posts, and the backend names share the
same space. So, if for example I wanted to talk about
cinnamon in conjunction with baking, and also post about the
Cinnamon Desktop Environment, I&amp;rsquo;d have to come up with
different function names for each post or there&amp;rsquo;d be
conflicts preventing the site from loading.&lt;/p&gt;

&lt;h3&gt;5.2. Potential Next Steps
&lt;a name="5.2. Potential Next Steps"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;With my current computing
lifestyle, I rather enjoy things that are keyboard driven. I
put off getting any sort of decent mouse for my computer
until really quite recently, since I can do almost
everything I want to do with just the keyboard when left to
my own devices.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;With this in mind, I&amp;rsquo;ve
given serious consideration to a static site, no JS
included. This would make my job much easier, because I
already have been writing the vast majority of my writings
in groff, which exports natively to plain HTML. This would
mean I could use something like Qutebrowser to browse my own
site with a keyboard. It would also mean that with very
minor work I could get a great degree of accessibility for
mobile users virtually for free. No fancy frameworks or
media queries required. It would also mean that people using
text based browsers could read my musings. The problem here
is that I like the idea of the desktop in a browser and very
much want to keep it.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;One thing is clear, no matter
how the front end works out. I am going to ditch that stupid
posts.js file, probably sooner rather than later. It
doesn&amp;rsquo;t serve its purpose particularly well, and
it&amp;rsquo;s got a lot of single lines that are frankly too
large for many text editors to even read. For example, even
Vim gives up trying to syntax highlight after half of the
first post, and Emacs has historically gotten confused about
what line it&amp;rsquo;s on and how big the file is. To be
clear, they both can read it just fine, but it&amp;rsquo;s not
what one would consider &amp;quot;supported&amp;quot; in the way it
probably should be.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;In order to work with this,
I&amp;rsquo;m going to adopt a one-file-per-post approach.
I&amp;rsquo;ll be making a posts folder before too long, and in
it will be a bunch of html files, one for each post.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;So with that problem solved, the
biggest question in my mind is &amp;quot;to static or not to
static&amp;quot;. My current stance on things is that I should
support both. When the page is loaded, maybe it could ask if
you want a classic or modern experience, and present the
caveat that the &amp;quot;modern&amp;quot; experience basically
requires a mouse and desktop browser. If you choose
&amp;quot;classic&amp;quot;, it&amp;rsquo;ll dump you onto a landing
page with post names, and load each post as its own HTML
file. In place of the current browser on the
&amp;quot;modern&amp;quot; site will be an HTML iframe tag inside of
a window for each post you decide to read. In reality,
it&amp;rsquo;ll all go to the static site for actual post
reading, but if I decide down the road to integrate some
web-app like thing into the modern site, it won&amp;rsquo;t get
in the way of the clean, static-site CMS setup. It&amp;rsquo;ll
merely extend and enhance it.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I don&amp;rsquo;t really have a
roadmap for any of this. If you look at the dates for my
posts over the years you&amp;rsquo;ll get an idea for why. I
don&amp;rsquo;t post a lot, and it usually happens in short
bursts when I feel like writing. Maybe one day that will be
different, but for now it&amp;rsquo;s a hack, and it&amp;rsquo;s a
hack that works.&lt;/p&gt;

&lt;h2&gt;6. EDIT FROM THE FUTURE!
&lt;a name="6. EDIT FROM THE FUTURE!"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;If you&amp;rsquo;re reading this,
I&amp;rsquo;ve gone and made the switch. There&amp;rsquo;s now a
prompt that asks for &amp;rsquo;classic&amp;rsquo; or
&amp;rsquo;desktop&amp;rsquo; sites, and they very much operate on
their own. If you&amp;rsquo;re in the desktop version, however,
you&amp;rsquo;ll notice that (for now) there&amp;rsquo;s still a
button for the old, dumb JS blog windows. This is because of
one important limitation of iframes I forgot about up until
now. It was a large part of why I didn&amp;rsquo;t do this
sooner.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Try moving the window around a
bit and you&amp;rsquo;ll notice the mouse quickly outraces the
titlebar. The window will appear stuck. Just move your mouse
back to the titlebar and click and the problem will go away.
I intend to fix this at some point, probably by creating an
AJAX parser for web pages like I may have suggested
elsewhere in this post, but I don&amp;rsquo;t anticipate that
happening really quickly. This is one of those future plans
for a while down the road.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;In the mean time, the classic
site works, and while I&amp;rsquo;m still hand coding the
entries for each post, the posts themselves at least can be
virtually taken direct from Groff&amp;rsquo;s output, no need to
do any tricky JS string formatting or nonsense like
that.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I&amp;rsquo;ll probably update this
post again when I&amp;rsquo;ve implemented the change to make
smoother windows, and at that point I&amp;rsquo;ll be removing
posts.js for good- and good riddence!&lt;/p&gt;</content><category term="Tech"></category><category term="blogging"></category><category term="tech"></category><category term="desktop"></category><category term="blog"></category></entry><entry><title>Zsh Scripts are Dumb</title><link href="https://cannoncontraption.github.io/zsh-scripts-are-dumb.html" rel="alternate"></link><published>2019-07-27T00:00:00-04:00</published><updated>2019-07-27T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2019-07-27:/zsh-scripts-are-dumb.html</id><summary type="html">&lt;h2&gt;1. Background
&lt;a name="1. Background"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;As you can probably tell by the
existence of this blog, I&amp;rsquo;m what most people in the
tech world call a &amp;quot;power user&amp;quot;. I make use of all
sorts of little hacks and tricks to make my computers run
faster, and do what I want rather than â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. Background
&lt;a name="1. Background"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;As you can probably tell by the
existence of this blog, I&amp;rsquo;m what most people in the
tech world call a &amp;quot;power user&amp;quot;. I make use of all
sorts of little hacks and tricks to make my computers run
faster, and do what I want rather than what the manufacturer
wanted out of the box. I run a lot of programs that
don&amp;rsquo;t show up on a hard disk from a new Best Buy
computer, in fact there&amp;rsquo;s very little overlap.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;One of those programs is Zsh.
Even in the Linux world, Zsh is fairly obscure. It&amp;rsquo;s
got a devoted following, but many people wonder why they
would want it, or consider it too bloated for everyday use.
Many people also link this bloat to slower operation.
They&amp;rsquo;re both right and wrong, in my experience.&lt;/p&gt;

&lt;h2&gt;2. So why Zsh?
&lt;a name="2. So why Zsh?"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;I wouldn&amp;rsquo;t use it if I
didn&amp;rsquo;t love it. Zsh has a wonderful interactive
prompt, and its autocomplete is nearly instantaneous. For a
while I swore by Zsh for everything. I started writing
functions in my zshrc rather than increasing the size of my
~/bin folder, and I ported over all of my customizations to
Bash and tweaked and improved them with some of Zsh&amp;rsquo;s
more useful features.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Zsh really isn&amp;rsquo;t slow. It
might be bloated, in fact the argument could be made that
Zsh is enormous. For interactive use, however, it&amp;rsquo;s
zippy. I&amp;rsquo;ve actually ended up backing myself into a
corner on friends&amp;rsquo; machines since they all run Bash,
and I&amp;rsquo;ll try and autocomplete a package in Apt or
Pacman, only to see the prompt hang for a few minutes.
That&amp;rsquo;s not seconds, that&amp;rsquo;s minutes. I&amp;rsquo;ve
tried to make Bash expand a !!* statement, only to get a
system bell. I&amp;rsquo;ve written regex statements and wanted
to double-check them by tab-expanding them, like Zsh does,
only to be greeted with another system bell. It&amp;rsquo;s
frustrating to go back.&lt;/p&gt;

&lt;h2&gt;3. Big git = Big problems
&lt;a name="3. Big git = Big problems"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Part of my Bash setup which got
ported to Zsh was my git integration. I used that particular
feature constantly in school, and it seemed a natural fit
for my workflow. My setup for integrating git was
essentially run git status and check the return code. This
works great if you&amp;rsquo;re working in a very small
repository. Unfortunately, as soon as you jump to something
of any significant size, this becomes a huge bottleneck. My
prompt would normally show up instantly, but simply
cd&amp;rsquo;ing into too big of a repository would make it take
a second or sometimes more to even show up. This is simply
too much time to wait for a prompt. I began to
investigate.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Since this happens only in the
git code, that seemed like the logical place to start
looking. That code made three calls to git, one to see if
there&amp;rsquo;s a repository here, one to get the branch, and
one to get the number of changed files. My first instinct
was to start using files in the .git directory rather than
using git itself to get as much of this information as
possible. This has a number of important drawbacks. First of
all, it requires that there be code to traverse backwards in
the directory tree until it finds whether there&amp;rsquo;s a
.git directory anywhere higher on the tree. But, for testing
purposes, I ignored this and started poking around. I
figured out quite quickly that a simple file exists to list
the current branch. This is somewhat more efficient than
calling git branch and parsing the output to get this
information, which is what I was assuming the code did. Bear
in mind here it had been years since I had originally wrote
this particular git integration script, or really touched it
at all in any significant way. I put this into the script,
only to realize that I was using some special parameters
with git branch that effectively did the same thing anyhow-
I wasn&amp;rsquo;t just parsing the list of branches to see
which one had the asterisk next to it. On to the next
solution.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This is where I became curious
enough to start timing commands to see what the shortest
running time git command I could think of was. I
didn&amp;rsquo;t try exhaustively, and there&amp;rsquo;s probably a
command better suited to this task than what I settled on.
However, after testing git status, git branch, and a couple
other information prompts, I figured out that git branch was
the quickest one, and running it in a non-repository
directory caused it to exit non-zero. Bingo. I swapped out
the first git status with git branch, and got a real
improvement. That said, it still wasn&amp;rsquo;t quite as quick
as I&amp;rsquo;d like, so further down the rabbit hole we
go.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Next up was the remaining git
status command. When passed the -s option, it gives a brief
output, one line per changed file. Counting the number of
lines in the output of that command is a decent way of
getting this number, and it&amp;rsquo;s what I was doing. What I
wondered was whether this was really the best way in terms
of speed. To the man pages I went, only to quickly discover
the -u option. This option allows for control over untracked
files, and whether they are displayed on screen. This turns
out to somewhat significantly reduce the time git status
takes to display something.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Putting all of this together
made for a Bash prompt that while still not as instant as
without the git integration, was barely passible and
performed well enough.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I was doing all of that work in
Bash. However, when I finally managed to get Zsh running on
that particular computer, I quickly realized that its
interpreter for scripts was slow enough to undo almost all
of the speed gains I had gotten through optimizing the
prompt in Bash. Needless to say, this was not acceptable. On
to the next tweak&lt;/p&gt;

&lt;h2&gt;4. POSIX shell to the rescue
&lt;a name="4. POSIX shell to the rescue"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Recently, I&amp;rsquo;ve been
reading a lot of things about shell scripting, as well as
watching videos by various different Linux users. Notable
among those users is Luke Smith. He and I share some
interesting parallels in computing. We both use suckless
tools, like dwm, dmenu, st, and a few others. We both use
groff. We have both used Arch and i3 in the past. We both
use Void Linux at the moment, and a number of other things.
The coolest part about this in my mind is that we both got
to this point independently at more or less the exact same
time, without ever really crossing paths.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I mention this because among Mr.
Smith&amp;rsquo;s videos is one titled &amp;quot;Bash is
Bloated!&amp;quot; Intrigued, I watched it to see what he had to
say. I&amp;rsquo;m not going to recount everything he said in
the video, but one small statistic he cited stuck in my
head. He mentioned DASH, or the Debian Almquist Shell.
It&amp;rsquo;s an implementation of pure POSIX shell, with no
extensions or enhancements. It&amp;rsquo;s just a shell. This
means no autocomplete with tab (at least by default), no
process substitution using parentheses, and a variety of
other things. DASH supposedly runs scripts something like
four times faster than Bash. Since it&amp;rsquo;s supposed to be
a POSIX shell anyhow, regardless of whether it&amp;rsquo;s ASH
or DASH or anything else, I decided to start setting the
interpreter for all of my existing scripts to /bin/sh. Sure
enough, most of them worked and I had to wait a little less
time between doing a thing and seeing it done.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Of course the problem here
isn&amp;rsquo;t whether just any old script could be faster, but
whether Git integration in my prompt could be faster. I
think the answer at this point might be pretty obvious,
since Zsh is quite a lot bigger than Bash. One caveat,
however, is that I would have to take my existing inline
function in Zsh and come up with a way to make it
external.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I set out to create this magical
external script which could handle this all for me. I
started copying the different parts of the script out of my
zshrc, and plugging it into another file pointed at /bin/sh.
After briefly becoming confused as to why it was printing
-ne, only to realize -e isn&amp;rsquo;t needed for escape
sequences to work, I got it working. No trouble at all. When
I then ran my Zsh built-in and compared it against the sh
script, the result was nothing short of impressive.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Before I close out this post,
however, there&amp;rsquo;s one important technical point I
should mention about using escape sequences in prompts. This
is something that will probably confuse people at first when
they first try to do this. See, prompts are tricky. They
expect that their prompt strings be labelled such that the
shell can anticipate how many characters long it is for word
wrapping purposes. Since escape characters don&amp;rsquo;t
print, they mess up this calculation. In order to get around
this, various different shells handle this with a variety of
delimiters. For Bash, this is \[, for Zsh this is %{, other
shells will probably use other different delmiters. These
generally can be substituted with \001 and \002 in
situations where you&amp;rsquo;re dealing with output from a
script like this, but just to be safe, I broke the line
after the output from the git integration finished. This is
for a couple other reasons too, such as tiling window
managers like dwm not always giving adequate horizontal
space for really long prompts, but it&amp;rsquo;s something to
keep in mind.&lt;/p&gt;

&lt;h2&gt;5. Conclusion Time
&lt;a name="5. Conclusion Time"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Honestly speaking, if speed is
no object, Bash and Zsh both have some wonderful advantages
when it comes to the features available in a shell scripting
language. It&amp;rsquo;s entirely impossible to redirect the
output of a program to more than one other program in POSIX
shell, and Bash supports such a feature. It&amp;rsquo;s
something I&amp;rsquo;ve used myself a fair amount at this
point, and in some circumstances this warrants the speed hit
for readability and extra features. This is, after all,
shell scripting. The shell is not a programming environment,
and it was never meant to be used as one.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;With that said, however, Zsh is
a dumb idea for little shell scripts. It&amp;rsquo;s way too
slow for its benefits to really be useful in most cases, and
it can make little tweaks in any environment really slow
down your workflow.&lt;/p&gt;
&lt;hr&gt;</content><category term="Tech"></category><category term="zsh"></category><category term="scripting"></category><category term="scripts"></category><category term="shell"></category></entry><entry><title>Lisp: Recursive Glory!</title><link href="https://cannoncontraption.github.io/lisp-recursive-glory.html" rel="alternate"></link><published>2018-06-18T00:00:00-04:00</published><updated>2018-06-18T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2018-06-18:/lisp-recursive-glory.html</id><summary type="html">&lt;p&gt;Recently I've been toying a lot with the idea of doing more lisp programming to solve some of the tasks I generally would do with Python or BASH. Lisp often gets written off as old or weird, and while it is old and weird, it's certainly not past its usefulness â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I've been toying a lot with the idea of doing more lisp programming to solve some of the tasks I generally would do with Python or BASH. Lisp often gets written off as old or weird, and while it is old and weird, it's certainly not past its usefulness. Here are a few of the advantages I've seen just from messing with it the past few months:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Simplicity&lt;/h2&gt;
&lt;p&gt;Probably the most obvious advantage of a language like Lisp is that it has few core constructs. To illustrate, here is the basic syntax of any Lisp statement:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(command argument argument (command2 argument))&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
So there's a few things in this which look odd to the experienced C-esque or BASH-esque familiar. First and foremost statements are all parenthetical. The very first character is a parenthesis. While this has earned the language the nickname "Lots of Inconvenient Superfluous Parentheses" in the past, it's also its core strength.&lt;br /&gt;
&lt;br /&gt;
Lisp got its name from this very unusual syntax. The language was originally an abbreviation of "LISt Processing". Upon closer examination, it becomes clear that everything in that statement above could be considered part of a list. Indeed, this is exactly how Lisp interprets it and is a core part of its simple nature.&lt;br /&gt;
&lt;br /&gt;
So with all that said, let's try and parse what's actually happening here. Just like in mathematics, we start with the inner set of parentheses. Inside those are the words 'command2 argument'. What happens here is that the Lisp interpreter will execute the function 'command2' with the argument 'argument'.&lt;br /&gt;
&lt;br /&gt;
The only other real language structure that you would probably need to be aware of is the single quote. Here's another example:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
'("Joe" "Jill" "Jonathan" "Jacob" "Jenna")
&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
Yet again, quite simple looking. You'll notice first and foremost however, that we started with a string. If this worked like a normal list, that wouldn't work. Instead, what this is is a list of data. It is indeed possible to actually try and run this later (which is part of the power of lisp) but the single quote prevents any single element (be it a list or an atom- a single element of a list) from being evaluated. This means if you have a variable chocolate, and you wanted to pass the word chocolate to the function instead of the variable (similar to pass-by-reference if implemented correctly) you would run&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(command 'chocolate)&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
and instead of getting the value of chocolate, you would in fact get the word chocolate.&lt;br /&gt;
&lt;br /&gt;
That's it. Those are the two real main structures to keep in mind.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Recursive Glory&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-_VXOnE5jk1s/Wxq7vECyPHI/AAAAAAAAeUY/zgzIPnW-AYY-JOvBtolwSOYHb_P_GrNRgCK4BGAYYCw/s1600/Screenshot_20180608_132409.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-_VXOnE5jk1s/Wxq7vECyPHI/AAAAAAAAeUY/zgzIPnW-AYY-JOvBtolwSOYHb_P_GrNRgCK4BGAYYCw/s400/Screenshot_20180608_132409.png" /&gt;&lt;/a&gt;Part of the draw of Lisp is the simplicity I mentioned above. While this is nice from a structure perspective, Lisp is also really useful because it plays well with recursion. In fact, a well written Lisp program may never need to explicitly declare a variable. Not once. Let's take the example of summing the values 1 to n. Mathematically, you could write this as the equation you see to the left of this text (Unfortunately, I couldn't get it to format correctly inline). In lisp, this is quite simple to express:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(defun sum (n)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;(if (= n 1)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp; 1&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp; (+ n (sum (- n 1)))))&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
For the curious, the syntax to set a variable is (setq varname value) and if you want to define a global parameter, (defparameter varname value). You'll note neither is used here at all. &lt;br /&gt;
&lt;br /&gt;
So here's what's happening:&lt;br /&gt;
&lt;br /&gt;
First you hand it n. Let's say that's 3 in this case. We know, 3+2+1 = 6 so this is easy to test.&lt;br /&gt;
&lt;br /&gt;
Next, it checks to see if n is 1. If so, it just simply evaluates 1. The last thing you evaluate is the return of your function, and because of this we return 1.&lt;br /&gt;
&lt;br /&gt;
If it's not 1, it adds n to whatever (sum (- n 1)) is.&lt;br /&gt;
&lt;br /&gt;
In this case, the computer will actually end up adding things like this:&lt;br /&gt;
((1) + 2) + 3 = 6&lt;br /&gt;
I've put parentheses around each run of the function. If we were to write this in lisp's preferred syntax:&lt;br /&gt;
(+ (+ 1 2) 3) = 6&lt;br /&gt;
&lt;br /&gt;
You can see that this syntax perfectly represents our order of operations for any n calculations. For those notationally inclined who don't already know, this is commonly called prefix notation. It is also sometimes called "Polish notation" because the first person to popularly theorize its usefulness was Polish. Those who have used HP calculators will likely know about Reverse Polish Notation (RPN), or postfix, which is simply the same notation with the operator at the end.&lt;br /&gt;
&lt;br /&gt;
Let's take one more look at this function, this time in plain old C for those who know that best:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
int sum(&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    int n)&lt;br /&gt;
{&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  if(n == 1)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
    return 1;&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  return n+sum(n-1);&lt;br /&gt;
}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;&lt;/code&gt;
As you are probably aware, we really don't code C this way much at all. The more common way to do something like this is a for loop:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
int sum(&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    int n)&lt;br /&gt;
{&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  int sum = 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  for(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      int i = 1;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      i &amp;lt;= n;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      i++)&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      sum += i;&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    }&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  return sum;&lt;br /&gt;
}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
&lt;/code&gt;
&lt;br /&gt;
Which while better formatted in C than the recursive solution, and certainly more common, this solution takes a lot more code to write. It also requires the use of more structures. Furthermore, in both of these C programs we are forced to declare what we are returning. This means declaring a local variable as well.&lt;br /&gt;
&lt;br /&gt;
And one final note on the syntax here, let's imagine this code without the line breaks. It should become clear very quickly which one is easier to read and understand in this format:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(defun sum (n) (if (= n 1) 1 (+ n (sum (- n 1)))))&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;int sum(int n){if(n == 1)return 1;return n+sum(n-1);}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;int sum(int n){int sum = 0;for(int i = 1;i &amp;lt;= n;i++){sum += i;}return sum;}&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
I don't think anyone will argue this is the right way to code, but nonetheless, based on character count alone the Lisp version wins. Looking closer though, you can clearly see what the Lisp program is doing at any point along the line about as well as you might be able to with a mathematical formula. It's well compartmentalized, and all you have to see to know what executes first is where the parentheses are.&lt;br /&gt;
&lt;br /&gt;
In the C programs (especially the second one) inference of logical notation can't take you very far, in fact you have to know the syntax of C and you also have to be knowledgeable in its specific assignment-and-addition operators to read it. In the Lisp version, however, all you really need to know is that defun is define a function, and it takes the argument n, and an if statement is the conditional, what to do if true, then what to do if false. Everything else virtually explains itself.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Conclusion&lt;/h2&gt;
&lt;p&gt;In a world where programmer time is more expensive than CPU time, Lisp makes sense.&lt;br /&gt;
&lt;br /&gt;
It's clear that I like Lisp. It's a capable language, which lends itself well to reading and writing programs logically. It doesn't exactly seem easy at first, but after you understand the basic structure once, it's not a far leap to begin extending the language - in the language. Even C and C++, known for their flexibility, have to resort to a messy preprocessor syntax to really be extended in any way at all, meaningful or otherwise. Lisp allows for one program structure to rule them all.&lt;br /&gt;
&lt;br /&gt;
So here's a question that I get asked a fair amount when I start talking about Lisp:&lt;br /&gt;
'Why oh why would you ever want to use it?'&lt;br /&gt;
&lt;br /&gt;
My answer is usually,&lt;br /&gt;
'It's clean code for any purpose. You can write the language in the language; you can write really complex stuff in ten minutes, and explain it to someone who's never seen code in five.'&lt;br /&gt;
&lt;br /&gt;
While that doesn't justify things or go into detail like this post does, it usually will get someone to do one of two things:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;(or (call me crazy) (try it for themselves))&lt;/code&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="code"></category><category term="style"></category><category term="lisp"></category><category term="tech"></category></entry><entry><title>Code Style and How to Write for Reading</title><link href="https://cannoncontraption.github.io/code-style-and-how-to-write-for-reading.html" rel="alternate"></link><published>2017-09-03T00:00:00-04:00</published><updated>2017-09-03T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-09-03:/code-style-and-how-to-write-for-reading.html</id><summary type="html">&lt;p&gt;Recently I was browsing through YouTube, and it kept suggesting this video about programming mistakes, with one of those paper-cutout like CG thumbnails. My first impression was that it was one of those "let me show you how to code" videos, like so many of YouTube's suggestions to me are â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I was browsing through YouTube, and it kept suggesting this video about programming mistakes, with one of those paper-cutout like CG thumbnails. My first impression was that it was one of those "let me show you how to code" videos, like so many of YouTube's suggestions to me are. The fact of the matter is, while YouTube tried to get me to watch beginning coder videos, like normal, they cycled through my feed pretty quickly, this one stuck around for a few days.&lt;br /&gt;
&lt;br /&gt;
I don't pretend to know the algorithm YouTube uses to display this stuff, but somehow it figured I would like that video. Intrigued, I clicked it and braced myself for what would surely be someone explaining why using single letters as variable names is bad.&lt;br /&gt;
&lt;br /&gt;
That's not what it was.&lt;br /&gt;
&lt;br /&gt;
One of the odd things I like to watch there is lectures. It doesn't have to be computer science related, but I like watching people talk about something they're passionate about. Every time I learn something new about the subject which I hadn't previously even thought about.&lt;br /&gt;
&lt;br /&gt;
This video, despite it's code-school thumbnail, was one of those videos.&lt;br /&gt;
&lt;br /&gt;
Up until I watched it, I was a hard line fan of Stroustrup indentation. Functions like this one below were nice to me, I was used to them, and they were rather standard.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
int do_a_thing(int this, string that, bool the_other_thing){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(the_other_thing){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;this&amp;lt;&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;that&amp;lt;&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int i = 0; i&amp;lt;this; i++){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something_with_i(i, this, that);&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 0;&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
I'm not going to get too deep into the topics in the video, I'll link to it at the end, but my takeaway was basically a whole bunch of stuff I had figured out before, but not really internalized. Here's the shortlist:
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comments get out of date fast, often conveying wrong information (In the words of the presenter, &lt;q&gt;comments are lies waiting to happen&lt;/q&gt;)&lt;/li&gt;
&lt;li&gt;It's OK to put a line break in an argument list&lt;/li&gt;
&lt;li&gt;Variable names should be human-readable, not Java-human-readable or abbreviated to the point of meaninglessness&lt;ul&gt;
&lt;li&gt;This means no networkedAntiTheftVisualRecorder, just use securityCamera&lt;/li&gt;
&lt;li&gt;Something out of my code to this effect: menubhoverout is bad, menuButtonMouseLeave is better&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout matters, and consitent predictable layout makes for readable, debuggable, sustainable code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These aren't exactly the points that were made, but again, not trying to repeat what was in the video in its entirety here.&lt;br /&gt;
&lt;br /&gt;
This prompted me to look at my largest, and arguably most worked on free time project, the FSU CS Club site. I've discussed a little about the site in my first post, and here I'm going to show the change in code style since I watched the video.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
function movewindow(currentwindow, increasex, increasey){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//client window bounaries: get the current dimensions of a window&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; cwbounds = currentwindow.toplevel.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//screen boundaries: get the current dimensions of the screen&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; scbounds = document.body.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//new X position (from top left corner)&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; newx = cwbounds.left + increasex;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//new Y position (from top left corner)&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; newy = cwbounds.top + increasey;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//now we make sure we're not running off the screen in the horizontal direction&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(newx&amp;gt;0 &amp;amp;&amp;amp; cwbounds.right+increasex &amp;lt; scbounds.right){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.left = newx + "px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//and try to make sure we don't run off the screen in the vertical direction&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//though the code for the bottom doesn't work right, not sure why.&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(newy&amp;gt;0 &amp;amp;&amp;amp; cwbounds.bottom + increasey &amp;lt; scbounds.bottom){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.top = newy + "px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
}
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;Note that most of these comments are obvious, and a number of them would be with better variable names. Also note that the code is largely horizontal, and can make for some long lines.&lt;br /&gt;
&lt;br /&gt;
Now the new code:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
&lt;b&gt;function&lt;/b&gt;&amp;nbsp;movewindow(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasex,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasey)&lt;br /&gt;
{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;currentWindowBounds&amp;nbsp;=&amp;nbsp;currentwindow.toplevel.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;screenBounds&amp;nbsp;=&amp;nbsp;document.body.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;newx&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.left&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasex;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;newy&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.top&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasey;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newx&amp;gt;0&amp;nbsp;&amp;amp;&amp;amp;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.right&amp;nbsp;+&amp;nbsp;increasex&amp;nbsp;&amp;lt;&amp;nbsp;screenBounds.right)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.left&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newx&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newy&amp;gt;0&amp;nbsp;&amp;amp;&amp;amp;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.bottom&amp;nbsp;+&amp;nbsp;increasey&amp;nbsp;&amp;lt;&amp;nbsp;screenBounds.bottom)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.top&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newy&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
}&lt;br /&gt;

&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;When trying to debug the second version of this otherwise identical code, it's much easier to find specific variables, troubleshoot problems, and even understand to an extent. Also note that as parts of this program expand, the general format is not broken, and horizontal scrolling is not an issue. Switching to this style virtually eliminated &amp;gt;80 character lines, making it readable alongside not one more document, but two more on my 1080p monitor. With the old style, some functions would become unreadable if they didn't have at least 2/3 of the screen to display their enormous lines on.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
And this comes to the final part of this post: why any of this matters.&lt;br /&gt;
&lt;br /&gt;
I've seen a lot of lectures where someone will recommend something only for it to turn out to not be very useful. There are plenty of people who use some K&amp;amp;R derived indentation scheme like I was, and to good effect, it's a solid style. This time, however, the change in something as trivial as style has made the code arguably neater and easier to not only read, but expand upon down the line without breaking the readability of the code.&lt;br /&gt;
&lt;br /&gt;
I've been using GNU Emacs for my coding of late, and I do want to mention that it makes all of this really easy. A lot of my code had bad indentation, or hadn't been changed when a new level of code was inserted above another existing level, and it made for some trouble. When formatting all of this, if a mistake crops up, Emacs is intelligent enough that simply selecting the region where things went wrong and typing &lt;code&gt;C-M-\&lt;/code&gt; will solve indentation problems, and even go so far as to place the braces on the correct indentation level to separate code from parameter lists properly. Emacs will also let you align arguments to a function right at the end of the function name, where the list would run horizontally otherwise in Stroustrup style.&lt;br /&gt;
&lt;br /&gt;
Here's the original code sample in the new format:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
int&amp;nbsp;do_a_thing(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;this,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;that,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool&amp;nbsp;the_other_thing)&lt;br /&gt;
{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(the_other_thing)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;this&amp;amp;lt&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;that&amp;lt;&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;countsUpToThis&amp;nbsp;=&amp;nbsp;0;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countsUpToThis&amp;lt;this;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countsUpToThis++)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something_with_i(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countsUpToThis,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that);&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0;&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;Much neater, right?&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://youtu.be/ytJnSttKL6A"&gt;Original lecture video (Edit: Appears to be broken?)&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="code"></category><category term="style"></category><category term="programming"></category></entry><entry><title>ANSI Color Block Graphics</title><link href="https://cannoncontraption.github.io/ansi-color-block-graphics.html" rel="alternate"></link><published>2017-06-22T00:00:00-04:00</published><updated>2017-06-22T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-06-22:/ansi-color-block-graphics.html</id><summary type="html">&lt;p&gt;Before reading, please note that anything surrounded by 'm/ and /' is to be interpreted as regex. If you are not familiar with regex, or REGular EXpressions, please&amp;nbsp; visit &lt;a href="https://www.codeproject.com/Articles/939/An-Introduction-to-Regular-Expressions"&gt;this CodeProject page&lt;/a&gt;. If you know a little, but don't know the syntax I'm using, visit &lt;a href="http://perldoc.perl.org/perlre.html"&gt;the PerlDoc page for regex&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
Introduction â€¦&lt;/h3&gt;</summary><content type="html">&lt;p&gt;Before reading, please note that anything surrounded by 'm/ and /' is to be interpreted as regex. If you are not familiar with regex, or REGular EXpressions, please&amp;nbsp; visit &lt;a href="https://www.codeproject.com/Articles/939/An-Introduction-to-Regular-Expressions"&gt;this CodeProject page&lt;/a&gt;. If you know a little, but don't know the syntax I'm using, visit &lt;a href="http://perldoc.perl.org/perlre.html"&gt;the PerlDoc page for regex&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
Introduction&lt;/h3&gt;
&lt;p&gt;For those who know how the world of sh and POSIX-like systems works, the idea of using escapes to color text is probably a very familiar one. Using that to create graphics, however, may not be so familiar.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
The ANSI Escape(s) &lt;/h3&gt;
&lt;p&gt;In my post on how to make BASH prompt you with return and git information, I used the 'm/\033[7;#m/' sequence to turn the background various colors. This works for the most part, but it caused problems during my testing when trying to overlay text. Because of this, I started using a slightly different set of color codes. In the case of text colors, the 'm/\033[3#m/' sequence is how the color is set. In this case the 'm/3#/' portion of that sequence is important. Numbers in the 30's from 30-37 indicate colors. This is what is called "foreground colors".&lt;br /&gt;
&lt;br /&gt;
To use foreground colors to color a background, one needs only change our 'm/\033[3#m/' pattern to 'm/\033[7;3#m/', adding a 7; before the color code. What this does is it enables a "reverse video" mode. This means that colors are kept at regular intensity (so no 1; prefix, we have a 7; there) and foreground colors populate the background and vice-versa.&lt;br /&gt;
&lt;br /&gt;
The other method of coloring the background is to change the color sequence entirely. Where in the last example, the color codes have all been 'm/3#/', if we swap this pattern for 'm/4#/' where the number in question is the same set of values as the 'm/3#/' pattern, we end up with background colors changing. This has the benefit of allowing the terminal emulator to judge which colors are appropriate for the foreground without setting them, so if you have a black background terminal and set a black character, the text on top will still be visible. If the reverse-video modifier is used, the text takes the background color and therefore is invisible.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
Escaping the Graphics&lt;/h3&gt;
&lt;p&gt;So far what I've been talking about has been about color escape sequences, and that's nothing new here. Where things get interesting is when you apply these sequences to try and make graphics.&lt;br /&gt;
&lt;br /&gt;
I have been working on a small text adventure game. It has been acting as a passtime and a time waster at that, and it may not even ever be finished. However, I didn't want to include any graphics libraries of any sort during the creation of the game. This means that, since I'm using my language of choice, C++, there is no sort of imagery whatsoever without color escapes or something similar. Here is where the interesting bits are.&lt;br /&gt;
&lt;br /&gt;
If you assume that wherever the program will be run, it will be run in a POSIX-like environment such as Linux (the only OS any of my desktops or laptops run), MacOS, or Cygwin, you can assume that these escapes will work. In order to make imagery and make the game more interesting, all one needs do is set the color escapes, and type a space for each character they want that color. For example, if I wanted to print a small French flag, I could do so with the following code:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n&lt;br /&gt;
\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n&lt;br /&gt;
\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n&lt;br /&gt;
&lt;/code&gt;&lt;br /&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
All that I would need to do from here to put this in my program is remove the line breaks (which I added to illustrate the pattern) and then paste this sequence into a cout&amp;lt;&amp;lt; line. The result would look something like this:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
#include&lt;iostream&gt;&lt;br /&gt;
int main(){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;std::cout&amp;lt;&amp;lt;"\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;return 0;&lt;br /&gt;
}
&lt;/iostream&gt;&lt;/code&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
While this looks ugly from a programmer's perspective, and probably would be much cleaner (not to mention better code) if instead of one cout I had used three, one per line, and instead of using \n to break the line I had used endl, but for the sake of my own sanity, doing that over twenty or more lines seemed impractical, and so I used the method I have so far illustrated.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
How to Save your Sanity in the Process&lt;/h3&gt;
&lt;p&gt;That aside, coding large graphics in this way is tedious. When the end goal is to create a complicated image or graphic show up on screen, inputting escapes by hand gets old fast.&lt;br /&gt;
&lt;br /&gt;
In my case, after less than ten seconds of thought, I got to work developing a small Python script which would replace individual characters with colored spaces. My first design was to simply make something that would replace a single character (g for green, for example) with the appropriate escape code and a space. Immediately, I knew this was the wrong approach. Assuming that the same color is repeated more than once, the characters required to reissue the escape for every repeated space would be massive, and pasting large amounts of program output into a document can sometimes cause issues with text editors which cannot handle long lines. While this was a design issue with the easiest solution, I knew of a better way.&lt;br /&gt;
&lt;br /&gt;
My second and final design checks for repeated characters by storing whatever the last used color escape was, and only outputting a new one if the current and previous escapes did not match. This means that if I were to input a line of black characters, it would issue the black color, fill the line with spaces, and move on until it hits a different color.&lt;br /&gt;
&lt;br /&gt;
Here is a pattern I am using in the game I mentioned:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
rrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllllllllllllllllllbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrlllmmrrrrmmmmllllllllllllllllllllbbbbbbbbbbbbrrrrmmmmrrrrmlllrrrrmmmm&lt;br /&gt;
mmmmrrrrlywwwwllmmmmrrrrlllllllllllllllllllbbbbbbbbbbbbbmmmmrrrrmmlywwwwllmmrrrr&lt;br /&gt;
rrrrmmmlywwwwwwllrrrmmmmllllllllllllllllllbbbbbbbbbbbbbbrrrrmmmmrlywwwwwwllrmmmm&lt;br /&gt;
mmmmrrrlywwwwwwllmmmrrrrlllllllllllllllllbbbbbbbbbbbbbbbmmmmrrrrmlywwwwwwllmrrrr&lt;br /&gt;
rrrrmmmllllllllllrrrmmmmllllllllllllllllbbbbbbbbbbbbbbbbrrrrmmmmrllllllllllrmmmm&lt;br /&gt;
mmmmrrrlywwwwwwllmmmrrrrlllllllllllllllbbbbbbbbbbbbbbbbbmmmmrrrrmlywwwwwwllmrrrr&lt;br /&gt;
rrrrmmmmlywwwwllrrrrmmmmllllllllllllllbbbbbbbbbbbbbbbbbbrrrrmmmmrrlywwwwllrrmmmm&lt;br /&gt;
mmmmrrrrmlywwllrmmmmrrrrlllllllllllllbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmlywwllmmmrrrr&lt;br /&gt;
rrrrmmmmrrlyllmmrrrrmmmmllllllllllllbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrlyllrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmllrrrmmmmrrrrlllllllllllbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrllrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllllllllbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllllllbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllllllbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllllbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllllbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllbbbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
Even in pattern form, it is clear that there are distinct patterns in the text. In order to turn this into escape sequences, I used the following Python script:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
#!/usr/bin/env python3&lt;br /&gt;
&lt;br /&gt;
import sys;&lt;br /&gt;
"""&lt;br /&gt;
l = black char(30)&lt;br /&gt;
r = red char (31)&lt;br /&gt;
g = green char (32)&lt;br /&gt;
y = yello char (33)&lt;br /&gt;
b = blue char (34)&lt;br /&gt;
m = magenta char (35)&lt;br /&gt;
c = cyan char (36)&lt;br /&gt;
w = white char (37)&lt;br /&gt;
"""&lt;br /&gt;
filename = open(sys.argv[1], "r");&lt;br /&gt;
lastcode = 30;&lt;br /&gt;
code = 30;&lt;br /&gt;
for line in filename:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;for cchar in line:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lastcode = code;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if cchar == '\n':&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sys.stdout.write("\\n");&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'l': code = 40;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'r': code = 41;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'g': code = 42;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'y': code = 43;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'b': code = 44;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'm': code = 45;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'c': code = 46;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'w': code = 47;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if code == lastcode:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sys.stdout.write(" ");&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sys.stdout.write("\\033["+str(code)+"m ");&lt;br /&gt;
sys.stdout.write("\\033[m\n");&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
This then prints to stdout (the terminal) the exact string I should paste into my program in order to show the graphic I patterned above.&lt;br /&gt;
&lt;br /&gt;
Let's say I wanted to test this first, just to see what it would look like in color. If we name the above color map doorway.cmap, we can run a single line in Bash to print it to the screen:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
echo -ne "`./colormap.py doorway.cmap`"
&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
This is the result of that image map:&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-YFQ3zjuYkq8/WUvjtlO2NAI/AAAAAAAAXKU/UFvrYn-xj2oYDxM_bKGQS6PmerMSKDkyACLcBGAs/s1600/Screenshot%2Bfrom%2B2017-06-22%2B11-35-01.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="442" data-original-width="654" height="432" src="https://1.bp.blogspot.com/-YFQ3zjuYkq8/WUvjtlO2NAI/AAAAAAAAXKU/UFvrYn-xj2oYDxM_bKGQS6PmerMSKDkyACLcBGAs/s640/Screenshot%2Bfrom%2B2017-06-22%2B11-35-01.png" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;The resulting cmap, as printed by echo on an 80x25 character terminal&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;The result is color graphics. Escape sequences can't do a full color palette, having only seven choices including black and white, and my monospace font doesn't have half-height characters to split widths and heights to gain more resolution. So, given that background colors and spaces are the only tools used, images like this are possible using this procedure.&lt;br /&gt;
&lt;br /&gt;
In the end, the result is a graphics-enriched text based game, for which I can generate graphics easily from a text editor. My first few images I first drew in a small Gimp canvas, but before too long I realized that it was almost as quick to forego gimp entirely, and since Gimp can't zoom in one dimension and not the other, the resulting images there always looked half the height of the actual end product.&lt;br /&gt;
&lt;br /&gt;
And that's how you make color graphics using ANSI escape sequences and spaces.&lt;/p&gt;</content><category term="Tech"></category><category term="color"></category><category term="ansi"></category><category term="tech"></category></entry><entry><title>Web Programming a Desktop with Javascript</title><link href="https://cannoncontraption.github.io/web-programming-a-desktop-with-javascript.html" rel="alternate"></link><published>2017-02-25T00:00:00-05:00</published><updated>2017-02-25T00:00:00-05:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-02-25:/web-programming-a-desktop-with-javascript.html</id><summary type="html">&lt;p&gt;One of the things which most people in web programming have to deal with is the problem of interactive content. The oldest methods for solving this were through the use of Java applets, and Flash content. There are other ways to accomplish this too, with software such as QuickTime, Real â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the things which most people in web programming have to deal with is the problem of interactive content. The oldest methods for solving this were through the use of Java applets, and Flash content. There are other ways to accomplish this too, with software such as QuickTime, Real Player, VLC Media Player, and many more. In today's world, however, the use of most of these is an out-of-date concept. Most modern web applications are written using the features of HTML5, which fills the need to have built in media support, JavaScript, which fills the space of dynamic content handling, CSS, which handles layout and style separate from HTML, allowing for modular, even animated styling support, and AJAX, which is a small subset of JavaScript which is useful for fetching and sending data without reloading a page, filling the need for single-page dynamically loaded content.&lt;/p&gt;
&lt;h2&gt;Why I care&lt;/h2&gt;
&lt;p&gt;
Last October, I joined the Framingham State Computer Science Club. It is a decision which I am very glad I made, for one simple reason. I was sitting at a table with three excellent individuals, and we decided we should make a website for the club. This is where my JS adventure began.
&lt;/p&gt;
&lt;p&gt;
Our first several drafts of what the site should be generally boiled down to conveying information to club members on meeting times, discussion topics, and other useful information. It was always meant to be something which would be useful first and foremost to club members, and a point of interest for those who might join. Eventually, we settled on the idea of making the entire site work like a large blog site, where members of the club can post interesting posts of the same nature as this blog. After running through several interface ideas, the one that stuck the best is writing a desktop-paradigm interface in a browser, using the new technologies I mentioned in the introduction.
&lt;/p&gt;
&lt;h2&gt;Assembling the Tools&lt;/h2&gt;
&lt;p&gt;
One of my first instincts when writing an interface of this sort is to take an objective look at exactly what needs to be done. My first thoughts in these matters were that we needed to work first on which toolkit we would use. I looked at JQuery first, because I had used it for some projects before. The first thing that hit me was version 3 in fact tried hardest to be compatible with Internet Explorer, and had a note about compatibility with more modern browsers at something along the lines of latest -1 version. This was not acceptable at all to me, because none of the people I know who would be using this site would be using IE. While it was likely that the features would work on many older browsers, JQuery didn't seem to actually add much value to a project like this, and was a relatively large JavaScript library, so I quickly moved away from that.
&lt;/p&gt;
&lt;p&gt;
I mentioned in my last post a &lt;a href=http://kroche.io&gt;friend of mine&lt;/a&gt;, whom I actually met because of this project. He directed me to another person's personal site, that of &lt;a href=http://samy.pl&gt;Samy Kamkar&lt;/a&gt;, and mentioned that he had used extjs. Upon closer examination, I found that he had used some clever tricks to stop the casual observer from finding his source code, labeling it as a challenge for those who really want to learn web. While I respect this, I would generally prefer to go into a project with a new library with an example, and this site wasn't going to make that easy.
&lt;/p&gt;
&lt;p&gt;
This brought me to the conclusion that I really should just learn enough JavaScript to implement this without any third-party libraries. That way, the code will run quicker, smoother, and without extra overhead from functions and programming I would not be using. As to that last point, the library is not any smaller than what it would probably be with someone else's library simply because I added so many comments to the code in order to facilitate its repurposing and reuse. Unlike Samy Kamkar, I would like it to be easy for some casual onlooker to fire up the CS club page and see how it works.
&lt;/p&gt;
&lt;h2&gt;Window Management in a Browser&lt;/h2&gt;
&lt;p&gt;
The first challenge I had to face was how exactly I would get windows to exist in an HTML space. It was clear that it was possible, &lt;a href=http://samy.pl&gt;others had done it before&lt;/a&gt;. I had already assembled a taskbar and rudimentary start menu, those were simple. All that took was knowledge of CSS3 transitions and the z-index property. After much thought on the matter, I started investigating how JavaScript handles mouse positioning. I found that it deals in coordinates relative to the top left corner of the page, much like most graphics libraries and engines. This made it simple. All I had to do was record where I clicked the mouse down, where I released the mouse button, and then take the difference of the two in order to figure out how much to move the window. My first prototype window toolkit used this method. The biggest problem with this was that I couldn't see where I was moving the window to while I was doing it. I could see where I started, and where the window ended up, but no in-between.
&lt;/p&gt;
&lt;p&gt;
After much tweaking, I found that the best way to handle the issue of window placement while moving was to actually make the browser update the window on the onMouseMove event. This would mean that every time the browser registered the mouse moving, there would be some JavaScript code to execute. My first thought was that this would make the entire interface unbelievably slow, but that expectation has largely been overshadowed by the fact that I have tried this on several computers, including a Dell Inspiron 6000 from 2003, and none of them have had a problem with it so far. As it turns out mouse position polling does not take that much work to accomplish. After hacking away at it for a little while, I managed to get a system which would detect when the user was dragging the window, and update automatically to reflect this. Window management was mostly done after that, as it was a simple matter to implement the JavaScript code to add and remove HTML elements with no ID and simply track them through JavaScript. This proved to be a stable and surprisingly quick solution which is still in use now.
&lt;/p&gt;
&lt;h2&gt;Window Components and Layout&lt;/h2&gt;
&lt;p&gt;
Another challenge I faced early on, perhaps even earlier than getting windows to move, was how to lay out a window so it has the same components that everyone and their uncle recognize from using Windows. The main components that I would need to add were:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Titlebar&lt;/li&gt;
&lt;li&gt;Window title text&lt;/li&gt;
&lt;li&gt;Window content area&lt;/li&gt;
&lt;li&gt;Close button&lt;/li&gt;
&lt;li&gt;(Time permitting) Minimize and Maximize buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I decided to stick to just implementing the close button at first, as the window manager would need to mature significantly before I could start working on the other parts.
&lt;/p&gt;
&lt;p&gt;
The first design I had in mind was a master toplevel div, which would float in a &lt;code&gt;position:absolute;&lt;/code&gt; style and be the thing which would hold all of the components of the window. Each component would sit in this toplevel div, and would actually be what showed content. The toplevel itself would provide a border around the whole window.
&lt;/p&gt;
&lt;p&gt;
That didn't work out quite like that. One of the oddities about HTML is how div elements work. You can nest div elements inside each other without trouble, but things become tricky as soon as you want one div to start before a nested div and end after it in vertical space. It simply doesn't work this way. What I ended up doing was I defined the height of the toplevel div to be about 22 pixels or so (I can't recall the exact value, but the code is public so the interested reader can &lt;a href="https://github.com/push-eax/fsu-csclub-site/blob/master/windowTools/windowTools.css"&gt;look it up&lt;/a&gt;), and then nesting all the child elements inside that div like I had intended. The toplevel served as the background for the titlebar, and I simply made the window content area show up white. Window buttons would show up on the right-hand side like in Windows and KDE (the desktop I use almost everywhere), and the title text would be centered in the window. The only parameter that would need to be specified when creating a window in terms of dimensions would be how wide the window should be, that way it can expand in height dynamically to fit the content and I don't have to worry about making the arithmetic work right even if fonts change depending on the browser and operating system. Being a Linux user, I care about this stuff as many of my friends and fellow classmates use a completely different font set than I even have access to. The only step after determining all this was to actually connect signals and make the window react predictably. Since this was a simple matter, and the details of how I did it are in the code itself, I will leave that out of this post.
&lt;/p&gt;
&lt;h2&gt;Determining How to Make Content in a Window&lt;/h2&gt;
&lt;p&gt;
Another interesting challenge was how I should then make the window available to end-developers to use. At the time I had (perhaps wisely) decided I wanted the windowing code to be a discrete component which could later be taken out of context and used in a different site, and I didn't want the task of actually populating windows to be too much of a task.
&lt;/p&gt;
&lt;p&gt;
My first solution was to simply add a section where someone could take flat HTML code and then insert it straight into the window as if it were another page. This was a neat idea, and very good for testing windows, but it raised on serious concern for me: there would be no easy way to ensure consistency of interface across all windows in the same site without some serious talk between members of the project about how to class each element so it matched up with the master stylesheets.
&lt;/p&gt;
&lt;p&gt;
The solution I finally settled on was to keep the option to insert custom code into a window as a way of populating it, but also to add the option to add a single element to a window. This was the dawn of the widgetTools toolkit, which was created as another discrete component to compliment the site and yet still be portable to places outside of the website project.
&lt;/p&gt;
&lt;h2&gt;Drawing Inspiration from GTK+&lt;/h2&gt;
&lt;p&gt;
A large part of how widgetTools works is drawn from my prior experience working with GTK+3 in Python, C, and C++. GTK+ is a wonderfully useful and complete widget toolkit which delivers on the promise of consistent look and feel across applications on a single platform. Unlike competing technology in Java, most notably Swing, it manages to look and feel right in a Linux environment, and in Windows both. I have seen screenshots of it also fitting in almost exactly like Apple's own toolkit in macOS, but I do not own a mac and so I can't corroborate this. The Achilles' Heel of this toolkit is complexity. In order to do some relatively simple things in GTK+, you need to have some knowledge of the data structures and functions that it uses in order to generate the content on the user's screen. While this is all really well documented, and easy to learn if you have the time to figure it out, it is quite complex. Further, while GTK+ has a web backend, it is not built to work like a website, instead it is built to work more like another form of remote desktop, allowing single-application access over a LAN or internet connection. While it does implement window management too, the simple fact of the matter is it wouldn't work for a situation like this because of its single-instance nature.
&lt;/p&gt;
&lt;p&gt;
That being said, I did quite enjoy working with GTK+, and it showed me a lot about what GUI development is and why so many people find it difficult. Some of the things they use in GTK+ are out of date, or workarounds for old problems since solved, but for the most part there is a valid reason for everything they do in that toolkit, which is something I wanted to do myself with mine. So that was what I decided I would do. I had already largely been working with JavaScript in order to write windowTools, so I continued using a similar model for widgetTools. First and foremost, windowTools was written in such a way that it could insert a single HTML DOM object into a window, as a sort of toplevel widget space. For that purpose, I created a simple function to create an empty div in widgetTools called the widget space. The first step in using widgetTools would be to create such an element and set it as the toplevel for the window.
&lt;/p&gt;
&lt;h2&gt;Less Complicated Widget Layout&lt;/h2&gt;
&lt;p&gt;
One thing that I really like about GTK+ is that it covers almost every case. In the case of widgetTools, however, I can't do that so much. A lot of that comes from the fact that HTML has a limited set of primitives to choose from when it comes to creating new UI elements. It is enough to do some really impressive stuff, as anyone who has used Google in recent years can tell you, but it is still not quite as much freedom as the developers of GTK+ had. Nor does it require quite so much work to get a foundation laid. This meant that I could both relax a little because some elements were ready-made for me, but it also meant that I would likely end up doing nothing but wrapping existing elements into JavaScript, which could turn dull quickly.
&lt;/p&gt;
&lt;p&gt;
The main idea behind the widgetTools setup is that in order to place an element, you need only tell the toolkit what its parent should be. This means that in order to get a horizontal split in a single window the developer would have to use a table or something similar, but it also means that if the window did not require fancy layouts like that it could be developed quite quickly without worrying about placement. While I think Gtk_Grid is a nice solution to the problem of layout, it is overkill to the nth degree here, and so it would not be useful. This means that the syntax for creating and positioning a window element could simply be &lt;code&gt;makeButton(widgetSpace, "button", "this is a test button");&lt;/code&gt;.  That line, if run in widgetTools, would create a standard button (hence the "button" argument) which would automatically be placed in the toplevel widgetSpace below any existing elements (or beside them if there's no block element and the window is wide enough). This system returns the HTML DOM element as a JS object for each item it creates. If, for example, we wanted to put the button in a table data (td), all we would need to do is change the widgetSpace argument to some other object we have created. Assuming our table data is named tdtest, that would make the code to insert a button there &lt;code&gt;makeButton(tdtest, "button", "this is a test button");&lt;/code&gt;. This means that in order to determine layout, all you need know is where you wish to place the element, and the browser's existing layout engine can take care of the rest.
&lt;/p&gt;
&lt;p&gt;
What we end up after this is actually relatively powerful:&lt;div class="separator" style="clear: both; text-align: center; width:550px; overflow:hidden;"&gt;&lt;a href="https://1.bp.blogspot.com/-5fJLo13DD9o/WLIDbndceDI/AAAAAAAAWTM/OYnDFKPcUgoPZ8s4C_jCwrds4oByZ2REQCPcB/s1600/widgetToolkit.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em; width:500px; overflow:hidden;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-5fJLo13DD9o/WLIDbndceDI/AAAAAAAAWTM/OYnDFKPcUgoPZ8s4C_jCwrds4oByZ2REQCPcB/s1600/widgetToolkit.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Minimization, Window Resizing&lt;/h2&gt;
&lt;p&gt;
If I were to write this post in order of how I actually wrote the code, resizing the window would have come into play around the same time as the widget toolkit, but I feel like resize and minimize work closely with each other, so I decided to put them in the same section. Both were at least started after the widget toolkit, although resize was done well before much was done at all in the widget toolkit. For details on how it was put together, reading the commit list on &lt;a href="https://github.com/push-eax/fsu-csclub-site"&gt;the GitHub repository&lt;/a&gt; is where you should go. It is incredibly detailed, so if you're not up for a real commit swim, it may be worth skipping that and just taking my word for it.
&lt;/p&gt;
&lt;h3&gt;Resize&lt;/h3&gt;
&lt;p&gt;
In order to fix the problem of window resizing, I approached the problem from the same angle as moving the window. Take the dimensions of the window when you click the grab handle, then poll the mouse to see where it moves and change the window accordingly. This stops when the user lifts the button. The issue with this was that instead of moving X and Y coordinates alone, I was dealing with adding properties for height so that the user could resize in both directions. This turned out to be less of a problem. When I started working with the idea of resizing based on move commands, I did not know that JavaScript does not take all of the window dimensions into account. It takes the inner dimensions of the window, and the outer dimensions to a point. The trick was not only resizing the toplevel's width, but the height of the content div. Since the dimensions don't quite match between these because I initially wanted a window border, only to settle for the titlebar being a little wider than the window. After a lot of work, I found that if I take the inner dimensions of the window and then only deal with those, the outer dimensions follow suit. All I had to do was modify the style properties for width and height based on my knowledge of how the box model is handled and a little black magic with known pixel count values to make resize work properly, and not exponetially expand into infinity like before I had figured out the missing properties.
&lt;/p&gt;
&lt;h3&gt;Minimize&lt;/h3&gt;
&lt;p&gt;
Like I said, minimize and resize are similar. The first problem I had to solve was adding window buttons to the taskbar, but doing that (and even tracking their location) was quite easy. The real trick was figuring out how to hide the windows themselves. In the end, I decided to add some global variables to represent the position of the window at the start of minimization, and then just change its width to match the taskbar button, and set its X and Y coordinates to match the top corner of the button.
&lt;/p&gt;
&lt;p&gt;This was the right decision to make in the end largely because it made animating the minimization process really easy. All I had to do there is keep track of how long I wanted the animation to run, and then use that to set CSS transitions so that it would smoothly move from its original location to its spot in the taskbar. Since I had found out during the time when I was writing the move facilities that transitions mess with window moving, I had to make the transitions reset to 0s for all transition properties, but considering what it took to make other functions work, this was a simple enough task.
&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
Making windowing in a browser was a fun project which, in the end, turned out to include some useful components which can simply be placed in other projects to use for basically any purpose. Anyone can view the current CS Club site on GitHub, &lt;a href="https://github.com/push-eax/fsu-csclub-site"&gt;simply follow this link and you're there!&lt;/a&gt;
&lt;/p&gt;</content><category term="Tech"></category><category term="web"></category><category term="desktop"></category><category term="javascript"></category><category term="tech"></category></entry><entry><title>Making Bash Prompt you with Information</title><link href="https://cannoncontraption.github.io/making-bash-prompt-you-with-information.html" rel="alternate"></link><published>2017-02-20T00:00:00-05:00</published><updated>2017-02-20T00:00:00-05:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-02-20:/making-bash-prompt-you-with-information.html</id><summary type="html">&lt;p&gt;In the world of Linux and Unix, one of the most powerful tools available is the command line. Those of us who are lucky enough to have Bash at our disposal will probably know of many of its varied powers and features. These include the ability to modify and rerun â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the world of Linux and Unix, one of the most powerful tools available is the command line. Those of us who are lucky enough to have Bash at our disposal will probably know of many of its varied powers and features. These include the ability to modify and rerun commands in history without retyping or scrolling through text, running simple logic and recursion from within the prompt, and setting custom prompts to display more information than is initially readily available.&lt;br /&gt;
&lt;br /&gt;
It is the last point of these that I want to touch on today.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Introduction to Bash's PS1 variable&lt;/h2&gt;
&lt;p&gt;If you are familiar with how bash handles PS1 strings and colors, skip ahead to the section about dynamic prompts. &lt;br /&gt;
&lt;br /&gt;
In the past year, I have started exploring the power in how Bash handles the PS1 environment variable. For those of you in the know, PS1 is the string variable responsible for deciding what the prompt will contain. A very basic one may just be &lt;code&gt;PS1='\$ '&lt;/code&gt;, which will simply display a dollar sign and a space to signify the prompt is ready for input. A more common arrangement would display the user, the hostname, the working path, and then the dollar sign. This is often represented by the following PS1 string (or something similar): &lt;code&gt;PS1=\u@\h: \w\$ '&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
This is still really quite a simple prompt, and for those who are familiar with bash it probably doesn't take very much effort to parse. Where things get interesting is when colors are added. Ubuntu, for example, uses green for the &lt;code&gt;\u@\h&lt;/code&gt;, making it something similar to &lt;code&gt;PS1='[\033[1;32m]\u@\h[\033[m]: [\033[1;34m]\w \$[\033[m] '&lt;/code&gt;. Notice that aside from what we had before, we have sections encapsulated in &lt;code&gt;[ ]&lt;/code&gt;. These essentially tell bash that we are no longer outputting printing characters. This helps it align text when a line of input is longer than a single line long. It can figure out where the line break should be, and place it appropriately. Without these delimiters, sometimes instead of getting a new line, overflowed lines will react like \r on its own, or cause other interesting and unintended effects. Inside of these, the escape character (&lt;code&gt;\033&lt;/code&gt;) followed by an ANSI color sequence. Here's where I start to get creative.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Making Dynamic Prompts&lt;/h2&gt;
&lt;p&gt;One of the neat features about bash is that it allows you to set custom functions to streamline a bunch of commands in the current process. In my case, I use this to evaluate the last return code from a program and then use that information when deciding how the PS1 variable should be put together. This works because Bash, unlike so many other shells, re-evaluates its PS1 every time you submit a command. In my case, I like to know whether a program returned 0 or not, and what it returned if it wasn't 0. Since I develop a lot of programs and scripts myself, this is really really handy for debugging things without using a debugger.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;setpromptstyle(){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lastreturn=$?&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if [ $lastreturn = 0 ]; then &lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne "\001\033[7;32m\002"&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else &lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne "\001\033[7;31m\002 $lastreturn "&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fi&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;So from here you can see that things aren't exactly as I described them above. Firstly, Bash doesn't seem to evaluate [ and ] inside of functions like this, so instead I used \001 and \002, which for those of you who aren't familiar with them are start of header and start of body characters, respectively. Second of all, by using the reverse-video flag in the color sequences, I get an easily recognizable place to stop for when I'm scrolling up to the top of a command's output. For regular users, I usually use green for a zero-return-code, and red for a non-zero one. You'll note that the number itself doesn't show up unless the program actually didn't return zero. This is especially handy when you have a really long working directory.&lt;br /&gt;
&lt;br /&gt;
For a while, I had the following as my PS1 variable:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;&lt;code&gt;PS1='$(setpromptstyle)\u@\h\[\033[m\]:\[\033[1;34m\]\w\[\033[1;33m\]\$\[\033[m\] '&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;h2&gt;
Adding Git integration&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;Just recently, &lt;a href="https://kroche.io/"&gt;a friend &lt;/a&gt;&lt;a href="https://github.com/push-eax/"&gt;of mine&lt;/a&gt; asked if I had ever used powerline, which is a git project for fancy vim/bash/etc. prompt lines. In vim, it clearly showed information like the current git branch. Being a frequent user of git and github, I figured this would be a nice feature to add to my own custom prompt. I didn't want to try powerline myself, in no small part because it would mean changing my current prompt (which I am really happy with) for something else which I'm not as familiar with. Normally I am all for jumping out of one's comfort zone, but this time I felt like it would be more useful for me to create my own variant of git/bash integration.&lt;br /&gt;
&lt;br /&gt;
The first thing I wanted to do was add a counter for uncommitted files. I know this post is about bash, but in this case I didn't want to bother with bash and went straight to perl:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;&lt;code&gt;
#!/usr/bin/perl&lt;br /&gt;
my $gscounter = 0;&lt;br /&gt;
for my $line(`git status -s`){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$gscounter++;&lt;br /&gt;
}&lt;br /&gt;
print "$gscounter";&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;I saved this into bin/gitstatuscounter.pl, and put that into a function in bash. Stderr is redirected to /dev/null (&lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; at the end of the command), and it outputs a single number with no line break at the end, perfect for inserting into a prompt.&lt;br /&gt;
&lt;br /&gt;
The next thing I wanted to do was make the current branch show up in the prompt, so it's easy to see which one I'm working on. I've messed up which branch I'm working with more times than I'd care to admit, and so this is where the real usefulness of this project comes in. As it turns out, with a little sed and perl magic, we can make the git branch command output just the current working branch.&lt;br /&gt;
&lt;code&gt;git branch | sed -n '/* /s///p' | perl -pe 'chomp'&lt;/code&gt;&lt;br /&gt;
This makes git spit out the branch list, and then sed searches it for the line with a * in it, which is the delimiter for the current branch, then perl comes in and removes the trailing line break.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;h2&gt;
But what if we're not in a repo?&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;I haven't addressed a major problem with git integration, and that is what happens when we're not in a repo. As it turns out, the fix is quite simple. If &lt;code&gt;git status&lt;/code&gt; runs without error, we are in a repo. If it does not return 0, we are not in a repo and shouldn't run the git integration code. The git integration code can now be shoved into a single bash function like so:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;getgitbranch(){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;git status &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if [ $? == 0 ]; then&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne ' \001\033[7;37m\002'&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gitstatuscounter.pl 2&amp;gt;/dev/null&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne '\001\033[7;36m\002 '&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;git branch | sed -n '/\* /s///p' | perl -pe 'chomp'&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -n ' '&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -n ''&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fi&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;I could probably take out that last &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;echo -n ''&lt;/code&gt; statement, but for a while I was waffling on whether to print something else if we're not in a repo, and that would be the place to do it. For a time, that would print a space there, and it wouldn't be padded so much.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Applying our "wizdom"&lt;/h2&gt;
&lt;p&gt;When I looked at the powerline screenshots from vim, one thing struck me- the entire thing used the reverse-video flag (the 7 in my escape sequences). After giving it about five second of thought I figured this would only make the prompt more visible since I can look anywhere across a line to see where I am. One of the things about my directory tree in my home directory on any given machine is that I like to use long folder names and have bash's auto-complete fill in the full name after I typed enough characters to distinguish it from other folders. This means that prompts will often span more than half of my terminal window. If this were all reverse-video, the prompt would be visible indeed.&lt;br /&gt;
&lt;br /&gt;
After a little bit of messing with different options, I settled on this as my final prompt:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;PS1='$(setpromptstyle)\u@\h\[\033[m\]:\[\033[7;34m\]\w\[\033[m\]$(getgitbranch)\[\e[7;33m\]\$\[\e[m\] '
&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
And this provides a nice, tight prompt with git integration that hides itself if we're not in a repo (or don't have git installed).
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
A note on code&lt;/h2&gt;
&lt;p&gt;Of course, any code I post on this blog is free for anyone to use. If it's posted on here, assume it is licensed under the GPLv2 and (C) James Read unless otherwise specified. Please respect these rules, and if you have something you think would improve any code I post or any solution I have, please just write a comment on that post! If it's really really good, I may even feature it in an edit to the post itself!&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Edit: I feel it is probably best if I include a screenshot of what the prompt looks like when all this is said and done. Here are two, one with a git repository, and one outside:&lt;br /&gt;&lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://4.bp.blogspot.com/-NaRU-1MWFow/WLH2y1AAsJI/AAAAAAAAWSg/LKGtWTRj7E04lf3-JZJeo6ffI-kGJcdpQCLcB/s1600/bashrc%2Bprompt.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-NaRU-1MWFow/WLH2y1AAsJI/AAAAAAAAWSg/LKGtWTRj7E04lf3-JZJeo6ffI-kGJcdpQCLcB/s1600/bashrc%2Bprompt.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://4.bp.blogspot.com/-250B_-hUy54/WLH20VDzAvI/AAAAAAAAWSk/rUPrDhorha8fQPgdzDZidDyB9-Nzr-cqQCLcB/s1600/githidden.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-250B_-hUy54/WLH20VDzAvI/AAAAAAAAWSk/rUPrDhorha8fQPgdzDZidDyB9-Nzr-cqQCLcB/s1600/githidden.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="tech"></category><category term="bash"></category><category term="prompt"></category><category term="color"></category></entry></feed>