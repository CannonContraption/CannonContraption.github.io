<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>#!/bin/bash it 'till it works</title><link href="https://cannoncontraption.github.io/" rel="alternate"></link><link href="https://cannoncontraption.github.io/feeds/all.atom.xml" rel="self"></link><id>https://cannoncontraption.github.io/</id><updated>2022-08-27T23:20:00-04:00</updated><subtitle>The blog of a Zsh user.</subtitle><entry><title>Organizing and Tagging Photos</title><link href="https://cannoncontraption.github.io/photoorg.html" rel="alternate"></link><published>2022-08-27T23:20:00-04:00</published><updated>2022-08-27T23:20:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-27:/photoorg.html</id><summary type="html">&lt;p&gt;I take a lot of photos. I like to think I'm OK at it, but for a long time I always stumbled when it came to organizing them properly.&lt;/p&gt;
&lt;p&gt;In the beginning, I used Shotwell to pull photos off my camera and into folders. This worked OK, but Shotwell is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I take a lot of photos. I like to think I'm OK at it, but for a long time I always stumbled when it came to organizing them properly.&lt;/p&gt;
&lt;p&gt;In the beginning, I used Shotwell to pull photos off my camera and into folders. This worked OK, but Shotwell is kind of big, and pretty GNOME specific, so occasionally I would use Digikam. Anyone who has used both of these knows that they sort files &lt;em&gt;ever so slightly differently&lt;/em&gt;, for example adding leading zeros on single-digit months and days. Most of my photos stayed sorted like this, but it certainly wasn't great.&lt;/p&gt;
&lt;p&gt;Then, I moved away from swapping between KDE and GNOME to using i3 pretty much full time. Shotwell looks a little odd in KDE, but most apps built for KDE and GNOME work great in i3, except for some rough edges. Unfortunately, without GNOME loaded, it took even &lt;em&gt;longer&lt;/em&gt; to start up. At the time I was using exclusively spinning hard drives, exacerbating the problem.&lt;/p&gt;
&lt;p&gt;So, eventually, I wrote a shell script.&lt;/p&gt;
&lt;h1&gt;photoorg&lt;/h1&gt;
&lt;p&gt;This is actually relatively recent for me. Photoorg didn't exist 5 years ago, and honestly it's pretty targeted at exactly my use case.&lt;/p&gt;
&lt;p&gt;Here's how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mount the SD card as your user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the directory you mounted it to&lt;/li&gt;
&lt;li&gt;type &lt;code&gt;photoorg&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your photos will show up in &lt;code&gt;~/pic/YYYY/MM/DD&lt;/code&gt; with no name change. If the camera called it IMG_891.JPG, that's what it'll be called once it's sorted.&lt;/p&gt;
&lt;p&gt;I wrote in an optimization for my cell phone, since it formats the date in the filename. That was the easy part. It was much harder to accommodate my other cameras, though.&lt;/p&gt;
&lt;h2&gt;Supporting Any Camera&lt;/h2&gt;
&lt;p&gt;My favorite camera is my Nikon D3200. It's an entry level DSLR, and it's pretty basic. I also have an old Canon PowerShot a590is from 2008, which I use when I'm hiking or don't want to risk dropping or breaking the DSLR.&lt;/p&gt;
&lt;p&gt;Neither of these format filenames like the phone does. The Canon uses a format like &lt;code&gt;/IMG_[0-9]{3}.JPG/&lt;/code&gt;, and the Nikon &lt;code&gt;/DSC_[0-9]{4}.{JPG|NEF}/&lt;/code&gt;. As it turns out, I'm not the first person to run into this. ImageMagick has a command called &lt;code&gt;identify&lt;/code&gt; that contained exactly what I needed.&lt;/p&gt;
&lt;h2&gt;Source Code&lt;/h2&gt;
&lt;p&gt;Here's the source to the script as it stands right now:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/CannonContraption/envy-scripts/-/blob/stable/photo/photoorg"&gt;photoorg in envy-scripts on GitLab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can see in there how I parsed apart the phone date syntax, and the alternate code path that uses &lt;code&gt;identify&lt;/code&gt; first. I have some code in there to cache photos so that identify doesn't have to read the file off the SD card directly, and also an option to copy files off the SD card rather than move them.&lt;/p&gt;
&lt;h1&gt;tagsearch&lt;/h1&gt;
&lt;p&gt;I was pretty pleased with the result of photoorg, importing photos became a lot less painful. Most of my laptops have an fstab entry to let me mount the SD card as a user, which means I get the same photo import capabilities of Shotwell without needing to load half of GNOME to get there.&lt;/p&gt;
&lt;p&gt;However, I did miss the ability to tag things. If I'm looking for some landscape photos to use somewhere, for example as the background to the desktop site (that is one of mine, just lightly edited), I would have to sift through everything to look for it. Tools like &lt;code&gt;sxiv&lt;/code&gt; make this fairly easy, since they can provide the thumbnail view, but that doesn't include any logic to add tags to things.&lt;/p&gt;
&lt;p&gt;That's when it dawned on me what a simple problem this is. I could use a full-blown file indexer to do the job, or I could just keep a plain text file containing every file in a directory and a list of tags associated with it. If I ever wanted to look up a file, I could just grep the second column for the text string of the tag, and grep will spit out a list of all of the files. Combine that with some careful use of ls and the path, and I could reconstruct full paths to files by just grepping a whole bunch of these tags files.&lt;/p&gt;
&lt;p&gt;That's what eventually became &lt;a href="https://gitlab.com/CannonContraption/tagsearch"&gt;tagsearch.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tagsearch can find a file matching a tag, list the tags currently in use, find files by a tag substring, find untagged files, or show photos using sxiv based on a tag substring.&lt;/p&gt;
&lt;p&gt;Between these two scripts, I've now completely replaced Shotwell for everything I used it for. To be clear, I still like the program and happily set it up for my grandmother, who recently migrated from iPhoto (yes, that old) to Shotwell. Digikam is also solid, though it requires a little bit more setup to get working right. Both of them have merits beyond import and tagging, but those are the only two features I ever used.&lt;/p&gt;
&lt;p&gt;The result is far less memory usage, and far more SD cards with space for more photos.&lt;/p&gt;
&lt;p&gt;Here are some photos out of my archives, just for fun:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Some cranes in NJ, 2022-07-29" src="https://cannoncontraption.github.io/images/photoorg/cranes.JPG" width="100%"&gt;
&lt;img alt="Cacti on a table, 2022-08-01" src="https://cannoncontraption.github.io/images/photoorg/cacti.JPG" width="100%"&gt;
&lt;img alt="One of the first photos with my DSLR, a bird's nest, 2014-12-25" src="https://cannoncontraption.github.io/images/photoorg/birdsnest.JPG" width="100%"&gt;
&lt;img alt="Windmill in Nantucket, taken from the seat of a bike, 2012-10-07" src="https://cannoncontraption.github.io/images/photoorg/windmill.JPG" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Some of these photos were scaled down and/or cropped prior to posting, mostly to save storage space. I do still have the originals, they just seemed a little big to upload to GitHub Pages (~8-10MB each anyone?)&lt;/p&gt;</content><category term="Tech"></category><category term="photos"></category><category term="shell"></category><category term="scripts"></category><category term="scripting"></category><category term="travel"></category></entry><entry><title>Virtual Memory Inspired File Management</title><link href="https://cannoncontraption.github.io/fswap.html" rel="alternate"></link><published>2022-08-25T23:51:00-04:00</published><updated>2022-08-25T23:51:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-25:/fswap.html</id><summary type="html">&lt;p&gt;&lt;img alt="fswap comment header" src="https://cannoncontraption.github.io/images/fswap/fswap-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;In my opinion, &lt;a href="https://gitlab.com/CannonContraption/fswap"&gt;this is one of the coolest tools I've ever made.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maybe you agree, maybe you think the &lt;a href="https://cannoncontraption.github.io/pages/desktop.html"&gt;desktop site&lt;/a&gt; is cooler, but this pretty much universally solved a whole load of problems I was facing all at once, and it's not even that complicated under the hood …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="fswap comment header" src="https://cannoncontraption.github.io/images/fswap/fswap-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;In my opinion, &lt;a href="https://gitlab.com/CannonContraption/fswap"&gt;this is one of the coolest tools I've ever made.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maybe you agree, maybe you think the &lt;a href="https://cannoncontraption.github.io/pages/desktop.html"&gt;desktop site&lt;/a&gt; is cooler, but this pretty much universally solved a whole load of problems I was facing all at once, and it's not even that complicated under the hood. Let's dive right in.&lt;/p&gt;
&lt;h1&gt;Basic Problems&lt;/h1&gt;
&lt;p&gt;Back in 2019, I was starting to play my trumpet a little bit more with the local community band and the local community orchestra. I had started using a laptop to show the music, since I didn't want to print all the sheet music they emailed to me. I'm sure there are enough paper copies of Beethoven's 7th Symphony floating around in the world. I had wired up an Arduino Uno to act as a USB keyboard and plugged an analog foot pedal in to it to let me scroll the music up and down. It just pressed the up and down arrows like a keyboard. The problem with this was that I was using an ancient Dell Latitude D630, which I picked out of my pile of laptops because it could hinge open to 180 degrees or so to act like a page on a music stand. It was pretty precarious.&lt;/p&gt;
&lt;p&gt;At the same time, I had a growing collection of laptops and desktops that I used for personal things. These days I've shrunk that pile a little, but I'm still sitting next to 5 of them. They each have hardware quirks that make them suited for specific things I do, and I intend to use each of them until they can't function any longer even with repairs. My oldest is a Dell Inspiron 6000 from 2005 running a Pentium M and an IDE hard drive(!)&lt;/p&gt;
&lt;p&gt;Another problem I had was a mess of a home folder that looked different on every machine I owned, largely thanks to their unique uses. My writings would be in ~/wri on one machine, ~/doc/wri on another, both places in a third, rscs would sync yet another location, and so on. I would have to pick which files I want to be able to sync with the server or I'd have to choose to mount my server with sshfs to access the rest, letting me get sloppy and nest things slightly differently in one place vs another. I'd get lazy naming things because "well, I can always just move them later" which I would inevitably never get around to.&lt;/p&gt;
&lt;p&gt;So, between the ever diverging laptop configurations and filesystem arrangements and the music issue, I hatched a plan.&lt;/p&gt;
&lt;h2&gt;Add Another Laptop to the Pile?&lt;/h2&gt;
&lt;p&gt;OK, that's only half the plan.&lt;/p&gt;
&lt;p&gt;When I was shopping for a 2-in-1 to work for playing music (and some digital art, since I was using an ancient decade-old Wacom Bamboo for the (admittedly limited amount of) digital drawing I do) I was somewhat disappointed by my options. I was shopping Dell, since I worked for them at the time, and the two options I thought would fit my needs were either a Latitude 2-in-1, which I could compare to my (frankly excellent) work machine, or the XPS 15 2-in-1. I could either pay more for the Latitude, or get a switchable AMD Radeon GPU &lt;em&gt;in addition to&lt;/em&gt; the Intel integrated graphics. The drawback would be soldered-in storage and RAM, and the storage tiers were (of course) way more expensive than they realistically should have been.&lt;/p&gt;
&lt;p&gt;I hatched a plan to buy the XPS with 120 GB of storage, the base model. I had a home server, and I figured I could come up with a way to only store the things I was using on the laptop, and use the server for everything else. Unrelated to the storage situation, the XPS turned out to be an excellent choice- the Vega M switchable graphics chip has worked out of the box on every distro I've tried and is &lt;em&gt;very&lt;/em&gt; fast for a laptop this size.&lt;/p&gt;
&lt;h1&gt;My Existing Server Setup&lt;/h1&gt;
&lt;p&gt;I used my home server for a few things at that point. I had a tmux session open with irssi to talk to friends, I had the (then fairly new) XMPP server, and I had an SSH server. I would use the SSH server with &lt;a href="https://github.com/CannonContraption/rsynccstation"&gt;rsynccstation&lt;/a&gt; to rsync a set of directories on my computers with the server. Every file would exist everywhere.&lt;/p&gt;
&lt;p&gt;At the time, this was great. I had "backups" of all of my school files since they existed on every machine I used for school, I had some common configuration files that would auto-update for me on boot, my writings were on hand everywhere, and so were the books that I was reading. I had a synced directory for the music I was working on producing, as well. My smallest laptop had 480 GiB of SSD storage, and while it didn't have a ton of free space left, everything fit fine.&lt;/p&gt;
&lt;p&gt;I knew this wasn't going to last forever, nor would it support a vastly smaller SSD size.&lt;/p&gt;
&lt;h1&gt;the New Way to File Sync&lt;/h1&gt;
&lt;p&gt;So, I put in the order for the new laptop, and while it was shipping I started brainstorming ways to make this all work.&lt;/p&gt;
&lt;p&gt;I thought about just cutting back the files I sync, and in fact I could do a lot of that by just being selective with my rscs targets, but I knew I would want to use it for more than just basic tasks like that.&lt;/p&gt;
&lt;p&gt;I also thought about using the server like a NAS appliance, where it would essentially just be a flash drive I mount somewhere. This would have worked in cases where I had internet and cases where I was disciplined enough to keep everything logically sorted, but if I lost internet or forgot to copy something, I would be in trouble. I had vivid memories of my first semester in college when I first had to shuffle my laptop and desktop. &lt;a href="https://cannoncontraption.github.io/ansible.html"&gt;I lost files constantly, as you can read here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Right before the laptop showed up, I was explaining virtual memory to someone when it occurred to me- why not treat the filesystem like memory?&lt;/p&gt;
&lt;h2&gt;Virtual Memory&lt;/h2&gt;
&lt;p&gt;If you don't know what I'm talking about, then don't worry. Virtual memory itself has very little to do with storage, this is just how I conceptualized a different idea. Virtual memory is the concept of setting a different "virtual" address space for each program, abstracting the addressing of the CPU (and thus other programs with potentially sensitive data) from any single process. The kernel then handles mapping the address space of the process to the physical memory.&lt;/p&gt;
&lt;p&gt;Why this made me think about file management is because once you've started abstracting addressing, you can start doing some tricky things. For example, a process doesn't strictly need &lt;em&gt;all&lt;/em&gt; of its memory in RAM. The kernel can "swap" parts of it onto your storage drive to save physical RAM. If the application needs that memory later, it simply gets put to sleep for an extra moment while the operating system loads it back into RAM. This can help relieve memory pressure from a system, and it can also allow for hibernation, which does this to every process at once and powers off the system entirely. Next boot it just restores all of its processes from disk rather than doing a clean boot.&lt;/p&gt;
&lt;p&gt;Toying with memory swapping in my head and trying to analogize it was what made this concept finally click. I could simply "swap" files, just like a kernel might swap parts of memory.&lt;/p&gt;
&lt;p&gt;What I implemented wasn't virtual memory, nor was it even tiered storage. It was really just a system for organizing and retrieving data from a server off of a dictionary. However, in my head it was always related since that's where the idea came from. In this case, you as the user act as the "kernel", and the file structure remains the same across every machine. The server would then be the "swap file", except persisted as if to constantly keep a valid (or nearly valid) hibernation image. Here's what I mean:&lt;/p&gt;
&lt;h1&gt;How FSwap Works&lt;/h1&gt;
&lt;h2&gt;Components&lt;/h2&gt;
&lt;p&gt;Really, &lt;code&gt;fswap&lt;/code&gt; consists of a few basic parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a POSIX shell script called &lt;code&gt;fswap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Two symlinks to &lt;code&gt;fswap&lt;/code&gt; called &lt;code&gt;fswapin&lt;/code&gt; and &lt;code&gt;fswapout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A server with a file called &lt;code&gt;~/.fswap.pathnames&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;p&gt;The script assumes you have public key authentication and an SSH agent running, or alternatively some sort of cached credentials. It makes repeated SSH connections, something that I would like to one day solve but haven't gotten around to yet.&lt;/p&gt;
&lt;h2&gt;Procedure&lt;/h2&gt;
&lt;p&gt;Fswap does a few things, in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check the provided path and arguments. Do they make sense/exist as they should?&lt;/li&gt;
&lt;li&gt;Download the &lt;code&gt;.fswap.pathnames&lt;/code&gt; file from the server.&lt;/li&gt;
&lt;li&gt;Find the corresponding line in that file and parse it. This results in a protocol and a path&lt;/li&gt;
&lt;li&gt;Run the associated routine for the specified protocol, providing the path. There's one routine for swap in, one for swap out.&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;.fswap.pathnames&lt;/code&gt; file, upload it if it's been modified.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Rsync&lt;/h2&gt;
&lt;p&gt;This is how I use fswap probably 99% of the time. I have a half-implemented Git code path that lets me keep track of what I have in &lt;code&gt;~/src&lt;/code&gt;, where, and where it came from, but I don't use it for anything but just that.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rsync&lt;/code&gt; routines work like this:&lt;/p&gt;
&lt;h3&gt;fswapin&lt;/h3&gt;
&lt;p&gt;Take the given path, and make sure the parent directory exists. Also check if the target directory exists and save that for later.&lt;/p&gt;
&lt;p&gt;Call &lt;code&gt;rsync&lt;/code&gt; to pull the desired directory from the server and put it on the client machine. Uses the flags &lt;code&gt;-avul&lt;/code&gt;, so Archive mode, Verbose, Update files rather than copy new, and preserve symLinks. Also sets &lt;code&gt;--info=progress2&lt;/code&gt; to show some information about what's going on, effectively so there's some sort of pulse on screen while it works.&lt;/p&gt;
&lt;p&gt;Call &lt;code&gt;rsync&lt;/code&gt; a second time to push any local changes back to the server, if the path existed. The same options are used again.&lt;/p&gt;
&lt;p&gt;So, &lt;code&gt;fswapin&lt;/code&gt; effectively pulls the files off the server and pushes up any new changes. Most recent file wins, no support for deleting stuff (which is annoying, but with good file management shouldn't be a huge issue most of the time).&lt;/p&gt;
&lt;h3&gt;fswapout&lt;/h3&gt;
&lt;p&gt;Take the given path, and make sure it already exists.&lt;/p&gt;
&lt;p&gt;Call &lt;code&gt;rsync&lt;/code&gt; to send local changes to the server, using the same &lt;code&gt;-avul&lt;/code&gt; options as above.&lt;/p&gt;
&lt;p&gt;Make sure &lt;code&gt;rsync&lt;/code&gt; succeeded. If it returned any status at all, just quit because we might run into data loss.&lt;/p&gt;
&lt;p&gt;If all went well, delete the directory to free up disk space. Nothing fancy, just &lt;code&gt;rm -rvf&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Git/&lt;code&gt;scp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Git integration is basic. It doesn't commit anything, just clone/pull/push. I intend to extend this at some point, but I haven't yet.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scp&lt;/code&gt; works exactly like the Rsync integration, just substitute &lt;code&gt;scp&lt;/code&gt; for &lt;code&gt;rsync&lt;/code&gt; above and tweak the options. I rarely use it, though, since &lt;code&gt;rsync&lt;/code&gt; is generally the superior software.&lt;/p&gt;
&lt;h1&gt;It's Not Virtual Memory&lt;/h1&gt;
&lt;p&gt;Before I talk about what I use this for, I want to make one thing clear: this is &lt;em&gt;not&lt;/em&gt; virtual memory. Whenever you hear me describe it, I always introduce it as "filesystem as virtual memory" in quotes, because it's a tool that I came up with when trying to explain memory &lt;em&gt;swapping&lt;/em&gt; to somebody. I link the two since that's how the concept finally clicked for me. That's why you'll always see the quotes around "virtual memory", since it's really only emulating a single feature, not the whole thing.&lt;/p&gt;
&lt;p&gt;However, the effect is intended to be somewhat similar. Just like you would suspend an inactive task on a cell phone or other constrained device and persist that program's memory to disk to free up resources, the intent with fswap is to do the exact same thing to &lt;em&gt;projects&lt;/em&gt; on a disk. By treating each as its own little space that you can suspend and then get back to later, you're getting some of the benefits that virtual memory provides to a device. While I &lt;em&gt;haven't&lt;/em&gt; gotten fancy with cgroups or anything to actually restrict what running applications can see what storage (thus bringing things a lot closer to a &lt;em&gt;real&lt;/em&gt; analogy to virtual memory), the operational effect of fswap is intended to be roughly the same as process suspend and resume.&lt;/p&gt;
&lt;h1&gt;What I Use This For&lt;/h1&gt;
&lt;p&gt;That last paragraph should give you a pretty big hint about what I use this for. I'll explain this in two parts, each addressing the two problems I described above.&lt;/p&gt;
&lt;h2&gt;Constrained Disk Space&lt;/h2&gt;
&lt;p&gt;I do a lot of multimedia projects, and I have a small collection of GOG games. I also have that "new" laptop with the 120G SSD, which is probably still either my fastest or second fastest laptop, depending on the job. On that machine, however, I can work on virtually any project that I'm currently working on, almost as if I were on my desktop with its 4TB RAID array. All I have to do is &lt;code&gt;fswapin&lt;/code&gt; the directory containing that project, do my work, and then &lt;code&gt;fswapout&lt;/code&gt; the directory to push the changes back to the server and free up the disk again.&lt;/p&gt;
&lt;p&gt;This ended up working so well that I have entirely retired &lt;code&gt;rscs&lt;/code&gt; from daily use by now. Rather than syncing all my writings, dotfiles, school projects, music, and all sorts of other things in one go, I can just decide to listen to some jazz and pull my jazz music off the server. I can decide I want to work on writing a song that I half finished, pull the files for just that song, work on it, then get bored and push the files back. I have an fswap directory for virtually every week since March of 2020 for virtual church choir arrangements I've produced. &lt;code&gt;fswap&lt;/code&gt; is the perfect tool to manage this across all of my devices. It scales perfectly as I add more project directories too, since the bottleneck would be how fast I can &lt;code&gt;grep&lt;/code&gt; a list of them all.&lt;/p&gt;
&lt;h2&gt;Messy File Structure&lt;/h2&gt;
&lt;p&gt;Fswap solves this almost by accident. Most of the things I care about end up synced by rsync, so I had better be sure that I want to keep something where I put it or I'm going to be sorry when things are a mess later. This &lt;em&gt;is&lt;/em&gt; a downside operationally, but that knowledge (and being bitten by the shortcoming a few times) has meant that I've become very good at sorting my files in a way that I can always find everything, all 3+ terabytes of random personal files.&lt;/p&gt;
&lt;p&gt;Since I can tell GOG installers where to put games, I can also add their directories to fswap, too. This means I can leave off in a game on one machine, fswap it, leave to go on vacation without it on my laptop, then just download the whole thing save and all from the server.&lt;/p&gt;
&lt;p&gt;Furthermore, every machine I own follows the same directory structure. I don't have to think about where I put something if I know where I put it on my desktop, because they're literally the same exact directory. No more mess of divergent directory structures that live machine-to-machine.&lt;/p&gt;
&lt;h1&gt;Future Goals&lt;/h1&gt;
&lt;p&gt;I have two types of goals for Fswap, goals I will implement at some point (probably soon), and goals I might not ever even bother with.&lt;/p&gt;
&lt;h2&gt;I Will Implement These&lt;/h2&gt;
&lt;h3&gt;Better Git Integration&lt;/h3&gt;
&lt;p&gt;It's not hard to see why I would want this, I think. Git is an amazing tool for file version tracking, and unlike rsync it supports file deletion.&lt;/p&gt;
&lt;p&gt;I also already use Git for every piece of source code I have, even one-off projects that I delete quickly tend to end up in a local Git repo.&lt;/p&gt;
&lt;p&gt;There are some things that I do that probably belong in Git but don't need to be tracked super carefully, like my task list. It's already in Git, but I don't use &lt;code&gt;fswap&lt;/code&gt; to manage it since it doesn't commit the changes. If it did, I'd have history tracking and conflict resolution, but I could just sync the directory as if I were using &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Better File Name Handling&lt;/h3&gt;
&lt;p&gt;I didn't mention what's probably the most annoying bug with fswap at the moment. It's entirely possible to work around it, but you basically have to create your whole directory structure with the program in mind at the moment, because any directory or parent of a directory you want to sync must &lt;em&gt;never&lt;/em&gt; have any spaces in the name. This is a shortcoming with how shell parses strings and the fact that the delimiter between parameters is a space. I'm sure I'll be able to figure out where the script keeps dropping spaces, it's generally not too hard and just requires some care, but my own preference is for no spaces anyhow since I do a large portion of my work on the command line.&lt;/p&gt;
&lt;h2&gt;I Might Implement These Some Day&lt;/h2&gt;
&lt;h3&gt;Directory Not Found Autodetection&lt;/h3&gt;
&lt;p&gt;I'm not sure what I would need to do to make this work, but I had imagined from the start that all you would have to do to trigger fswapin is to try to cd to a directory that exists in fswap. The idea would be that the entire swap process would be completely transparent. I didn't implement this mostly because typing &lt;code&gt;fswapin project&lt;/code&gt; never seemed like a big deal to me. It was something of a priority on my initial roadmap, but the tool proved to be so useful without it that I never bothered.&lt;/p&gt;
&lt;p&gt;There's also the issue of how I would go about this. I use &lt;a href="https://cannoncontraption.github.io/forkdwm.html"&gt;a fork of DWM&lt;/a&gt; and sometimes &lt;a href="https://swaywm.org/"&gt;Sway&lt;/a&gt;, so I have a status bar that I could just slap an indicator on to tell me when it's done. However, &lt;a href="https://gitlab.com/CannonContraption/fswap"&gt;I've released fswap to my GitLab&lt;/a&gt;, which means other people can use it. I don't want to advertise a feature that may break things if someone else tries it without absolutely perfect installation. If you have to explicitly swap in every directory, then there's progress built in to the command to do that.&lt;/p&gt;
&lt;p&gt;On the flip side, using Fswap basically requires knowledge of the terminal to work properly. Not only that, but this requirement to use the terminal excludes phone and tablet users to some degree. I'll probably at least look up what I would have to do to handle this, even if I never implement it.&lt;/p&gt;
&lt;h3&gt;Directory Listing Integration&lt;/h3&gt;
&lt;p&gt;This is something that wasn't really in the initial roadmap, but probably would have been nice just as a convenience. Essentially, this would make the entire &lt;em&gt;process&lt;/em&gt; transparent to the system, not just the process of grabbing a new directory on access.&lt;/p&gt;
&lt;p&gt;Again, this runs into some of the same pitfalls as the directory not found support, or possibly worse. If the kernel returned the list of fswap-available directories as the contents of the disk, it would be impossible to know what's actually on the system. This would make &lt;code&gt;fswapout&lt;/code&gt; a critical piece to stay on top of. It wouldn't be an 'oh well, I have more disk space' matter if something didn't get removed, it would be a real problem since you would need to hunt down what's actually real and what's just available. Alternatively, I could implement automatic &lt;code&gt;fswapout&lt;/code&gt;, but then you run the (rather serious) risk of having something you need on hand swapped out from under you, or worse a full disk when you're offline.&lt;/p&gt;
&lt;p&gt;It's much more likely that I'll implement a better list mechanism than what's currently there that reads/parses the output of &lt;code&gt;ls&lt;/code&gt; and overlays available directories at any given location, as well as a more streamlined &lt;code&gt;find&lt;/code&gt; like tool. If somebody actually wants it, I could help author a Dolphin or Nautilus plugin to make &lt;code&gt;fswap&lt;/code&gt;-available directories accessible from the GUI, regardless.&lt;/p&gt;
&lt;h1&gt;Should You Use This?&lt;/h1&gt;
&lt;p&gt;This is probably my favorite of my personal tools, but before you go out and try it, here's a few questions to ask:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many big projects do you tend to do in parallel?&lt;/li&gt;
&lt;li&gt;Is your smallest computer space constrained?&lt;/li&gt;
&lt;li&gt;Do you have a lot of random machines you use regularly?&lt;/li&gt;
&lt;li&gt;Do you have a home server?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretty much the only one that's &lt;em&gt;required&lt;/em&gt; to get use out of &lt;code&gt;fswap&lt;/code&gt; is the last one, though you can quickly convert an old PC into a server in a pinch, so if you have more than one computer you technically &lt;em&gt;can&lt;/em&gt; make it work.&lt;/p&gt;
&lt;p&gt;However, if your answers were something along the lines of "a lot", "yes", and "yes", you probably could get some mileage out of this, so I'd encourage you to try it! Feel free to report any bugs you find on GitLab or &lt;a href="mailto:jimmydean886@hotmail.com?subject=fswap"&gt;by email&lt;/a&gt; and I'll either fix it or help you fix it, whichever works better.&lt;/p&gt;
&lt;p&gt;Needless to say, I invoke fswap several times per day normally, and it's literally saved me days of extra work just finding and organizing things.&lt;/p&gt;
&lt;p&gt;Anyhow, that's a tour of fswap, my file swapping script.&lt;/p&gt;</content><category term="Tech"></category><category term="fswap"></category><category term="files"></category><category term="server"></category><category term="rsync"></category></entry><entry><title>Transition to Pelican: Part 3</title><link href="https://cannoncontraption.github.io/pelican3.html" rel="alternate"></link><published>2022-08-23T18:00:00-04:00</published><updated>2022-08-23T18:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-23:/pelican3.html</id><summary type="html">&lt;p&gt;The &lt;a href="https://cannoncontraption.github.io/pages/desktop.html"&gt;desktop site&lt;/a&gt; is here!&lt;/p&gt;
&lt;p&gt;&lt;img alt="desktop-site-finished" src="https://cannoncontraption.github.io/images/pelican3/result.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;This was the original form of my blog when I first ported it from Blogger to GitHub Pages in 2018. However, the history goes back further than that. Originally, this was the interface created for the computer science club site at my university. We were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="https://cannoncontraption.github.io/pages/desktop.html"&gt;desktop site&lt;/a&gt; is here!&lt;/p&gt;
&lt;p&gt;&lt;img alt="desktop-site-finished" src="https://cannoncontraption.github.io/images/pelican3/result.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;This was the original form of my blog when I first ported it from Blogger to GitHub Pages in 2018. However, the history goes back further than that. Originally, this was the interface created for the computer science club site at my university. We were building something much more ambitious than just a desktop in a browser back then, we were building a whole blog &lt;em&gt;platform&lt;/em&gt; complete with a CMS and everything. We were not that far away from finishing it by the time we stopped.&lt;/p&gt;
&lt;p&gt;Having already built sites like this before, I had insisted that we separate out some of the components into their own repositories at one point, and the result was &lt;a href="https://gitlab.com/CannonContraption/windowTools"&gt;windowTools&lt;/a&gt; and &lt;a href="https://gitlab.com/CannonContraption/widgetTools"&gt;widgetTools&lt;/a&gt;. Together, these provide a JavaScript interface to program a desktop and widgets like you would on a native development kit like GTK+ or Tk. This meant that these components were free for use elsewhere. Just like I figured, they ported fairly smoothly into my Pelican theme, and now will get updates just like the rest of the blog.&lt;/p&gt;
&lt;p&gt;If you're interested in my porting process, here's how I went about it, with screenshots!&lt;/p&gt;
&lt;h1&gt;First Steps&lt;/h1&gt;
&lt;p&gt;First step was to copy/paste the old desktop site to the new site. In the process, I inlined my old "blog.js" script into the body of the page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="initial-port-blank" src="https://cannoncontraption.github.io/images/pelican3/initial-port-blank.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;It does work, in spite of the total lack of every image used in the page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="initial-port" src="https://cannoncontraption.github.io/images/pelican3/initial-port.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Adding Content from Pelican&lt;/h1&gt;
&lt;p&gt;so, I moved on to add categories. This was straightforward. I had mentioned that I had already used Pelican at Kitsune Security, so I was already used to how it does loops over content. I did end up referencing the categories page to make this work, but I ended up with this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="categories imported" src="https://cannoncontraption.github.io/images/pelican3/categories-imported.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;You'll see a category here called "posts". I thought this was some feature of Pelican to make a section for all posts, but in fact I had mislabeled one of my posts at that time, so Pelican had filled in the default category, "posts" instead of "misc" like that one should have been.&lt;/p&gt;
&lt;p&gt;The next step was to iterate over all of the posts to make their icons. Again, there are no resources here. I figured out how to use the Jinja2 &lt;code&gt;truncate()&lt;/code&gt; routine to get the titles to fit. I eventually discarded this, since WidgetTools does that on its own.&lt;/p&gt;
&lt;p&gt;&lt;img alt="open category" src="https://cannoncontraption.github.io/images/pelican3/early-tech-category.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;The way the old desktop site worked was by loading iframes that contained the pages in the "classic" site. &lt;a href="https://cannoncontraption.github.io/blogging-is-hard.html"&gt;See the full story&lt;/a&gt; or &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;my other posts about blogging&lt;/a&gt; for more on that. However, this made it really easy to just link the existing iframe code into Pelican and get it to display a post. Maybe at some point I'll make this a little smarter, so you can't launch the desktop from within a desktop window (which works fine right now, by the way) but this is the solution I stuck with. Links still work in the page, which is a huge advantage.&lt;/p&gt;
&lt;p&gt;&lt;img alt="open post" src="https://cannoncontraption.github.io/images/pelican3/early-open-post.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Theme and Visual Style&lt;/h1&gt;
&lt;p&gt;I then ported the theme CSS and pointed the background image at the correct resource in Pelican's theme structure. The way this is handled is layered. This means that if you just clone windowTools, you'll get the default look and feel. It's kind of orangey and gross looking, but it's functional. Then, instead of modifying windowTools, the approach I use (and encourage) is to define another stylesheet after the fact with all of the customizations you want to make the desktop your own. In my case, this is the gradiated Win2K-style titlebars, the background image and black fallback color, and a custom set of taskbar button colors. I may have customized other things, but I still like the theme so I just copied it from the old desktop site pretty much unchanged.&lt;/p&gt;
&lt;p&gt;&lt;img alt="working theme" src="https://cannoncontraption.github.io/images/pelican3/early-working-theme.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;windowTools and widgetTools Changes&lt;/h1&gt;
&lt;p&gt;The next part was to modify windowTools and widgetTools. They both kind of expect that they're always going to be in the site root, or at the very least in the same directory as the base page. Of course, Pelican sorts things rather differently, so I had to change them so that they add a relative path variable to find their image resources. For windowTools, I made that a JavaScript variable &lt;code&gt;wtoolspath&lt;/code&gt;, and for widgetTools &lt;code&gt;wtoolsrpath&lt;/code&gt;. In the case of the desktop site, I set these like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wtoolspath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/theme/scripts/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;wtoolsrpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/theme/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;since windowTools and widgetTools are submodules checked out in my &lt;a href="https://github.com/CannonContraption/blag"&gt;blog source&lt;/a&gt; in &lt;code&gt;themes/bashworks/static/scripts/&lt;/code&gt;, meaning Pelican puts them in &lt;code&gt;theme/scripts&lt;/code&gt; in the generated result, and the 'resources' folder for the icon theme in widgetTools is in &lt;code&gt;theme/resources&lt;/code&gt;, but widgetTools already looks for &lt;code&gt;resources/&lt;/code&gt; so all I need is the path to the theme directory added on the front. My hope is that this approach won't mess up any existing installations. Maybe I'll roll back a copy of my site to the old version and see if it still works when I &lt;code&gt;git pull&lt;/code&gt; these changes.&lt;/p&gt;
&lt;p&gt;This made the maximize, minimize, close, and menu buttons show up. However, I missed one and the grab handle for resizing windows still isn't there. I won't bother pointing out when I add it, since it's the same change. You'll be able to see it anyhow.&lt;/p&gt;
&lt;p&gt;&lt;img alt="working icons" src="https://cannoncontraption.github.io/images/pelican3/working-icons.png" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;This is when I realized that fact about loading the desktop within a desktop within a browser within a desktop. You can stack this as many times as your screen and RAM will fit, by the way. I find this hilarious:&lt;/p&gt;
&lt;p&gt;&lt;img alt="desktop inception" src="https://cannoncontraption.github.io/images/pelican3/desktop-inception.png" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;Final Polish, Backend Fixes&lt;/h1&gt;
&lt;p&gt;This is when I started putting some polish under the hood. I started playing with the number of characters that would fit in an icon (only to find they get trimmed anyhow based on width), hooked up the "latest post" button so that it updates when I post something new, and rewrote the intro screen. Originally, the intro screen was a set of individual "label" div elements with separators programmed in via widgetTools. This is pretty inefficient, so I ripped that out. I then told Pelican to grab the content of the &lt;code&gt;desktop.md&lt;/code&gt; file containing the metadata that points to the desktop site in the theme and use that for the intro instead. This meant that the &lt;em&gt;desktop specific&lt;/em&gt; intro screen pulled content out of the otherwise unused content section for the desktop. Personally, I like it when things work out like that.&lt;/p&gt;
&lt;h1&gt;I Have Now Transitioned to Pelican&lt;/h1&gt;
&lt;p&gt;That's it! The desktop is ported! If you're on a phone right now, I wouldn't recommend trying the desktop site. Open your laptop for this one if you're interested. It doesn't work at all on touchscreens (last time I tried) and isn't designed for phones anyhow. You aren't missing any &lt;em&gt;content&lt;/em&gt; on the main site, it's just a normal website rather than a desktop.&lt;/p&gt;
&lt;p&gt;So, I suppose that's it now. My whole site is managed by Pelican. My goal with the last change to the split site I was using was to lower the amount of work required to post something new. I had hoped that this would encourage me to write more and turn the blog into the exercise in writing that I had hoped it would be from the start. While it did encourage me to branch out and I ended up writing about a lot more than just tech shortly after, the post about the porting process was the last tech post that I made until I started this transition to Pelican.&lt;/p&gt;
&lt;p&gt;Pelican, on the other hand, has made it simple and quick enough to post new things that I do it regularly now. I don't think I could come up with a better endorsement for the software than that. As the cherry on top, my desktop in a browser ported smoothly, so there's basically no drawback and the final product is just as complete as the old version (but &lt;em&gt;much&lt;/em&gt; better looking, I can't stress that enough).&lt;/p&gt;
&lt;h2&gt;I'm Also Not Done&lt;/h2&gt;
&lt;p&gt;If you've ever used Pelican, the theme I use is probably pretty familiar. It's still the basic 'notmyidea' theme, just modified to include the desktop site, responsive web design, and some colors that I like better. It's still (at its core) the default theme. If the site doesn't look that familiar, I've either finished making my own theme from scratch (or modifying this one beyond recognition) or Pelican has a different default now.&lt;/p&gt;
&lt;p&gt;The desktop site also wasn't really optimized for a lot of posts. This means that if you open it on a smaller screen then open the "tech" category, you'll only be able to open the most recent posts. The older ones clip off the bottom of the screen. I think at one point I had a scrollbar in there, but I haven't put it back yet. It's a simple change though, so it'll probably get fixed quickly.&lt;/p&gt;
&lt;p&gt;I'm probably also never going to be done tweaking the blog. Like I hinted at in my first post &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;in this series&lt;/a&gt;, I enjoy messing with this stuff. Blogging is a lot of fun, and the supporting tech is similarly cool, making things like a really, &lt;em&gt;really&lt;/em&gt; fast user experience that doesn't degrade with JavaScript turned off, or a very fast desktop in a browser written in plain JavaScript, no frameworks.&lt;/p&gt;
&lt;p&gt;If this is your thing, feel free to subscribe via Atom or RSS, links below. I don't have a comments section here right now, but you can always &lt;a href="mailto:jimmydean886@hotmail.com?subject=Hello!"&gt;send me an email&lt;/a&gt; if you want to suggest something, or just say hi!&lt;/p&gt;</content><category term="Tech"></category><category term="blog"></category><category term="python"></category><category term="pelican"></category><category term="desktop"></category></entry><entry><title>Habit Changer Dev Log 2</title><link href="https://cannoncontraption.github.io/devlog2.html" rel="alternate"></link><published>2022-08-22T18:50:00-04:00</published><updated>2022-08-22T18:50:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-22:/devlog2.html</id><summary type="html">&lt;p&gt;Hello again, it's been a few days!&lt;/p&gt;
&lt;p&gt;I actually took somewhat of a weekend break in the middle there, but now we're back with more habit changer work. However, during that time I managed to complete the data structures for the core habit system, a prototype algorithm for how to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again, it's been a few days!&lt;/p&gt;
&lt;p&gt;I actually took somewhat of a weekend break in the middle there, but now we're back with more habit changer work. However, during that time I managed to complete the data structures for the core habit system, a prototype algorithm for how to calculate habit changes, and a set of verbal descriptions of what the UI will look like. I haven't done any mockups yet, so the UI is still just a bunch of descriptions rather than a set form just yet. I also wrote the first bits of code for the algorithm tester in Rust, and so far that can represent and display habit data in a plain-English debug format. I may change this to be JSON or something before long just for automation purposes, but for early prototyping this should work OK.&lt;/p&gt;
&lt;h1&gt;Habit Templates&lt;/h1&gt;
&lt;p&gt;I wanted to touch on this briefly.&lt;/p&gt;
&lt;p&gt;My previous post talked about the idea of habit "templates". This would allow the user to just plop down a proposed habit change based on some common assumptions that could be used for other habits. It would also allow them to link data sources to the habit change as they saw fit. This model turned out not to make as much sense as I had thought. Here's what it would have looked like:&lt;/p&gt;
&lt;p&gt;Templates themselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of Desired Adjustment (Numerical or Time)&lt;/li&gt;
&lt;li&gt;Adjustment is a Ratio&lt;/li&gt;
&lt;li&gt;Unit of Measure (numerator/non-ratio)&lt;/li&gt;
&lt;li&gt;Unit of Measure (denominator, ratio only)&lt;/li&gt;
&lt;li&gt;Default Regression Interval&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each instance of this template would look something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name of the Habit Change&lt;/li&gt;
&lt;li&gt;reference to the template&lt;/li&gt;
&lt;li&gt;Start Date&lt;/li&gt;
&lt;li&gt;Duration of Change (change complete in 1 month, etc.)&lt;/li&gt;
&lt;li&gt;List of Reported Activity&lt;/li&gt;
&lt;li&gt;Progress from Today&lt;/li&gt;
&lt;li&gt;Last Updated Date/Time&lt;/li&gt;
&lt;li&gt;Regression Interval&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I realized pretty quickly was that this is kind of stupid. The templates contain very little in the way of unique data, and vastly complicated the data structure, since now we're dealing with "default settings" and have to refer a habit back to its template to get some details. Furthermore, if somebody wants to take a habit and make another one like it, they're probably just as comfortable taking an existing habit &lt;em&gt;as is&lt;/em&gt; and then just adjusting it to fit their new needs. This vastly simplifies their usage patterns.&lt;/p&gt;
&lt;h2&gt;No Templates?&lt;/h2&gt;
&lt;p&gt;All of that said, I still like the idea of the "template system" that I defined in my requirements section in my &lt;a href="https://cannoncontraption.github.io/devlog1.html"&gt;last post&lt;/a&gt;. Rather than make that an integral part of how the app works, I've opted to shoot for a simplified version.&lt;/p&gt;
&lt;p&gt;For the sake of giving this idea a name, I'm calling it "no templates".&lt;/p&gt;
&lt;p&gt;When looking at an existing habit, there will of course be some editing options. There will be a full edit screen, a screen for logging progress, a delete button somewhere, and so on. In addition to this, I think I'm going to add a "partial clone" and a "full clone" option.&lt;/p&gt;
&lt;p&gt;Full clone should describe itself, that will just duplicate a habit, ask for a new name, and then create a new habit entry starting on the current day with all of the settings from the habit that was just cloned. Theoretically, this type of habit could be exported and shared at this point, and would be the "template" replacement.&lt;/p&gt;
&lt;p&gt;Partial clone would be what the original templates system would have described. It will copy the type, adjustment, unit of measure, and regression interval fields and then open the habit edit screen to fill in the rest of the blanks and tweak things further.&lt;/p&gt;
&lt;p&gt;I personally love solutions like this. By moving away from a hard-and-fast "template" system to some simple data copy operations, I massively simplified the programming work that's needed to accomplish the same task, and managed to give the user &lt;em&gt;more&lt;/em&gt; options in the process. In my mind, this is a hallmark of good iterative design, when trimming features and complexity leads to more flexibility and a more intuitive interface virtually for free.&lt;/p&gt;
&lt;h1&gt;Prototype in Rust?&lt;/h1&gt;
&lt;p&gt;Many of you probably know this already, but Rust isn't exactly most people's first choice of app development language (as far as I know you can't actually write an Android app in Rust without heavy use of the NDK and C bindings), nor is it most people's first choice of prototyping language. So why did I choose it?&lt;/p&gt;
&lt;p&gt;There's a number of reasons. Honestly speaking, my personal portfolio contains very little Rust code relative to the amount of it I've actually written. This is the least important reason, though.&lt;/p&gt;
&lt;p&gt;Crucially, Rust enforces sane code structure and strict data types. It's fully expressive in much the same way Python is, and will call you on bad design from the compiler half the time. It requires that you think of memory in a unique (and uniquely safe) way, and it's also just fun.&lt;/p&gt;
&lt;p&gt;Let's compare this to Python for a moment. Python is loosely typed, happily lets you define extra variables where you intended to modify an existing value, doesn't really let you touch any memory management in the first place, is somewhat sloppy with scope, and requires reading indentation to figure out the start and end of code blocks. None of these things are deal breaking issues on their own, but put together they make Python less than ideal.&lt;/p&gt;
&lt;p&gt;Using a language like C would also work, but then you're worrying about memory management in your prototype. If you can entirely avoid ever calling &lt;code&gt;malloc()&lt;/code&gt; or similar in your C, then it's a good language to use. Otherwise, maybe look elsewhere.&lt;/p&gt;
&lt;p&gt;For me, I also want to be able to rapid test my algorithm with an automated test early on to prove it in a lot of different simulated scenarios. Rust helps here, too, since it's very fast.&lt;/p&gt;
&lt;h1&gt;What's Your Starting Point?&lt;/h1&gt;
&lt;p&gt;Part way through writing the first bits of display code for the prototyping system, I realized that using the app in the way that I had originally designed it requires that a person already have habit logging down to a science. In many, perhaps most cases, that's not very likely. So, rather than asking the user to input a starting point, I've added a "monitor mode" to the design. The idea is to simply watch and wait and see what a person's actual starting point is. Once they disable monitor mode, the app will log the "starting date" and calculate the percent change from some aggregate of the data they've entered, perhaps a daily average or something along those lines.&lt;/p&gt;
&lt;p&gt;This comes with the additional advantage that the app can suggest error margins based on some basic statistics from the data the user provides during this "learning" period.&lt;/p&gt;
&lt;h1&gt;Habit Algorithm&lt;/h1&gt;
&lt;p&gt;So, with all of that said, here's the prototype algorithm, more or less:&lt;/p&gt;
&lt;p&gt;Start by defining the habit. Then, the habit will enter "monitoring mode" for a few days. Once this is done, we'll have some of the data we need. As an example, we're just going to take the average, minimum, and maximum values. We'll use the "average" as a representation of the "current value". We'll then compare the average to the minimum and maximum values to come up with a deviation percentage. This can be used as the suggested deviation percentage per day. This will mask outliers more effectively than just guessing a number for this step.&lt;/p&gt;
&lt;p&gt;At that point, we'll take the target duration to adjust to the new habit and use it to come up with a rate of change. So, for example, if we started with an average of consuming 2500 calories and we want to reduce that to 1800 in 30 days, we'll target a calorie reduction of 23 and 1/3, give or take how much the starting number deviated from the average over the monitoring period.&lt;/p&gt;
&lt;p&gt;My original algorithm document then went on to say that the app won't be designed to maintain a habit, but in all honesty that would pretty soundly defeat the purpose of the app in the first place. The idea is to slowly get somebody to adapt to a new habit. My original assumption was that this would be as simple as just getting within a certain percentage of the desired outcome value, but in all honesty it should also still be able to coach you after the fact and let you know when your average over a certain number of days is slightly higher or lower than it should be. Using the calories example, that would give a person a better chance of forming an intuitive idea of how many calories is the right amount without the app. That's what the difference is between a temporary lifestyle change and an ingrained habit.&lt;/p&gt;
&lt;h1&gt;Progress So Far&lt;/h1&gt;
&lt;p&gt;The main data structures are drafted. The prototype and algorithmic test suite is probably about 20% done.&lt;/p&gt;
&lt;p&gt;These are the core data structures (as they exist now in code):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Adjustment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Defines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;habit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;adjustment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;made&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#[derive(PartialEq)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Adjustment&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Numerical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Chronological&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;/*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Representation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;goal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;delta_den&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;PrimitiveDateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;/*&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Habit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Definition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ongoing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;habit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Habit&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;adj_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Adjustment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;adj_ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb nb-Type"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;monitoring&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb nb-Type"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;unit_num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;unit_den&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tgt_done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;regress_int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I'll probably change a number of these fields to be &lt;code&gt;Option&lt;/code&gt;s or something in order to allow for null values where they make sense.&lt;/p&gt;
&lt;p&gt;The system is starting to take shape and the very first bit of executable code is written and ready to be extended to include the algorithm proper. The design documents are written and make sense, and the project is on track to produce something useful.&lt;/p&gt;
&lt;h1&gt;Design Changes&lt;/h1&gt;
&lt;p&gt;Habit maintenance is the name of the game. Anecdotally I've heard that 3 weeks is the sweet spot to make a habit stick, which is a fact I clear forgot in my initial design drafts.&lt;/p&gt;
&lt;p&gt;Templates underwent a total change, moving from a rigid structure that each habit must use to a simple data serialization idea.&lt;/p&gt;
&lt;p&gt;The design now takes training into account. This is doubly useful since much of the same code can be used for initial monitoring beforehand and maintenance after reaching the target.&lt;/p&gt;
&lt;h1&gt;Still Left to Do&lt;/h1&gt;
&lt;p&gt;The prototype system needs to be finished. It's started and looking like it'll be in good shape, but that's a far cry from complete and ready. Then, of course, the test cases need to be written to stress the design, and it needs to be ported to an app to complete the project.&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;</content><category term="Tech"></category><category term="devlog"></category><category term="dev"></category><category term="android"></category></entry><entry><title>Fishing</title><link href="https://cannoncontraption.github.io/fishing.html" rel="alternate"></link><published>2022-08-20T15:57:00-04:00</published><updated>2022-08-20T15:57:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-20:/fishing.html</id><summary type="html">&lt;p&gt;There's a time and a place for hard work, and there's a time and a place for just hanging out with friends and going fishing.&lt;/p&gt;
&lt;p&gt;I've heard a few people I know claim that they've never understood fishing, and they can't seem to fathom why anybody would do it. To …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's a time and a place for hard work, and there's a time and a place for just hanging out with friends and going fishing.&lt;/p&gt;
&lt;p&gt;I've heard a few people I know claim that they've never understood fishing, and they can't seem to fathom why anybody would do it. To them, it's a lot of nothing. In this post I'm stepping well outside my comfort zone and addressing why this person needs to go fishing most out of anybody in the world.&lt;/p&gt;
&lt;h1&gt;Actual Work&lt;/h1&gt;
&lt;p&gt;The most obvious angle to take is that of tradesmanship. Learning to fish gives you a backup way to support yourself in almost any area that has a large enough body of water. Of course, this resource is not infinite, but it can be enough for a person to feed themselves in hard times.&lt;/p&gt;
&lt;p&gt;Beyond this, though, there's a certain amount of patience and diligence that fishing will teach a person. It's not always easy to find the right spot to catch, and even if you do, fish are creatures too and can be just as wary of an ill-hooked worm as you would be. There are also just off days and spots where the fish don't like to hang around for one reason or another. There's nothing wrong with having a short patience, in many places fishing won't test it very much at all with the right combination of bait and available fish. Even this, however, can teach a person the value of attempting something they may not succeed at.&lt;/p&gt;
&lt;h1&gt;As recreation&lt;/h1&gt;
&lt;p&gt;There's a certain amount of connection that you can form with a person by fishing with them. Being patient with line and hook is a sign of a patient, collected person. When you hook a bush or snap your line, you open yourself up to the other person and show them who you are, too. Because it's a calm, relaxed setting, people will tend to let their guard down as they fish, and simply soak in the meditative atmosphere.&lt;/p&gt;
&lt;p&gt;Even more so, fishing is a low-stress activity, something that anybody of any age can enjoy. A six-year-old and a 96 year old can both sit at the same shore and connect as friends or family just by sitting and letting the time pass.*&lt;/p&gt;
&lt;p&gt;With a little patience, you'll succeed more than you fail. Maybe that's a metaphor for life?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* As an aside, who doesn't like the look on a kid's face then they've just caught their first fish?&lt;/p&gt;</content><category term="Misc"></category><category term="Fising"></category><category term="outdoors"></category><category term="lifestyle"></category></entry><entry><title>Habit Changer Dev Log 1</title><link href="https://cannoncontraption.github.io/devlog1.html" rel="alternate"></link><published>2022-08-18T17:43:00-04:00</published><updated>2022-08-18T17:43:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-18:/devlog1.html</id><summary type="html">&lt;p&gt;In my last post, I talked about a new app I wanted to develop, and while I said the next post would probably be the post after next, here I am one day later with my first draft design of the app.&lt;/p&gt;
&lt;h1&gt;Basic Idea&lt;/h1&gt;
&lt;p&gt;To recap yesterday's post, I want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my last post, I talked about a new app I wanted to develop, and while I said the next post would probably be the post after next, here I am one day later with my first draft design of the app.&lt;/p&gt;
&lt;h1&gt;Basic Idea&lt;/h1&gt;
&lt;p&gt;To recap yesterday's post, I want to create an app that will let you track and adjust habits over time in order to make meaningful corrections to bad (and good) habits that will leave room for error while still giving you a template to make progress. Go see &lt;a href="https://cannoncontraption.github.io/devlog0.html"&gt;that post&lt;/a&gt; for the full story.&lt;/p&gt;
&lt;p&gt;It needs to support gradual, error-accepting changes in behavior to slowly move a person into a new habit without jolting them, for example to change sleep schedules or diets in a meaningful, lasting way.&lt;/p&gt;
&lt;h1&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Android app. I would target iOS too, but I don't own an iPhone or a Mac and don't really intend to change this at the moment. If they supported sideloading I'd be a lot more willing, but last I checked they don't. Alternatively, a website with a mobile client.&lt;/li&gt;
&lt;li&gt;Persistent data save. Your data shouldn't go away when you run out of battery.&lt;/li&gt;
&lt;li&gt;Uses templates to define some behavior change. These templates should define the habit, the current state, and the target state. Bonus if they can learn the person's current state based on raw input.&lt;/li&gt;
&lt;li&gt;Needs to support being offlined for a few days gracefully. If your phone breaks and you have to get it fixed, it shouldn't freak out when you get it back online. I personally have forgotten my phone in a corner for days on accident, so this matters to me a lot.&lt;/li&gt;
&lt;li&gt;Must not require the Play Store or Play Services. I use LineageOS without them. Again, a website skirts this nicely.&lt;/li&gt;
&lt;li&gt;Supports time-based changes, for example to change a sleep schedule after a long trip (or because it's &lt;a href="https://cannoncontraption.github.io/devlog0.html"&gt;whack already&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Supports quantity-based changes, for example reducing calories or increasing exercise minutes gradually over time&lt;/li&gt;
&lt;li&gt;Supports ratio-based changes, for example increasing the amount of fruit eaten in a day vs candy&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Nice-To-Haves (Potentially Later Features)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Downloadable catalogs, for things such as foods. Lets a person track calories easily. Could be extended to Wal-Mart catalogs or something (potentially) if the habit we're trying to enforce is a budget, for example.&lt;/li&gt;
&lt;li&gt;Anything network related, like competitions with friends. Sometimes changing a habit is easier when you do it with someone else (quit smoking together, maybe?)&lt;/li&gt;
&lt;li&gt;Addition to Play Store. The app should be &lt;em&gt;at least&lt;/em&gt; MVP status before this happens, obviously.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Some Assumptions, Further Requirements&lt;/h1&gt;
&lt;p&gt;In order to keep the scope of the MVP down somewhat, I've decided to stick to some limitations.&lt;/p&gt;
&lt;p&gt;First of all, the project will only really deal with daily habits. Anything that needs tracking on a weekly or monthly basis isn't really the target here. We want to help form some habits like eating less or working out more, not reducing gas usage over a year (at least at first). I want to leave the door open to expand this later, but I make no assumption that the first version I release will have the ability to track on any interval longer (or shorter) than a single day.&lt;/p&gt;
&lt;p&gt;There will be &lt;em&gt;no&lt;/em&gt; built-in templates. The app won't assume units, reasonable ranges of data, or anything like that. It should be able to take just about any input you can express with a number and help you to set goals for tomorrow for what number to hit next. That's its goal, not specifically tracking calories or hours slept. The MVP will not include any of these templates baked in.&lt;/p&gt;
&lt;p&gt;The template creator must include the ability to denote units. Leaving this out could result in disaster, since there are a number of units of measure that can get confused with one another. Grams vs ounces in any sort of nutrition field would be an easy one, as an example.&lt;/p&gt;
&lt;p&gt;All elements of the program must include a GUI to be considered "MVP ready". As much as I'll probably write the version for me &lt;em&gt;first&lt;/em&gt;, it's not done until my non-technical friends can approach it and use it to set their own habits. There shouldn't be a requirement to learn POSIX shell or YAML or SQL or anything of the sort to approach the tool.&lt;/p&gt;
&lt;h1&gt;What I'm Not Specifying&lt;/h1&gt;
&lt;p&gt;The UI is a separtate issue. At this stage I'm not prescribing any &lt;em&gt;specific&lt;/em&gt; user interface, nor do I want to lock myself into anything that will prevent me from accomplishing all of the stretch goals I've listed. That means the UI is a &lt;em&gt;later&lt;/em&gt; concern, and I want to get something working off the ground first.&lt;/p&gt;
&lt;p&gt;I'm not specifying storage method yet, just that the data must persist. That leaves the door open to various types of SQL, as well as using files in the filesysem in Linux or something along those lines. Something like SQLite would make a good stopgap between the two, so it may make sense to start there.&lt;/p&gt;
&lt;p&gt;In the last post, I said I wanted to write this in Kotlin. I'd still prefer to do that, since it seems like a nicer choice than Java. The main issue I'm considering now is that if I write this in Java, I can take a core class and port it between Linux (for the prototype) and Android (for the final version) without any sort of extreme effort. Again, not applicable if this ends up being a website.&lt;/p&gt;
&lt;p&gt;Hosting and internet things should be pretty much off the table. Even if I make a website, I would much rather use HTML5 local storage rather than host somebody's data. Their data is not my concern, and I don't want to pay to store it any more than privacy advocates would want to give it to me. If I can accomplish this whole thing without knowing my users' habits (unless they tell me via review, etc) then I'll be happy. I'm writing this to be useful to the user, not profitable to an ad company.&lt;/p&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;So, I'll be specifying the data storage format today, hopefully I'll have an update on that tomorrow. The HTML5 idea came to me today, so we'll see if I use it or not. I'm not a really big fan of JavaScript, but there isn't really another webapp language to pick from, so I'm kind of stuck with it if I go this route. I'm also not a fan of Java, but I'm not sure I'd pick JavaScript over it or not. The argument really is JS vs Kotlin, a language I know almost nothing about at this point (other than it's supposedly very nice) so once again we'll see which direction I take this.&lt;/p&gt;
&lt;p&gt;I'll probably write an initial prototype that I can cheese around with in Rust, letting me change the date on the fly in a unit test with some hand-calculated values based on the internal data structure prototypes I come up with. Once all three modes are implemented, it will almost certainly be a matter of just porting the algorithm into whatever language or platform I want, then writing the UI and storage systems.&lt;/p&gt;
&lt;p&gt;Estimating how long this will take is a fool's game, in my opinion. I'm pretty motivated right now to make this work, but the proof will have to be in the product, so stay tuned if you're at all interested!&lt;/p&gt;
&lt;h1&gt;Progress So Far&lt;/h1&gt;
&lt;p&gt;I have an idea of what data I'll be handling and a basic sketch of how. I have some potential platforms and technologies laid out, and some motivational fire.&lt;/p&gt;
&lt;h1&gt;Design Changes&lt;/h1&gt;
&lt;p&gt;I've opened the door to making this a web app, though I haven't made any decisions about that yet. I still want to learn Kotlin at some point, and since all my friends use Android I can make the excuse to just do this. However, that would lock out a huge market segment, stopping people on PC and iOS from using it. PC maybe isn't such a challenge, but I have no interest in buying equipment for iOS still.&lt;/p&gt;
&lt;h1&gt;Still Left to Do&lt;/h1&gt;
&lt;p&gt;Formalize data structures, design the prototype system, design the algorithmic testing suite, write the app, in that order. Simple, yeah?&lt;/p&gt;
&lt;p&gt;See you next time!&lt;/p&gt;</content><category term="Tech"></category><category term="devlog"></category><category term="dev"></category><category term="android"></category></entry><entry><title>Habit Changer Dev Log 0</title><link href="https://cannoncontraption.github.io/devlog0.html" rel="alternate"></link><published>2022-08-17T18:05:00-04:00</published><updated>2022-08-17T18:05:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-17:/devlog0.html</id><summary type="html">&lt;p&gt;Since I have a blog, and since I write software, I figured I should finally combine the two.&lt;/p&gt;
&lt;p&gt;Wow! What uncharted waters!&lt;/p&gt;
&lt;p&gt;In all seriousness though, a friend of mine asked me months ago to write a diet app for him that would track more than just calories. He wanted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I have a blog, and since I write software, I figured I should finally combine the two.&lt;/p&gt;
&lt;p&gt;Wow! What uncharted waters!&lt;/p&gt;
&lt;p&gt;In all seriousness though, a friend of mine asked me months ago to write a diet app for him that would track more than just calories. He wanted an app that could track his protein intake, carbs, sugars, and loads of other stuff and do fancy stuff like chart it over time.&lt;/p&gt;
&lt;p&gt;The very next day he was worried he was getting obsessive and asked me not to even start. Honestly, I hadn't done any Android app development since college, and that was even pre-Kotlin, so I was pretty crushed that he didn't want me to write this anymore.&lt;/p&gt;
&lt;p&gt;Fast forward to the present day, and now he's run into a case where he wants to be able to adjust his diet. This time, he wants to make small, incremental changes to a ratio between two different components over a long period of time. This means that he wants an app that will let him set goals to zero in on certain parts of his diet, without really worrying about calories first.&lt;/p&gt;
&lt;h1&gt;Original App Design&lt;/h1&gt;
&lt;p&gt;Now that the background is out of the way, here's the original design for the app that I had written down in my notebook at the bar. This is the first design, in its concept phase. Pretty much everything not in these two notebook pages was all in my head.&lt;/p&gt;
&lt;p&gt;&lt;img alt="notebook-page1" src="https://cannoncontraption.github.io/images/devlog0/notebook-page1.jpg" width="80%"&gt;&lt;/p&gt;
&lt;p&gt;This page is what I called the "per-day overview screen". At the time, I used calories and protein as an example for the two displays. I didn't really have any sense for what amount of protein is even healthy (since I haven't ever tracked it myself) so I just subbed in X and Y so I could demo the layout in my head.&lt;/p&gt;
&lt;p&gt;This design makes a lot of sense if you have a fixed target to reach and you want to reach exactly that target (or possibly more). However, if you're trying to cut back on something, you'll probably be thinking something along the lines of 'I want to get within 10% of this goal' rather than 'I want to get exactly &lt;em&gt;x&lt;/em&gt; calories today, not one more, not one less'. As a result, the application I'm building this time around probably won't use this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="notebook-page2" src="https://cannoncontraption.github.io/images/devlog0/notebook-page2.jpg" width="80%"&gt;&lt;/p&gt;
&lt;p&gt;This page shows two different versions of the overview screen. My handwriting for the header for each version is basically illegible, but the intent was two different options for layout.&lt;/p&gt;
&lt;p&gt;The first one is a condensed view, showing an overview of breakfast, lunch, dinner, and snack foods, then water amounts in ounces, and additional drinks below. I didn't really show much more than this, since it would essentially just be a form to fill out to add anything to the list. I realized pretty quickly that, while this would work great for large screens or some simple overview text, to actually display contents of a category like this would probably not work terribly well. My intent was to maybe keep some form of this around for V2 as a tablet UI, I'd probably need another design that scrolls vertically more to fit the phone better.&lt;/p&gt;
&lt;p&gt;So, I made V~... I mean V2.&lt;/p&gt;
&lt;p&gt;I didn't actually show the menu to pick between these two screens, but I split meals and drinks into separate categories. These would make up the main two displays, showing all of the individual meals and leaning on the home screen from the last page in my notebook to show all of the overall stats. Tapping on any meal in the list would show full details that you could edit as needed, with a nice little &lt;code&gt;+&lt;/code&gt; menu item at the bottom to add another food item or drink item.&lt;/p&gt;
&lt;h2&gt;What I Think This Would Be Good For&lt;/h2&gt;
&lt;p&gt;So this was (in my opinion at the time) a pretty good design. The idea would be you would measure everything in your diet, and then set goals for each component.&lt;/p&gt;
&lt;h2&gt;Why I Won't Make This&lt;/h2&gt;
&lt;p&gt;Unfortunately, my friend's doctor thought otherwise, suggesting that this level of micromanagement might not be healthy. Who knew!?&lt;/p&gt;
&lt;p&gt;In all reality, this made perfect sense to me. Even if I had made this and was very proud of it, I had no intention of actually using it myself. There's no way I'd find an excuse for that. Furthermore, somebody else has already made something just like this, and now that my friend is using that instead, the weaknesses are becoming abundantly clear.&lt;/p&gt;
&lt;h1&gt;New Concept&lt;/h1&gt;
&lt;p&gt;I'm still in the process of formalizing this in my head, so this post is really only step 0 in this process, hence why the post is called &lt;code&gt;devlog0&lt;/code&gt; in Pelican. You can see it up there in the URL bar!&lt;/p&gt;
&lt;p&gt;The basic idea is, rather than just a diet app I would never use, I wanted something more generic that could actually impact someone's habits instead. This means not just food habits, but anything. I've been trying to get to bed and wake up earlier, since most people don't follow my schedule of 4AM to 11AM sleep, including Org Mode and thus my own task list.&lt;/p&gt;
&lt;p&gt;I hinted at this earlier, too, but I also want this new app to be able to include an intended margin for error. This means it needs to be able to treat 80% of the goal or 120% as 'goal met' when the accuracy is set to 20%. That's a pretty generous margin for a lot of things, but for certain habits having the flexibility to go that far could mean the difference between &lt;em&gt;very&lt;/em&gt; gradually changing a habit, and relapsing into old (or worse) behavior. Ideally, the program would see your actual result from the previous time period and adjust expectations for the next time period based on that.&lt;/p&gt;
&lt;h2&gt;Sleep Example&lt;/h2&gt;
&lt;p&gt;So, to use a more concrete example, if I want to push my sleep schedule back an hour every week give or take 20%, I would be meeting my goal if I was 12 minutes off, so if at the end of the week I got to bed at 3:12 or 2:48 rather than 3:00 I'd still be good to go. Furthermore, the app would start me at 3:12 for the next week rather than 3:00 if I fell short of the goal. This would let me adjust how quickly I adapt to this change somewhat more naturally and take the time I need to actually change my habits.&lt;/p&gt;
&lt;p&gt;Operationally, the input from me would be when I get to bed. So, for example, if I was about to turn off the lights, I would note down the time in the app, shut off the lights, and climb into bed. The app would then come up with what time I should get to bed the next night and present it to me when I wake up. If I wanted to get fancy, maybe I could even have it tell me when to set my alarm for to support this change, though that might be a bit ambitious for a generic system.&lt;/p&gt;
&lt;h2&gt;Candy Vs. Fruit Example&lt;/h2&gt;
&lt;p&gt;The other style is ratio-based. For example, someone wants to still treat themself for getting something done, and historically they've used candy. They don't think they can just hard switch to fruit, so instead they tell the app they want to get to 0% candy and 100% fruit in 2 months or so. They tell it that they want to have a 20% error margin like in the last example. As the day goes on, they tell the app each time they use a candy and each time they use an apple or a raspberry or something, and the app comes up with a ratio between the two and keeps track of how close they are to their target ratio throughout the day. It will tell them to take things slow and keep mostly candy at first, weaning them off of it slowly so that they don't have the urge to return to the candy but they don't suffer sugar withdrawal.&lt;/p&gt;
&lt;p&gt;To be clear, this example doesn't have anything to do with my friend, though the idea of ratio changes was suggested by him.&lt;/p&gt;
&lt;p&gt;I also personally don't really eat any candy, but I needed a ratio example that seemed plausible.&lt;/p&gt;
&lt;h1&gt;How I'm Going to Develop This App&lt;/h1&gt;
&lt;p&gt;This is new to me. I'm not used to developing things using a &lt;em&gt;blog&lt;/em&gt; as my motivation. That said, I've always told people that I need to work &lt;em&gt;with other people&lt;/em&gt; to do my best work. This always kept me accountable for my work, and made sure that I was meeting targets and goals as the project progressed, rather than just falling off the back of my schedule before I got off the ground with the idea. However, I recently ran into an article by &lt;a href="https://future.com/author/ben-stokes/"&gt;Ben Stokes&lt;/a&gt; via &lt;a href="diff.blog"&gt;diff.blog&lt;/a&gt; called "&lt;a href="https://future.com/author/ben-stokes/"&gt;Why Developers Are Building So Many Side Projects&lt;/a&gt;". To be clear, I had never heard about Ben Stokes before, nor had I heard about diff.blog until their bot starred this blog on GitHub, so I don't really know enough to endorse either of them just yet (though Stokes seems to have good ideas about websites and diff.blog seems well-meaning as far as I can tell). He mentioned Ben Awad, who had been posting videos to YouTube (and other platforms) about his side projects, blurring the lines somewhat between "creator" and "developer". As a musician and producer as well as a developer, I can relate to this idea.&lt;/p&gt;
&lt;p&gt;What all of this inspired me to do is use the blog like I would use a second member of a software team. I've gotten pretty good at posting here about once every other day or so, which was my goal when I transitioned to Pelican, so I figured I should try to leverage that to keep me motivated to work on this project. If I keep posting what I'm doing say, every other blog post, maybe (just maybe) I might be able to see this through to the end &lt;em&gt;on my own&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That's not to say I can't finish a project if I have an immediate need for it. I have way, &lt;em&gt;way&lt;/em&gt; more unpublished code than published, in working, polished form that I use for random things. I edit virtual choir music using Kdenlive and Ardour on my desktop (and sometimes one of my laptops), so I have a host of scripts in a virtual environment to make that easier and faster. What stops me from publishing it all is it's so &lt;em&gt;very&lt;/em&gt; dependent on my own workflow, and won't adapt to somebody else's easily. Feel free to email me (email on &lt;a href="https://gitlab.com/users/CannonContraption"&gt;my GitLab&lt;/a&gt; &lt;a href="https://github.com/CannonContraption"&gt;and GitHub&lt;/a&gt; pages) if you disagree, and maybe I'll post some of it along with operating instructions. It's well within my ability to polish this stuff up for others instead of just myself, and &lt;a href="https://gitlab.com/CannonContraption/envy-scripts"&gt;envy-scripts&lt;/a&gt; is something I published for &lt;em&gt;exactly&lt;/em&gt; this reason (even if it's not really arguably "finished" as is right now).&lt;/p&gt;
&lt;p&gt;So, watch for a few headers in upcoming devlog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Progress So Far&lt;/li&gt;
&lt;li&gt;Design Changes&lt;/li&gt;
&lt;li&gt;Still Left to Do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three headers should give an idea about how close I am to reaching my goal of making this habit tracking idea take shape. Who knows, maybe it'll work and I'll do this for other projects! On the other hand, it might only last so long before I try to bring someone else on to the project. I leave room for that to happen anyhow, but the goal is for the blog to be my partner in crime. If you're reading this, you're in on it! Thanks!&lt;/p&gt;
&lt;h1&gt;Progress So Far&lt;/h1&gt;
&lt;p&gt;So I've got a concept. Not only do I have a concept for the app, I have a concept for how I'll do my roadmaps into the future, and maybe I'll be able to launch a whole bunch of neat little utilities this way, leveraging very open development.&lt;/p&gt;
&lt;h1&gt;Design Changes&lt;/h1&gt;
&lt;p&gt;I haven't started yet, but I said this header would be here so here it is!&lt;/p&gt;
&lt;h1&gt;Still Left to Do&lt;/h1&gt;
&lt;p&gt;I need to lay out my steps to actually execute on this idea. Even if someone with more resources steals it tomorrow, I'm still going to make my own just to see how far I take it. I'm probably going to start with the backend design, make a working MVP in the Linux Shell or something to get an idea for what's going on behind the scenes, then proceed to teach myself Kotlin so I can get this into an Android app.&lt;/p&gt;
&lt;p&gt;So, stay tuned for next time, at which point (with any luck) I'll have some designs to share, and maybe even a working prototype. See you there!&lt;/p&gt;</content><category term="Tech"></category><category term="devlog"></category><category term="dev"></category><category term="android"></category></entry><entry><title>Why Oh Why Did I Fork DWM?</title><link href="https://cannoncontraption.github.io/forkdwm.html" rel="alternate"></link><published>2022-08-15T22:18:00-04:00</published><updated>2022-08-15T22:18:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-15:/forkdwm.html</id><summary type="html">&lt;p&gt;I &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;FORKED DWM!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started this fork a long time ago. In college, I wanted to change the color of the titlebar as my laptop battery's state of charge changed. I wrote this after patching a bunch of things, and after discarding some of the formatting that the &lt;a href="https://suckless.org/coding_style/"&gt;Suckless folks …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;FORKED DWM!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started this fork a long time ago. In college, I wanted to change the color of the titlebar as my laptop battery's state of charge changed. I wrote this after patching a bunch of things, and after discarding some of the formatting that the &lt;a href="https://suckless.org/coding_style/"&gt;Suckless folks use&lt;/a&gt;. I probably could have formatted it as a patch, but I had other things on my agenda as well. I'm still not done even formulating what I want this to turn into, but for now it's my personal hacked copy of DWM. Based on that last sentence, you can probably already tell I want it to be more than that.&lt;/p&gt;
&lt;h1&gt;New Features&lt;/h1&gt;
&lt;h2&gt;Color Theme&lt;/h2&gt;
&lt;p&gt;I originally ripped off colors from the Wombat theme in Emacs, then eventually moved to include that and Leuven, then made tsdh-light the default. I find light themes easier to read, personally, and Leuven was not my favorite. I didn't need the full color themes to make this work, but I did steal a few color values to make things match. There's also a hotkey by default to cycle through themes.&lt;/p&gt;
&lt;h2&gt;Battery Monitoring&lt;/h2&gt;
&lt;p&gt;This is optional, and detected on compile time. My desktop isn't looking for a battery.&lt;/p&gt;
&lt;p&gt;That said, I ended up running out of battery at inopportune times pretty much all throughout high school and college. I had warnings in KDE and GNOME, but once I switched to i3 the training wheels were off and I was writing my own stuff to monitor battery status. However, just putting a percentage at the top of my screen didn't work for me. I have ADHD, and when I'm hyperfocused I can't see the top of the screen, nor would I notice a number is lower than it should be if I &lt;em&gt;were&lt;/em&gt; looking.&lt;/p&gt;
&lt;p&gt;By the time I resolved to solve this, I had already moved to DWM. So, I put on my sysfs gloves and went hunting for the battery percentage. I do remember having to look up where the power supply information was, but finding the right file (usually &lt;code&gt;/sys/class/power_supply/BAT#/capacity&lt;/code&gt; if memory serves) wasn't hard.&lt;/p&gt;
&lt;p&gt;The next issue was how to display this. A simple percentage was no good, so instead I devised the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;State&lt;/th&gt;
&lt;th&gt;Capacity&lt;/th&gt;
&lt;th&gt;Plugged in?&lt;/th&gt;
&lt;th&gt;Color&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Full&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Discharging, Good&lt;/td&gt;
&lt;td&gt;&amp;gt; 20&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Discharging, Low&lt;/td&gt;
&lt;td&gt;&amp;lt; 20&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Charging&lt;/td&gt;
&lt;td&gt;&amp;lt; 100&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I tied its routine to read the battery capacity to its routine to redraw the whole screen. This was important to me since 20% is a lot of slop room, I don't want it to drain too much battery, but it still updates about once every minute. I also didn't want to handle ACPI events or anything crazy, just some simple monitoring.&lt;/p&gt;
&lt;p&gt;There's probably a better way, I haven't explored whether the kernel presents an inotify event when the battery percentage changes, though I'm honestly not sure how much file management code I want in my window manager. Those are separate concerns and if I wanted that, I'd implement some sort of IPC and call it a day.&lt;/p&gt;
&lt;p&gt;This is also part of the motivation for the color themes. I couldn't just stick to the defaults, since they don't have a green, yellow, or red color by default.&lt;/p&gt;
&lt;h2&gt;Extra Layouts&lt;/h2&gt;
&lt;p&gt;I added a couple of community patches. One of them is centeredmaster, the other is gaplessgrid. Both of these are excellent, you can find them on &lt;a href="https://dwm.suckless.org/patches/"&gt;DWM's Patches List&lt;/a&gt;, so it's probably just as well you go there if that's what you care about.&lt;/p&gt;
&lt;p&gt;There's one exception, though. I wrote one layout myself. I was working at EMC, and I kept waffling between whether I wanted to use i3 or DWM. i3 could display three source files side-by-side, 80 columns wide. DWM was leaner and did the layouts for me, not to mention it was easier to use with more than 2 screens. Eventually, I sat down at the bar with a beer and a laptop and wrote the tricolumn layout. It keeps more or less the same structure as gaplessgrid, but it sticks to 3 or less columns, meaning with a smaller font size your code will never have less than 80 columns. I had been using a hack with stack/master ratios and the centeredmaster layout to achieve something close to this for a while, though tricolumn is much more uniform and actually what I was looking for in the first place.&lt;/p&gt;
&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt;
&lt;p&gt;I know Emacs users will read &lt;code&gt;M-&lt;/code&gt; as &lt;code&gt;Alt-&lt;/code&gt;, but I'm using it to mean Mod key rather than meta. If you use Alt for your WM, it would be correct anyhow.&lt;/p&gt;
&lt;p&gt;I believe i3 has objectively better keyboard shortcuts for certain things. Binding close window to &lt;code&gt;M-S-q&lt;/code&gt; makes a &lt;em&gt;lot&lt;/em&gt; more sense than binding to &lt;code&gt;M-S-c&lt;/code&gt;, which requires reaching across the bottom of the keyboard. Most laptop keyboards (at least the ones I have) don't have two super keys. This means that &lt;code&gt;M-p&lt;/code&gt; is really hard to reach. Also, why is &lt;code&gt;dmenu-run&lt;/code&gt; launched by the P key, of all things? Is that supposed to be short for 'Program', or something? Maybe it's just me, but I think R would make more sense, at least that's just short for 'Run Command'. I used i3's shortcut since it's well established and I was already used to it. I suppose using D isn't perfect, because that's the name of only a &lt;em&gt;part&lt;/em&gt; of the run command system, but again it's established and does make sense. Launching &lt;code&gt;dmenu&lt;/code&gt; on its own makes no sense from a keyboard shortcut, it at least needs a menu to display and something needs to pick up its output and do something with it.&lt;/p&gt;
&lt;h2&gt;Extra Tags&lt;/h2&gt;
&lt;p&gt;I'm pretty scattered, so I have a tendency to have 2-4 different &lt;em&gt;projects&lt;/em&gt; open at once, all working more or less in parallel as my focus drifts. I also have a tendency to leave a project open to encourage myself to get back to it soon. The tags list got expanded to suit this, so it's now 13 tags rather than 9. I added the &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, and Backspace keys and moved the 'all tags' key to A instead of 0. Someday I may also add &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;"Local Platform" Detection&lt;/h2&gt;
&lt;p&gt;As part of the build script, HCDWM detects the battery (as mentioned before) and whether &lt;code&gt;alacritty&lt;/code&gt; is installed. &lt;a href="https://alacritty.org/"&gt;Alacritty&lt;/a&gt; is by far my favorite terminal emulator, but it wasn't (and probably still isn't) available in Raspbian for some reason. So, as a fallback, HCDWM will set the terminal opened on &lt;code&gt;C-S-&amp;lt;ret&amp;gt;&lt;/code&gt; to &lt;code&gt;st&lt;/code&gt; instead. I have a patched version of this, too, but it's objectively inferior to upstream at this point, and really only includes Wombat colors and the alpha patch. I don't use it anymore in favor of Alacritty.&lt;/p&gt;
&lt;h2&gt;make localinstall&lt;/h2&gt;
&lt;p&gt;I added one final additional feature, local installation. There's now a second local prefix target that you can choose to use if you are like me and tend to occasionally experiment with config.h. Not needing to reinstall to the system avoids a lot of password typing, and also ties your configuration to &lt;em&gt;you&lt;/em&gt; rather than the system. This sits better with me, philosophically.&lt;/p&gt;
&lt;h1&gt;Code Issues&lt;/h1&gt;
&lt;p&gt;I mentioned I don't stick to the Suckless project's ideas of code style. I have my own, which &lt;a href="https://cannoncontraption.github.io/code-style-and-how-to-write-for-reading.html"&gt;I've posted about already&lt;/a&gt;, though that post is pretty old and my writing has improved since then. I've also refined the style somewhat.&lt;/p&gt;
&lt;p&gt;Beyond that, though, I take issue with their organization structure. Their code simply alphabetized all of their functions in one great list. This works, sure, but it means I'm jumping all over the file just to be able to read about one subsystem. I personally prefer to group like functions together where I can, sometimes even resorting to &lt;code&gt;#include&lt;/code&gt;s to get the job done. For HCDWM, I moved the layouts into layouts.c and colors into colors.c (since this was my own patch). This also removed a file or two from a patch and instead put it into a place where it can sit with the other components like it. Eventually I'll probably split it a little more.&lt;/p&gt;
&lt;p&gt;I also mentioned single letter variables. I don't really agree with the Linux code style guide on one thing- they encourage overly brief abbreviations for naming*. In many (maybe even most) situations this probably isn't a problem, but there's a lot of overlap between different causes that use the same variable name since they stuck to single letters. They would absolutely condemn this decision, but I'm in the process of renaming things so it's easier to hack. I don't care about the file being perfect and clean, I want something I can play with and understand at a glance without deep Xorg knowledge. DWM is so close to this, but their names make it more difficult than it needs to be.&lt;/p&gt;
&lt;h1&gt;Philosophy Differences?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://suckless.org/philosophy/"&gt;The Suckless team lays out their philosophy rather clearly.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Actually, I agree with the basic idea. Software in today's world is too big, and the duct tape is too deep in the components that make it up to really be usable. Programming with small parts and letting the shell do the glue part (or letting shell be the duct tape, if you'd rather) is fine by me. I can see that, mess with it, and change it if I feel like it. It's open, and much less likely to segfault when someone mishandles &lt;code&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's also &lt;em&gt;still&lt;/em&gt; a relative lack of polished software for a lot of things targeting advanced users. This is partly on purpose. We don't need people to write software for the gurus, since they write their own. The issue is when too much needs to be rewritten, it chases people off who would otherwise dive that deep if they had, for example, DWM and dmenu. These projects have helped me to make the systems I like, and I very much agree with their philosophy thus far.&lt;/p&gt;
&lt;p&gt;Actually, I agree with the idea of ultimate minimalism, too. If one day I can make HCDWM be a framework as bare or more bare than upstream DWM with a plugin or patch system, I will do it. The biggest blocker is time.&lt;/p&gt;
&lt;h1&gt;So Then Why?&lt;/h1&gt;
&lt;p&gt;Honestly, I wanted something a little more hackable, but really I just wanted to make some changes to DWM and make it my own. I'm not ruling out these features becoming patches (aside from the style rewrites, I wouldn't insult them so much as to ignore their (frankly valid) preferences like that). Eventually, I'm aiming to have a more hackable base that's &lt;em&gt;like&lt;/em&gt; DWM, but includes a better patch system and of cousre the naming changes. At any rate, time will tell what I'll make of this, but for now, I have a fork of DWM born from some tweaks I wanted to make.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* That's not saying I condone their extreme example either, the solution is in the middle somewhere&lt;/p&gt;</content><category term="Tech"></category><category term="desktop"></category><category term="code"></category><category term="linux"></category></entry><entry><title>Desktop Configuration Management with Ansible</title><link href="https://cannoncontraption.github.io/ansible.html" rel="alternate"></link><published>2022-08-13T13:04:00-04:00</published><updated>2022-08-13T13:04:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-13:/ansible.html</id><summary type="html">&lt;p&gt;If you read some of my other articles, you might be able to guess that my systems are all set up in a pretty unique and custom way. &lt;a href="https://cannoncontraption.github.io/forkdwm.html"&gt;I use my own window manager&lt;/a&gt;, a copy of Emacs that's heavily customized, I use my own photo system, &lt;a href="https://cannoncontraption.github.io/making-bash-prompt-you-with-information.html"&gt;while this post …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you read some of my other articles, you might be able to guess that my systems are all set up in a pretty unique and custom way. &lt;a href="https://cannoncontraption.github.io/forkdwm.html"&gt;I use my own window manager&lt;/a&gt;, a copy of Emacs that's heavily customized, I use my own photo system, &lt;a href="https://cannoncontraption.github.io/making-bash-prompt-you-with-information.html"&gt;while this post is hilariously out of date, I do have my own shell prompt setup,&lt;/a&gt; &lt;a href="https://cannoncontraption.github.io/fswap.html"&gt;I manage my files like virtual memory swapping&lt;/a&gt;, and I have a dedicated rack to house my laptops. If there isn't a link to one (or more) of these things, I'm probably going to blog about them later. I'll try to remember to update this post as I do that (though no promises). Needless to say, with such a customized and specific desktop setup, I want a way to manage it all as seamlessly as I can.&lt;/p&gt;
&lt;p&gt;So, that brings a lot of issues. I basically want every computer I own to behave as close to identically to every other one as I can. That means the same software, the same configuration, the same scripts, the same filesystem structure. I've already basically solved the file sharing part (post forthcoming at some point, will link it in my list above if I remember), so at least I don't have to solve that. However, until recently the dream of every machine behaving like every other one went practically totally unrealized.&lt;/p&gt;
&lt;p&gt;I've solved it now, and all of my machines behave the same. I tried a lot of stuff that didn't work first, however.&lt;/p&gt;
&lt;h1&gt;Avoid These Setups&lt;/h1&gt;
&lt;h2&gt;SkyDrive/DropBox/GDrive/CloudStation&lt;/h2&gt;
&lt;p&gt;When I was in college, I had a desktop and a laptop at first. They were for a combination of schoolwork and gaming, though admittedly the iGPU in the laptop could really only run Team Fortress and not much else.&lt;/p&gt;
&lt;p&gt;Since I wanted to use my desktop for schoolwork, though, I had to have a way to take what I did in class (on the laptop) and push it to the desktop. My first solution was to just use off the shelf file sync services. I had been using Google Drive in high school, but back then I was using Google Docs and such, and without a desire to use these (and without a great amount of Linux support at the time, except for mounting the drive as a share via GNOME) I had little reason to keep doing this.&lt;/p&gt;
&lt;p&gt;I moved to DropBox, and quickly ran out of storage space.&lt;/p&gt;
&lt;p&gt;I then moved to my dad's server and Synology CloudStation, but it didn't have a sync button so I'd lose my work all the time since CloudStation had to notice files had changed and actually sync them by itself before I'd have them on the other computer. This made fetching my homework in class really pretty impractical, so I ditched this, too.&lt;/p&gt;
&lt;p&gt;I think I briefly toyed with using SkyDrive (possibly renamed to OneDrive at this point, I honestly don't remember) but again I needed Linux support. I was experimenting with Windows on my laptop back then, though, so it already was included. Early Windows 10 was even too slow for me, though, so I put Linux back on the laptop before my first semester was out, so OneDrive is now a time capsule for me.&lt;/p&gt;
&lt;p&gt;Files I needed for configuration were usually just left in the CloudStation folder or whatever, and I'd point the individual applications I was using to them as needed. At this point, I was still using KDE, so my requirements weren't as complicated.&lt;/p&gt;
&lt;h2&gt;RSyncCStation&lt;/h2&gt;
&lt;p&gt;The first shell script I introduced into daily usage was &lt;code&gt;rsynccstation&lt;/code&gt;, which lives on now as &lt;code&gt;rscs&lt;/code&gt;. The original version was actually the longer command, and I hadn't learned tab completion yet so I spent a lot of time typing it.&lt;/p&gt;
&lt;p&gt;Basically, I spun up a Pi in my dorm room and just rsync'ed the CloudStation folder from when I was using CloudStation to and from the pi, rather than my dad's server. The script itself was about two lines long, one to get files, and one to put them.&lt;/p&gt;
&lt;p&gt;This directory got big fast, so, over time, I ported rsynccstation to Python (I guess I was afraid of shell?) and made it support different folder targets. One of them was a folder I called "Configs" at the time, since I thought the term "dotfiles" sounded dumb back then. That was my solution.&lt;/p&gt;
&lt;p&gt;I also used this as my file sync solution for schoolwork, but more details on the tool can wait for now. It had other benefits, and I think I may still use it in one or two places. &lt;a href="https://github.com/CannonContraption/rsynccstation"&gt;You can find rscs here&lt;/a&gt; and &lt;a href="https://gitlab.com/CannonContraption/rscs2"&gt;here for the Python version&lt;/a&gt;. I recommend the Shell version, I rewrote it in 2019.&lt;/p&gt;
&lt;p&gt;Eventually, through a lot of iterations, I ended up with a directory in &lt;code&gt;~/.config/vanilla/&lt;/code&gt; containing templates for every piece of configuration I would need. I briefly had a shell script that would install it all for me, but it was slow and would duplicate effort every time I changed something, so I took to just imaging my &lt;code&gt;~&lt;/code&gt; every time I reimaged a computer, then just restored it when I was done. This was horribly lazy and meant that some machines developed very pronounced quirks. I would forget to symlink certain things all the time, and sometimes I would copy something since the program would modify the configuration on its own with things like hostname information. Emacs especially would write to .emacs, so that wasn't a symlink.&lt;/p&gt;
&lt;p&gt;Any of this sound clumsy to you? It's probably at least as bad as you think, since during this time I started using i3 for a time, then eventually forked DWM so I could patch it to high hell so I wouldn't run out of battery in class and could show more code on a 1080p display, and so on. Again, post coming at some point, probably.&lt;/p&gt;
&lt;p&gt;This pile of configuration wasn't getting any smaller.&lt;/p&gt;
&lt;h1&gt;Switch to Ansible&lt;/h1&gt;
&lt;p&gt;My first time playing with Ansible was with the church I've attended for pretty much my whole life. We had an old office PC that I had needed to reimage a few times due to random OpenSuSE bugs (and my own recklessness just as often as not) so I set up a basic playbook to check for and install packages as needed. I was pretty happy with it, and always intended to expand it to include user creation and configuration steps. I didn't manage to finish before the pandemic hit, however, so I pretty much forgot about it.&lt;/p&gt;
&lt;p&gt;Later on, however, I joined Kitsune Security. We had ambition, and we wanted to back that up with solid technical frameworks as well. This meant that we wanted to be able to just roll out a copy of one of our corpnet VMs at any point based on some existing, known-good configuration. Ansible was the frontrunner in this conversation since we all had some exposure to it.&lt;/p&gt;
&lt;p&gt;This got the gears turning in my head again, and so I began looking into all of the components I needed set up for a working desktop experience. I found some guides online that talked about how to do certain things, but I ended up looking up a lot of it myself. So, I wanted to make this post to document where I came from, and describe how to skip all of that pain and just start with a solid foundation.&lt;/p&gt;
&lt;h1&gt;Common-Sense Recommendations&lt;/h1&gt;
&lt;p&gt;I'm going to be creating a Git repository to house everything in this walkthrough. Please, for the love of everything good in this world, &lt;strong&gt;&lt;em&gt;DO NOT STORE CREDENTIALS ON GITHUB!&lt;/em&gt;&lt;/strong&gt; You probably know better, but I'm putting this here just in case. If you follow my guide, your configuration may expose how your computer works to the web, but it shouldn't also expose any passwords. Don't store credentials (public/private keys included) in anything that syncs between machines.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt; use Git. This is mostly meant as a description of how to use Ansible, but I'm assuming you have more than one machine to sync between. If you don't, that's perfectly fine. This will still make a good starting point for reimaging from scratch if you ever need to, but even then putting your changes in Git will let you bisect your configuration files down the line to figure out where and why you introduced a bad change. This was basically the one feature I wanted that made me regret using Rsync pretty thoroughly for this job.&lt;/p&gt;
&lt;p&gt;If you have your own server (or even just a spare Pi) use this first for Git hosting. See &lt;a href="https://git-scm.com/book/en/v2"&gt;the Git Book&lt;/a&gt; if you want to learn how to do this. Same goes for anything else related to Git, if you choose to follow my last piece of advice I'm going to expect you already know how to use Git to some extent. If you don't, you'll benefit from learning it. Even non-technical things like writing benefit from Git, so time spent learning it is time well spent, if you ask me.&lt;/p&gt;
&lt;p&gt;At some point I may create a playbook to install &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;HeadCannon DWM&lt;/a&gt;, &lt;a href="https://alacritty.org/"&gt;Alacritty&lt;/a&gt;, &lt;a href="https://gitlab.com/CannonContraption/envy-scripts"&gt;Envy Scripts&lt;/a&gt;, &lt;a href="https://gitlab.com/CannonContraption/fswap"&gt;FSwap&lt;/a&gt; and so on like I do, but I haven't done it yet. Since I don't have a concrete example like this, you can treat this post like a "how-to" for people in my position when I got started. I had a pretty complete setup already that I wanted to import into Ansible, and nobody seemed to have a single place with a simple example of how to do the things I wanted. Obviously you can find all of this information separately on your own, I did, but I would have preferred it all in one place. Create the world you want to live in, they say.&lt;/p&gt;
&lt;h1&gt;Basic Structure&lt;/h1&gt;
&lt;p&gt;Ansible has two main concepts we're concerned with, playbooks and tasks. If you're a seasoned Ansible user, you can probably tell me how I'm leaving out so many features and important terms, but honestly I really only care about this operationally, and this is a very basic use case.&lt;/p&gt;
&lt;p&gt;Ansible has a few types of tasks we're worried about. They call these "modules", and it should be pretty clear why. As a quick disclaimer, I'm doing this for a Fedora setup, but you should be able to adapt this to another distro, it's not like Ansible is RedHat only or anything. Because of this, we're going to use the modules copy, command, file, dnf, git, and make. You probably won't need all of these, so rather than get prescriptive about how your desktop is set up, I'm going to assume you have something you already want to set up. I'll also briefly touch on Apt in case you run Raspbian, too (Fedora on a Pi 4 isn't here, as of writing). There's a generic "package" task as well, but I avoid it since each distribution uses its own package names. Filtering by package manager doesn't solve the problem completely, but it makes it much less likely you'll ask for &lt;code&gt;fonts-firacode&lt;/code&gt; rather than &lt;code&gt;fira-code-fonts&lt;/code&gt;, just to list a Debian/Fedora example.&lt;/p&gt;
&lt;p&gt;You can also import tasks from other YAML files into your playbook. This let me create a different "playbook" for my Raspberry Pis running Raspbian, just replacing the YAML file for packages with one specific to the pi. The configuration is otherwise the same. While this does introduce the risk of missing some packages, the names will always be correct for Raspbian this way, so it's the solution I've opted for.&lt;/p&gt;
&lt;h1&gt;Tutorial&lt;/h1&gt;
&lt;h2&gt;Make a Playbook&lt;/h2&gt;
&lt;p&gt;These are the only two boilerplate lines you need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- hosts: localhost
  tasks:
  - list your tasks here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For my use case, this is just a couple of import_tasks lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- hosts: localhost
  tasks:
  - import_tasks: tasks/fedora-packages.yml
  - import_tasks: tasks/desktop-configuration.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Doing it like this lets you split different components off in interesting ways. I specified in this example the files &lt;code&gt;fedora-packages.yml&lt;/code&gt;, meaning package installation for Fedora Linux, and &lt;code&gt;desktop-configuration.yml&lt;/code&gt; meaning install the configuration I want on my desktops and laptops, not my server. To make a server playbook, I could keep the exact same list of packages and just change the &lt;code&gt;desktop-configuration.yml&lt;/code&gt; include to be &lt;code&gt;server-configuration.yml&lt;/code&gt; to install specifically just server stuff. I do recommend putting your sub-playbooks in a separate directory (like &lt;code&gt;tasks/&lt;/code&gt; in my example) so that you don't mistake them for top-level configuration templates.&lt;/p&gt;
&lt;h2&gt;DNF Task&lt;/h2&gt;
&lt;p&gt;Again, I recommend putting all of these in their own file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: install some editors
  become: true
  dnf:
    name:
    - vim
    - emacs
    - kate
    - geany
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So in this example, we want to install some editors. There's a few things going on here.&lt;/p&gt;
&lt;p&gt;First of all, we named the task with the type of thing we're trying to install. This shows up in the terminal output when the playbook is run. I do recommend splitting packages into groups like this, it helps with troubleshooting when something goes wrong down the line. However, making another task for every package is tedious, so doing it like this also saves some time by bundling like packages together.&lt;/p&gt;
&lt;p&gt;Secondly, there's that &lt;code&gt;become: true&lt;/code&gt; line. This tells Ansible it needs to become &lt;code&gt;root&lt;/code&gt; in order for this task to run correctly. It's Ansible's version of &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we listed our packages under &lt;code&gt;dnf.name&lt;/code&gt;. The &lt;code&gt;name&lt;/code&gt; property is already a list, making our job easier.&lt;/p&gt;
&lt;h2&gt;Apt Task&lt;/h2&gt;
&lt;p&gt;This works &lt;em&gt;exactly&lt;/em&gt; like the DNF task for our purposes, just replace &lt;code&gt;dnf:&lt;/code&gt; with &lt;code&gt;apt:&lt;/code&gt; and use it the same way.&lt;/p&gt;
&lt;h2&gt;Copy Task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Copy LMMS Configuration
  copy:
    src: conf/lmmsrc.xml
    dest: /home/yourusername/lmmsrc.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the most straightforward type of copy, no permissions management included. In this case, I copied my LMMS configuration to my &lt;code&gt;~&lt;/code&gt; since it doesn't store its configuration in an XDG location like &lt;code&gt;~/.config&lt;/code&gt;, which I much prefer.&lt;/p&gt;
&lt;p&gt;Note that I'm using absolute paths. This is a weakness of Ansible copy. It's meant to work in server installations where you might need to reconfigure tens or hundreds of servers at once, and so it does not read anything from the environment, other than just its own directory. That means we can refer to local files in the same place as the playbook, but any path we want to copy those files to &lt;em&gt;must&lt;/em&gt; be an absolute path. If your usernames aren't already consistent across machines, now is a good time to fix that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;- name: Copy ZSH Configuration&lt;/span&gt;
&lt;span class="x"&gt;  copy:&lt;/span&gt;
&lt;span class="x"&gt;    src: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.src&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    dest: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.dest&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    mode: 0600&lt;/span&gt;
&lt;span class="x"&gt;  with_items:&lt;/span&gt;
&lt;span class="x"&gt;    - { src: conf/.zshrc, dest: /home/yourusername/.zshrc }&lt;/span&gt;
&lt;span class="x"&gt;    - { src: conf/.zprofile, dest: /home/yourusername/.zprofile }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a little trickier. We want to copy everything related to ZSH in one task, so we use Ansible's "with_items" syntax. We're creating a small data structure that we can then refer to in our copy command, and then all we have to do is just type in the source and destination for each file, and the files will be copied the same way in one step.&lt;/p&gt;
&lt;p&gt;I also included a permissions mode here. I use this pretty much only for my SSH configuration, but didn't want to type another example. You don't need a &lt;code&gt;with_items&lt;/code&gt; list to use the mode flag, and you don't need the mode flag to use &lt;code&gt;with_items&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Command Task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Disable ethernet autoconnect
  command: nmcli c mod eth0 connection.autoconnect no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one is straightforward. Here I used it to run nmcli to set eth0 to not auto-connect, but you could run essentially any command here. There's no shell, so if you need one you'll need to enclose your command in &lt;code&gt;sh -c&lt;/code&gt; or something like that. Remember that you can use &lt;code&gt;become: true&lt;/code&gt; if you need to run a command as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;File Task&lt;/h2&gt;
&lt;p&gt;Interestingly, I only use this to make directories, not files. However, its purpose is to do both.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;- name: Create config directories&lt;/span&gt;
&lt;span class="x"&gt;  file:&lt;/span&gt;
&lt;span class="x"&gt;    path: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item.path&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    state: directory&lt;/span&gt;
&lt;span class="x"&gt;    mode: &amp;#39;0700&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;  with_items:&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.ssh }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/git }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/i3 }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/git }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.config/sway }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local/state }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local/share }&lt;/span&gt;
&lt;span class="x"&gt;    - { path: /home/yourusername/.local/share/gnupg }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a bunch of skeleton directories in your home folder using the same &lt;code&gt;with_items&lt;/code&gt; syntax as before. There may be a more elegant way to do this (such as automatically making parent directories), but it's fast enough and I haven't had to touch it since I first ran it. My list is much (much) longer than this. It reads kind of like the output of &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Git Task&lt;/h2&gt;
&lt;p&gt;My WM &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;exists in GitLab&lt;/a&gt; but not in a package or binary format. That means I need to clone it and build it to use it. First step is cloning. Ansible will update a Git repository that already exists (and even update remotes information!) if it already exists with the &lt;code&gt;update: yes&lt;/code&gt; parameter. You can also set the ref with the &lt;code&gt;version: refname&lt;/code&gt; syntax, in this case I have it check out the &lt;code&gt;jim&lt;/code&gt; branch (which is my devel branch).&lt;/p&gt;
&lt;p&gt;In my case, this is doubly useful since changes to my WM get synced across machines each time I push to the repository and re-run the playbook.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Clone hcdwm
  git:
    repo: https://gitlab.com/CannonContraption/headcannon-dwm.git
    dest: /home/yourusername/dwm
    update: yes
    version: jim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Make Task&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- name: Compile/install hcdwm
  make:
    chdir: /home/yourusername/dwm
    target: localinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I used the target &lt;code&gt;localinstall&lt;/code&gt;, since I made one for my window manager. That builds it, then installs it to ~/.local/bin skipping the need for &lt;code&gt;root&lt;/code&gt; access. If you need &lt;code&gt;root&lt;/code&gt;, just add the &lt;code&gt;become: true&lt;/code&gt; line as with elsewhere. This is equivalent to changing to the &lt;code&gt;/home/yourusername/dwm&lt;/code&gt; directory and then executing &lt;code&gt;make localinstall&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Running your playbook&lt;/h2&gt;
&lt;p&gt;The last thing I need to describe is how to run the finished playbook. If your main playbook is &lt;code&gt;desktop.yml&lt;/code&gt;, you would run this to execute it as described here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ansible-playbook -K ./desktop.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The option &lt;code&gt;-K&lt;/code&gt; tells Ansible that you're using the &lt;code&gt;become&lt;/code&gt; feature and it needs to ask for a password. I believe this gets stored in memory while the playbook runs, but I'm not an Ansible developer so it's probably just as likely they spawn a process as &lt;code&gt;root&lt;/code&gt; right at the start and discard the password, or something along those lines. I'm really not sure.&lt;/p&gt;
&lt;h2&gt;What to Check In To Git&lt;/h2&gt;
&lt;p&gt;So if you followed this guide closely enough, you will probably end up with a directory structure like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;|- .gitignore
|- desktop.yml
|- pi-desktop.yml
|- tasks/
|  |- fedora-packages.yml
|  |- pi-packages.yml
|  |- desktop-configuration.yml
|- conf/
   |- .zshrc
   |- .zprofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should check all of these things into Git. If you store credentials in your zshrc, clean them out first using a tool like Pass, and use its integrated Git support to clone your (now encrypted) credentials across machines. Don't upload these to GitHub either, since it only takes decrypting them to read the passwords, but if you have a server this can be your central Git storage for Pass.&lt;/p&gt;
&lt;h2&gt;Never Check These into Git&lt;/h2&gt;
&lt;p&gt;If you have a Wireguard configuration file, add it to your .gitignore. Wireguard won't let you configure two physical machines with the same IP address, and you'll certainly cause problems if two machines share an IP &lt;em&gt;and&lt;/em&gt; a private key. Copy this separately for each machine. Ansible will tell you if you forgot this.&lt;/p&gt;
&lt;p&gt;If you intend to install GPG keys, treat these like WireGuard configuration files. These are secrets, handle them with care. Ansible will remind you if you forget them. The extra manual copy is (in my opinion, anyhow) worth the extra time.&lt;/p&gt;
&lt;h1&gt;Advantages over a Shell Script&lt;/h1&gt;
&lt;p&gt;Ansible won't touch things that don't need updating. This means if you already have all of the packages in your package list installed, it's going to very quickly just verify that and move on. The same goes for file copies, it won't copy a file that's the same between source and destination, etc. similar to &lt;code&gt;cp -u&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Learning Ansible, even in a limited way like this, should be enough so that if you ever end up with a wide array of home servers or VMs, you now have the tools to just image them to behave as you expect from the moment you spin them up, requiring nothing but an IP address. You can also use your own playbook as a springboard into more advanced Ansible usage.&lt;/p&gt;
&lt;p&gt;Shell scripts also blow right past programs that fail. If one of the packages you wanted to install doesn't exist, it's hard to know that unless you've explicitly written error checking for every command in your script. That gets tedious pretty quickly.&lt;/p&gt;
&lt;p&gt;Ansible playbooks are also slightly easier to read. Because they're highly structured &lt;em&gt;tasks&lt;/em&gt; to perform, a list of packages can look like a list rather than a really long command, and a long &lt;code&gt;cp&lt;/code&gt; command won't have a &lt;code&gt;-ruvZL&lt;/code&gt; hidden somewhere in the middle because you forgot to add it halfway through and didn't bother to put your cursor back to the start*.&lt;/p&gt;
&lt;p&gt;Since it only asks one question, 'What is your root password?', you don't have to babysit it as it runs. There's never going to be a surprise command that takes too long making &lt;code&gt;sudo&lt;/code&gt; time out and ask for your password again.&lt;/p&gt;
&lt;h1&gt;Chef? Puppet?&lt;/h1&gt;
&lt;p&gt;There are probably more of these. I've never used them or really seen the need to learn them. Maybe this is short-sighted, but Ansible has served me fine, so I've never needed to see what these tools are like. There will probably come a day when I learn one or both of these (and probably something else that does the same job, too), but it hasn't come yet. If you're debating Ansible vs Puppet vs Chef, just pick one. Assuming the other two are similar like I think they are, you're probably more likely to come out ahead just for having tried it. Hey, speaking of which, I have a great guide on how to use Ansible for this sort of thing, maybe you'll find it useful!&lt;/p&gt;
&lt;p&gt;It's also worth noting here I'm not an IT professional, I'm a software developer by trade. I do maintain my own things, but I'm very much on the homelab side of things rather than the professional side.&lt;/p&gt;
&lt;h1&gt;Is This Worth It for You?&lt;/h1&gt;
&lt;p&gt;If you skipped to the end wondering how long the post was and arrived here, welcome! If not, thanks for reading! Hopefully you got something out of this.&lt;/p&gt;
&lt;p&gt;If you're a GNOME or KDE user and you stick to the defaults, you probably don't need a solution that uses all of these tasks. If you're someone who doesn't do much more than check email and edit text documents, you probably also don't need them.&lt;/p&gt;
&lt;p&gt;If you constantly forget about some random program you always use every time you re-install your OS, try making a simple playbook! It's not that hard and will save a lot of frustration next time you're offline on an airplane looking for it. Don't go overboard if you don't want to, though. If your desktop settings don't matter to you, don't take them with you!&lt;/p&gt;
&lt;p&gt;If you're like me, and you have heavy customizations in place on your desktops and laptops, try Ansible. If my own story is any indication, it's probably going to be worth it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* I've been there at least once, though not with that &lt;em&gt;exact&lt;/em&gt; set of options.&lt;/p&gt;</content><category term="Tech"></category><category term="ansible"></category><category term="linux"></category><category term="code"></category><category term="desktop"></category><category term="shell"></category><category term="server"></category><category term="scripting"></category></entry><entry><title>Managing Tasks with Org Mode</title><link href="https://cannoncontraption.github.io/taskmanagement.html" rel="alternate"></link><published>2022-08-11T23:33:00-04:00</published><updated>2022-08-11T23:33:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-11:/taskmanagement.html</id><summary type="html">&lt;p&gt;I have ADHD. Personally, I see this as somewhat of a mixed bag, and I know for sure a number of other people with ADHD see it the same way. It's not so much an inability to focus as it is a difference in how focus is achieved. It means …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have ADHD. Personally, I see this as somewhat of a mixed bag, and I know for sure a number of other people with ADHD see it the same way. It's not so much an inability to focus as it is a difference in how focus is achieved. It means that while I may appear scattered and lacking focus in a lot of areas, I also have the ability to hyperfocus on things that interest me in a way that seems dogged and unbreakable to people without ADHD.&lt;/p&gt;
&lt;p&gt;There's still a weakness in this, though, since things like cleaning the bathroom can fall off the back end or get half-finished, so it's useful to have some additional structure. In order to accomplish this, I have a task system. It's not some magic bullet, and I do forget to keep it up-to-date from time to time, but the difference between me with and without the task list is dramatic.&lt;/p&gt;
&lt;h1&gt;What I Used to Do&lt;/h1&gt;
&lt;p&gt;I used a large number of to do apps in high school and college, but for the most part I settled on whatever Google Calendar offered. In general, the experience was... fine, though not especially impressive. I forgot about it regularly, and Google seemed to too, which made it that much harder to stick to.&lt;/p&gt;
&lt;p&gt;I briefly used a variety of different Linux-based task managers, but they all come with a central problem- none of them sync very easily between machines, and they all require that you're basically at your desk to use them. I have a solution for this &lt;em&gt;now&lt;/em&gt;, but at the time I didn't.&lt;/p&gt;
&lt;p&gt;I briefly also used Org mode. However, it didn't stick for very long. I'll get back to this, because it eventually did stick.&lt;/p&gt;
&lt;p&gt;The final solution I tried before what I use now is TaskWarrior. This actually stuck for a while, and I could have kept using it had I figured out how to integrate it with Git at the time.&lt;/p&gt;
&lt;h1&gt;TaskWarrior Pros and Cons&lt;/h1&gt;
&lt;h2&gt;Pros&lt;/h2&gt;
&lt;p&gt;TaskWarrior is an amazing tool. If you use it, you probably know what I mean. It includes a host of features that make complicated tasks and projects easy to break down.&lt;/p&gt;
&lt;p&gt;TW supports dependency management, projects with set goals and subtasks, along with progress tracking and burndown charts, hooks for making things in the system happen when a task is modified*, and colored, themeable terminal output. There's a separate project for client/server stuff, and a number of other supporting applications.&lt;/p&gt;
&lt;p&gt;When I was a partner in Kitsune Security, we used TaskWarrior internally as our company-wide task management system. This was long after I had transitioned myself to Org-Mode, but everyone else was familiar with TW only. We managed multiple users by adding a git hook to everyone's clients. That way, whenever a change was made to the task list it would automatically get added, then committed to the Git repository. Whenever the list was queried, it would perform a Git pull before showing the list. This meant that it effectively worked like Trello or Monday.com, except there was no need for another browser tab to read and manage the list.&lt;/p&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;p&gt;OK, so here's why I stopped using TaskWarrior myself.&lt;/p&gt;
&lt;p&gt;First and foremost, I hadn't used the hooks system with Git yet**. This meant I was using taskd, the task server. This worked OK, but had some serious drawbacks when actually scaled across machines. First of all, it had no conflict resolution abilities &lt;em&gt;at all&lt;/em&gt;. This meant that if two different clients made changes, the changes from one client could just be lost in favor of the copy of the tasks from the other machine. This led to data loss. Ultimately, this is why I moved on and everything else is just little annoyances that I dealt with otherwise.&lt;/p&gt;
&lt;p&gt;There was no quick and convenient way to type long-form in a task. Admittedly, most of the time I don't use this. From time to time, however, I have a lot of notes to add to a task. I ended up just keeping notes separate from TW, essentially splitting my task system into multiple parts.&lt;/p&gt;
&lt;p&gt;Dependencies were also clunky. It is easy and logical to start by outlining a goal, then all of the individual tasks related to the goal as they come to mind. In order to not have to repeatedly edit tasks to correct the dependency tree, you would have to input all of the smallest tasks first, then write the larger umbrella ones with all of the dependencies listed by number in one line in order to model a complex project. This means a lot of extra time spent reading through lists to see what number went with which task. The most reliable way to do this was to model your project on a piece of paper first, then type it in. However, at that point your task list is a separate chore to maintain outside of just project planning.&lt;/p&gt;
&lt;p&gt;The burndown chart was a nice motivator at first, but as time wore on it became more and more useless. Past a certain scale, your open tasks are completely dwarfed by closed tasks, and all you see is a flat line of open tasks with a big, giant sea of closed ones. You could scope this view to the past month to get a better view of things, but without some fairly specific filtering, it wasn't super useful.&lt;/p&gt;
&lt;p&gt;Recursion in TaskWarrior is garbage. It works, but only for a narrow, very basic "make this task every &lt;em&gt;x&lt;/em&gt; days" sort of thing. If you missed breakfast one day and it was your task, the task doesn't go away the next day. You need to make breakfast &lt;em&gt;every&lt;/em&gt; day, and do it twice when you miss a day. Frankly, this is dumb.&lt;/p&gt;
&lt;p&gt;There was probably more, but honestly all but the first of these is more of a nitpick than anything, I'm not trying to put you off TaskWarrior, it's a fabulous tool that I (at this point) do actually recommend, it's just not what I use for these reasons.&lt;/p&gt;
&lt;h1&gt;Switch (back) to Org Mode.&lt;/h1&gt;
&lt;h2&gt;First Attempt, and Why it Failed&lt;/h2&gt;
&lt;p&gt;First of all, Org mode is not a calendar. It doesn't do calendar things very well. For that matter, it's not really a phone thing, either. If you want tasks on your phone, look literally anywhere else.&lt;/p&gt;
&lt;p&gt;I also stuck to a rather narrow subset of features, pretty much just the standard "TODO" and "DONE" features. I used Org Mode for notes both before and after switching to TaskWarrior, in spite of moving off of it for task management. Ultimately, the tool didn't stick this first time. I honestly can't even recall that many details, it was so... unimpactful.&lt;/p&gt;
&lt;p&gt;Recursion was one area where I was impressed, but I didn't use it enough for that to make sense, even.&lt;/p&gt;
&lt;h2&gt;Post-TaskWarrior&lt;/h2&gt;
&lt;p&gt;TaskWarrior, for all of the issues I had with it, got me thinking about my tasks differently from every other tool I tried. I thought of them as atomic "items" that were actionable, rather than big, vague notions of projects I need to start at some point way in the future. This was critical to making my next experience with Emacs work.&lt;/p&gt;
&lt;p&gt;Second was habit tracking, but I'll get to that later.&lt;/p&gt;
&lt;p&gt;Org-mode also solved another big issue I had, since integrating it with Git was as easy as putting all of my Org files in a directory and running git init in the same directory. They cooperated fine, and while I do still need to manually commit/push, I could script that to happen when I close Emacs, for example. Easy stuff, no hidden directory with my tasks in it.&lt;/p&gt;
&lt;p&gt;Org is also readable outside of Emacs. It's not as nice, but it works. This means if I need to change something on the road, it works. Not super cleanly, admittedly, but it works.&lt;/p&gt;
&lt;p&gt;The recursion code is also good. It's not perfect, since the syntax is hard to remember, but you can make recurring items reappear based on a number of criteria, beyond just making another instance of a task appear every so often. The syntax for this is hard to remember, though, so I'll describe it here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SCHEDULED: &amp;lt;2022-08-11 +1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is basic recursion. This schedules the task every month, just like TaskWarrior would. It starts today, as of writing. You can do the same with a deadline by writing &lt;code&gt;DEADLINE&lt;/code&gt; rather than &lt;code&gt;SCHEDULED&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SCHEDULED: &amp;lt;2022-08-11 ++1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you miss this one, it won't pile up, but it'll still be scheduled in the next interval. So, if I want to make lunch for the week every Monday, if I miss a week I won't be asked to make two weeks of lunches, but I'll still get asked the next Monday.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SCHEDULED: &amp;lt;2022-08-11 .+1m&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This schedules the next one to one month after it's marked DONE. If I wanted to clean the garage every month, it would not pester me to do it again if it hadn't been a month yet since last time, even if last time was late.&lt;/p&gt;
&lt;p&gt;For recursion, this is enough for me. However, if you had more corner cases, you could probably extend the recursion system using some elisp. See my &lt;a href="https://cannoncontraption.github.io/lisp-recursive-glory.html"&gt;article on Lisp&lt;/a&gt; for why you shouldn't be afraid of this option. Bear in mind, however, this is one of my earlier articles before I was as practiced at expressing myself.&lt;/p&gt;
&lt;p&gt;Also, Org Mode supports top-down task creation. This means you can start with the biggest tasks, and then drill down logically. Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* TODO Fix the bike
** TODO Replace the chain
*** TODO buy chain
*** TODO clean chain
*** TODO re-lube new chain
*** TODO install lubed chain
** TODO replace tires
*** TODO buy new tires
*** TODO buy new inner tubes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...and so on. I don't have to specify buying new tires and inner tubes, then add the task to replace the tires on the bike, specifying the other two as dependencies. You can project plan from right within your task system.&lt;/p&gt;
&lt;p&gt;OK, you ready for the big two features?&lt;/p&gt;
&lt;h1&gt;Agenda View&lt;/h1&gt;
&lt;p&gt;If you tell Emacs where to find your Org-mode task lists, it can automatically create an agenda view for you. This is helpful for a lot of reasons, and is (to my knowledge) the only real place where the recursion information gets used. It lists out all of your scheduled and due tasks, or just due tasks, or sorts by tags, or any number of things. The org-agenda view has a lot of options, and basically any screen can be customized. New view modes can also be created as you like, making it extremely flexible.&lt;/p&gt;
&lt;h1&gt;Habit Tracking&lt;/h1&gt;
&lt;p&gt;This is why I've stuck with Org Mode. Literally no other feature is this useful.&lt;/p&gt;
&lt;p&gt;To quote the &lt;a href="https://orgmode.org/org.html#Tracking-your-habits"&gt;Org Mode manual&lt;/a&gt;, "Org has the ability to track the consistency of a special category of TODO, called 'habits.'" This is special because it lets you treat the scheduled date (or date range) of a task like a streak. You can see visually how close you were to meeting your intended completion time, and how close you are to the next time you will have to deal with that task. The visual part is handled by the agenda view.&lt;/p&gt;
&lt;p&gt;If you don't follow why this is huge, or you're like me the first time I used Org and just dismissed this idea, the gist is that Org can gameify regularly getting things done.&lt;/p&gt;
&lt;p&gt;For me, gameifying random tasks puts that motivation to finish everything to completion (and on time) back into the equation. This lets me manage my not-quite-normal attention span and stay organized.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There are other features I could talk about, but most of them boil down to the same few important ones here.&lt;/p&gt;
&lt;p&gt;Do what works for you. I recommend reading David Allen's book "Getting Things Done", either in its entirety or in part, and following some of his recommendations first. Tools are kind of secondary. That said, using Emacs has kept me on track, in spite of my ADHD, and maybe it'll help you too, even if you don't have ADHD.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* This is how the Git integration works, if you opt to write/use it.&lt;br&gt;
** I think I had &lt;em&gt;heard&lt;/em&gt; of it, but I certainly wasn't using it yet. I had individually been using both TW and Git for quite some time, too.  &lt;/p&gt;</content><category term="Tech"></category><category term="tasks"></category><category term="emacs"></category></entry><entry><title>Transition to Pelican, Part 2</title><link href="https://cannoncontraption.github.io/pelican2.html" rel="alternate"></link><published>2022-08-09T19:07:00-04:00</published><updated>2022-08-09T19:07:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-09:/pelican2.html</id><summary type="html">&lt;p&gt;It's been almost two weeks since transitioning this site over to Pelican, and I have some thoughts about the experience so far.&lt;/p&gt;
&lt;p&gt;First of all, it's way easier to write new posts this way, though if you read my last post you'd already know that. Check the &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;blog tag&lt;/a&gt; for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's been almost two weeks since transitioning this site over to Pelican, and I have some thoughts about the experience so far.&lt;/p&gt;
&lt;p&gt;First of all, it's way easier to write new posts this way, though if you read my last post you'd already know that. Check the &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;blog tag&lt;/a&gt; for (most of) the story about the evolution of my blog.&lt;/p&gt;
&lt;h1&gt;I'm Still Using the Default Theme&lt;/h1&gt;
&lt;p&gt;This is what the Fedora package for Pelican gives you for a theme on installation. I've made some minor tweaks to it, such as adding the tagline on a new line, but I haven't done anything groundbreaking yet. The desktop site is still there, nestled away behind a link at the bottom of the page. While it still works, the posts in there are pretty dated and haven't changed very much. I'll add it to the top of the page rather than the bottom once I've finished migrating it.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;There are some improvements I'd like to make in the short term, however. The theme isn't perfect for my needs for a number of reasons, but the main one is the article on the homepage.&lt;/p&gt;
&lt;p&gt;I'm fine with showing a preview of the latest article there, that makes a lot of sense. However, it doesn't really make a lot of sense to me to have it be the entire first page. That makes it much harder to find my back catalog of articles, since they're all shoved to the bottom of the page. Hopefully I'll have changed that by the time this goes live.&lt;/p&gt;
&lt;p&gt;There's also no real "archives" page. It exists, but again it's a link at the bottom of the page. Rather than a proper archives list, the archives will always be split up between the home page and tag/category lists. Since I'm writing more regularly, as I had originally hoped I would when I set up Blogger back in 2017,* that archives list is getting really big for it to be appropriate at the bottom of every page. Instead, it might make more sense to have a "next article" and a "previous article" button at the bottom to let readers start somewhere and progress in time, maybe taking into consideration what category they've picked.&lt;/p&gt;
&lt;p&gt;That leads well into my next issue, the categories at the top. Clicking on a category brings you to what looks like a single post, as if all of that category is contained within just that post. Obviously, this hurts discovery for pretty much everything that's not the most recent article or the oldest. To fix this, I intend to also turn those into classic blog lists.&lt;/p&gt;
&lt;h2&gt;Styling&lt;/h2&gt;
&lt;p&gt;I have some minor nitpicks with the styling, but that can wait. What's there is serviceable, and other than inverted header and link text on hover, it looks OK. I would prefer to eventually start over on this, though. I like light themes, but I tend to try to color-coordinate everything I develop. So, for example, I could copy the colors out of &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;Headcannon DWM&lt;/a&gt; or something along those lines.&lt;/p&gt;
&lt;h1&gt;Will I Keep Using It?&lt;/h1&gt;
&lt;p&gt;For now, the answer is an easy yes. For the future, there's a few things I want to consider. Chief among these is Python. Python is a beautiful teaching tool and prototyping language, with tons of features that make it very approachable for beginners. However, as the site grows I'll undoubtedly start running into instances where it takes Python a long time to process the whole site.&lt;/p&gt;
&lt;p&gt;I did consider just jumping to Hugo right away, but the main issue is that I &lt;em&gt;just&lt;/em&gt; transitioned to Pelican. The performance issue I mentioned at the start is still only a guess based on what I've heard online,** and I haven't run into any major issues. I also don't have some killer feature I'm missing in Pelican that's present in Hugo, though I leave it to time to change my mind on that.&lt;/p&gt;
&lt;p&gt;There are a lot of things that Pelican builds for me that I didn't end up hand-generating before. I have Atom feeds now, sorted by category if you'd like, as well as the ability to preview what I'm working on before I've even finished typing, as a couple of examples.&lt;/p&gt;
&lt;h1&gt;Other Notes&lt;/h1&gt;
&lt;p&gt;If you're looking to try Pelican yourself, use the &lt;code&gt;make devserver&lt;/code&gt; command to just run an auto-reloading web server on your local machine. It defaults to &lt;code&gt;localhost:8000&lt;/code&gt; as the address of the temp server, and makes development way easier.&lt;/p&gt;
&lt;p&gt;If you want to modify the default theme, you'll have to copy it out of wherever your installation system put it. In my case, that's buried somewhere in /usr/share since I used the Fedora package. I hear the theme system is Jinja2, but I know basically nothing about that just how to use themes in Pelican. For a basic blog like mine, this works great, but if your uses are more complicated than mine, be aware of this.&lt;/p&gt;
&lt;p&gt;I do recommend trying Pelican if you've never hosted a static site blog before. Using hand-coded web is tempting, but the convenience and consistency of Pelican makes it a no-brainer when it comes to actually getting writing done.&lt;/p&gt;
&lt;p&gt;That's pretty much it. Hopefully I can whip this site into some better shape soon, and the experience will make a little more sense, but I'm sticking with Pelican for now. It's still an enormous upgrade over what I was doing before.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* Anyone ever notice that, even before making the switch to Pelican, the majority of my posts were written in June and July?&lt;/p&gt;
&lt;p&gt;** I have run into performance issues with &lt;em&gt;Python&lt;/em&gt;, but that might not extend to Pelican specifically.&lt;/p&gt;</content><category term="Tech"></category><category term="pelican"></category><category term="python"></category><category term="blog"></category></entry><entry><title>Console Review: the PlayStation 4</title><link href="https://cannoncontraption.github.io/ps4review.html" rel="alternate"></link><published>2022-08-08T23:59:00-04:00</published><updated>2022-08-08T23:59:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-08:/ps4review.html</id><summary type="html">&lt;p&gt;I bought a used Playstation 4 Slim in late 2017 from GameStop with a PSVR. I've been using it fairly regularly ever since. Now that we're a few years into the lifetime of the PS5 and I've had some time to put off buying one, I thought it would be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I bought a used Playstation 4 Slim in late 2017 from GameStop with a PSVR. I've been using it fairly regularly ever since. Now that we're a few years into the lifetime of the PS5 and I've had some time to put off buying one, I thought it would be the perfect time to start reviewing the PS4 and its contemporaries.&lt;/p&gt;
&lt;h1&gt;Hardware&lt;/h1&gt;
&lt;p&gt;The PS4 is powered internally by an AMD Radeon GPU based on an early version of their GCN architecture. GCN was able to hang onto life even in the desktop space from 2012 or 2013 all the way up until 2019 without really falling too far behind in the product categories it competed in, so this component is pretty strong.&lt;/p&gt;
&lt;p&gt;However, the PS4 is also powered by an 8-core version of the AMD Jaguar mobile CPU. So, the PS4 has 8 "cores" of computing power at its disposal, all within a strict power budget. In reality, that's 4 cores with 8 integer units between them, like most of AMD's CPUs of the time. This is weak, and I'll touch on where this becomes a problem later, but this is just some foreshadowing. It sucks. It works, but it sucks.&lt;/p&gt;
&lt;p&gt;The system comes equipped with 2 front-facing USB ports (yuck), and physical power and eject buttons. It has the usual set of ports on the back for a cheap modern console, power, 8P8C Ethernet, HDMI, and a mystery "AUX" port used by the camera and basically nothing else. It has a Blu-Ray drive above the power and eject buttons.&lt;/p&gt;
&lt;p&gt;From a design aesthetic perspective, the system is solidly serviceable. It's an unassuming black slanted package, which I hear is designed to help hide the cables when it's lying flat. There's a slice in the middle, through which all of the system's airflow happens. The USB ports and the majority of the I/O are in this slice, and the power/eject buttons are on the top face of the bottom slanted segment. Again, it's serviceable. Nobody is going to look at your home theater cabinet and point to it as particularly ugly, or beautiful. It does come in different colors, if you want to get fancy.&lt;/p&gt;
&lt;h1&gt;Controllers&lt;/h1&gt;
&lt;p&gt;In a few words, these are best in class. They've got the broadest range of features out of all of the controllers of the time, featuring traditional rumble (no gimmicks), analog triggers and joysticks, a trackpad, gyro and accelerometer sensors for motion, a light bar for tracking by the camera (VR, AR applications). The usual Sony face buttons are present, along with a traditional D-Pad. There's also a "Share" button for the social side of the console. The controller is charged via micro-USB (hate it or love it, it's what was available at the time, C did not exist yet), and it has an accessory port and a headset jack on the bottom between the thumbsticks. It uses a rechargeable internal LiPo battery. To service the controller, you need to remove a total of 4 screws on the outside, and a few more inside. On the whole, there are no nasty hidden snaps (that I remember, open with care since I haven't done this in a while on a fresh controller or just ask someone else).&lt;/p&gt;
&lt;p&gt;I have a bone to pick with people who say the DualShock has 4 buttons rather than a D-Pad. This is false. Sony made the design decision of molding the case in front of the D-Pad, but I encourage you to take it apart if you don't believe me. It's got the same center post as any other controller, and the actual pad itself is indeed one piece. You can't push left and right at the same time unless you broke your controller. Actually, this plastic molding decision has one huge benefit- it's really easy to determine where the middle of the D-Pad is by just feel. There's no guesswork about where center is since the molding on the case is a set line that your finger will always feel. In addition, since it's a cross shape, you can often times even tell where your finger has drifted to if it has drifted. The Steam controller and Xbox One controllers both fail in this regard.&lt;/p&gt;
&lt;p&gt;For a variety of reasons, the DualShock 4 is probably still the best controller you can buy for PC use, too. It has a standard set of functions with no extra bits nobody supports, and Steam Input lets you map the gyro sensors to aiming, so that you can properly play Halo with a controller. It uses Bluetooth to connect to the PlayStation, and supports traditional pairing by holding the Share button while you power the controller on. The light bar will flash in a unique way when you've got it right.&lt;/p&gt;
&lt;p&gt;Some of you think the PS4 controller's thumbsticks are a little stiff, and honestly I can't deny that they're not perfect in that regard. However, the thumbsticks are internally virtually identical to the Xbox controller's. This means you can buy a set of replacement thumbcaps for the Xbox One or Xbox Series controllers and simply install them. This will give you exactly the same thumbstick weighting as the Xbox controller. If you want to go extra fancy, you can even install the thumbsticks from the Elite controller, giving you swappable magnetic caps. At that point, the only difference with the thumbsticks is the position of the left stick. I've been able to adapt to each style since the first time I tried without issue, but I hear some people have problems with this, so make your own decisions. If you don't own an Xbox, I would recommend getting used to this style, myself. If your thumb starts slipping off the left stick during an intense action sequence, if you have my size hands you can reach across with your right thumb and hold the stick while you re-position your left thumb. This is much harder with inverted sticks.&lt;/p&gt;
&lt;p&gt;Ergonomically, the controller is serviceable. It's not offensive or impressive, but it works and I don't have any major complaints. It's not particularly heavy and the triggers don't require much force to actuate when Steam is set to hair trigger, making it a great choice for FPS games and motion aim.&lt;/p&gt;
&lt;h1&gt;Software&lt;/h1&gt;
&lt;p&gt;This is where the PS4 really starts to stand out. Sony's logic with the interface is generally really consistent, just like it was with the PS3.&lt;/p&gt;
&lt;h2&gt;Main Menu&lt;/h2&gt;
&lt;p&gt;The home screen is sorted into 3-4 rows of icons. At the top are system-level settings. These are above where your cursor sits by default when you start the console, and include system settings, account settings, trophies, and chat functions among other things. The second row is a list of the most recently installed/played games, sorted by how recently the game has been launched/installed, and included in this list are any folders. If you play a game in a folder, the whole folder is promoted to the top of the list rather than pulling the game out of it. Folders work much like the recent line, but they have a fixed order. They remember which item in the folder was last used, so it's always available. Going into the third row (fourth if in a folder) is details about the game. Somewhat annoyingly, you need to be online for this to work, but it includes links from the developers of the game, streams, trophies, and fun facts about who else in your PSN friends list is playing the game and what trophies they got. That's about all there is to the logic of the home screen, but there are occasions where you can press "options" to bring up a context menu. This works like right click on a PC, so it's also pretty easy to follow.&lt;/p&gt;
&lt;p&gt;I just typed a lot about that menu. What I want you to come away with though is that that's a pretty complete operating manual for the system menu. There's very few exceptions to that general structure, and finding things is usually very quick and easy. About the only thing worth mentioning is that they call "Eject" "Remove Disk" in the system menu, so if you see it, that's just Eject not a 'delete everything' button. This represents a trend towards over-simplifying everything to avoid confusion, which usually makes things more confusing. You could probably guess I'm against this trend.&lt;/p&gt;
&lt;h2&gt;Games&lt;/h2&gt;
&lt;p&gt;Sony's library with the PS4 is world-class. They have among the best console exclusives ever launched, such as Ghost of Tsushima, God of War (PS4), Ratchet and Clank (PS4), Uncharted 4, DriveClub, Horizon Zero Dawn (now on PC, but the port happened around when the PS5 launched), Persona 5 Royal, and many, many more. Those are just what came to mind. Because it's a comparatively powerful system next to its contemporaries, most multi-platform games play their best on PS4 out of all the consoles.&lt;/p&gt;
&lt;p&gt;Games also don't need to fully install to disk to play. Most of them will launch within a few seconds of putting them in the disk drive. Those of you with Xbox Ones will probably find this very refreshing, the difference is dramatic.&lt;/p&gt;
&lt;h2&gt;Web Browser&lt;/h2&gt;
&lt;p&gt;Be careful to turn off JavaScript. The browser isn't very well optimized, and JavaScript makes most pages absolutely useless.&lt;/p&gt;
&lt;p&gt;The browser also doesn't support a lot of tabs open at once. You'll need to be careful not to leave anything important open, since if you open too many other things (first of all the performance will suck, but at any rate) the tab may disappear.&lt;/p&gt;
&lt;p&gt;This goes for any console, but just avoid the browser. The CPU isn't strong enough to support it properly.&lt;/p&gt;
&lt;p&gt;I should also note on the topic of CPU that the CPU also limits some games somewhat, so even if a low-end old computer with a similar GPU can run a game, don't expect you'll get exactly the same performance out of the PS4. It may be better if it's optimized for the specific GPU in the PS4, or it may be worse because that CPU is so weak. It's weak enough it was a talking point on launch back in 2013, and almost 10 years later things certainly haven't gotten better.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Man, that was a dry review. I don't have a whole lot more to say about the PS4 without bringing in a lot more about the other three big consoles of the time (Wii U, XB1, Switch), so I'll save that for later. Suffice it to say I'm not sure whether I have more PS4 disks or Steam games right now, and whichever library is larger is larger by a very small amount.&lt;/p&gt;
&lt;p&gt;If you don't have one and you've never owned a PlayStation, buy a PS4 off of someone who just got a PS5. The library is vast and enormously high-quality. The PS4 also sold really, really well for a home console, currently the second-best selling home console. Finding one shouldn't be an issue, as a result.&lt;/p&gt;
&lt;p&gt;I didn't mention this before, but the PS4 also does not need to ever go online to function. That makes it in a class of its own in terms of usability into the future, there are no major functions that you lose out on in terms of playing games, either. As far as I remember, even trophies work offline (though don't quote me, they're very careful to prevent people from hacking trophies they haven't earned so the system does require a time sync for that if the clock battery has died). If you put it in the attic for 20 years and it works when you pull it out, all of your downloaded and surviving disc games will continue to work just fine. That's actually the main reason I consider buying disc games, they can survive both the individual console I own and the online services and still retain a copy of the game for me. If that sounds good to you, you'll like the PS4 quite a lot!&lt;/p&gt;
&lt;p&gt;So yeah, I give it a 994. You can decide the scale for yourself, since whatever number I give it is meaningless; just make sure it's on the positive end, since I don't have anything major to complain about, just minor nitpicks I'll mention in future posts about the other consoles.&lt;/p&gt;</content><category term="Games"></category><category term="PlayStation"></category><category term="tech"></category><category term="games"></category><category term="ps4"></category></entry><entry><title>Pop OS and Updates</title><link href="https://cannoncontraption.github.io/popos.html" rel="alternate"></link><published>2022-08-06T23:07:00-04:00</published><updated>2022-08-06T23:07:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-06:/popos.html</id><summary type="html">&lt;p&gt;I recently bought my grandmother a new PC, just this past year. She had been using a mid-2007 iMac 24". The Mac enthusiasts among you may realize how out of date this is. It last received software updates in 2018, and ever since it's whined about a pending OS update …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently bought my grandmother a new PC, just this past year. She had been using a mid-2007 iMac 24". The Mac enthusiasts among you may realize how out of date this is. It last received software updates in 2018, and ever since it's whined about a pending OS update it refuses to actually install. So, of course, when shopping for a computer I wanted something Mac like that I could keep updating basically forever. She had &lt;em&gt;not&lt;/em&gt; outgrown the Core 2 Duo that machine was running, in spite of it being a meager T7300, and aside from a minor backlight issue, the iMac worked fine, so it was difficult to convince other family members it was time.&lt;/p&gt;
&lt;p&gt;So I just went and did it. I bought a System76 Meerkat, which is an Intel NUC with Pop OS on it, grabbed a monitor, PC keyboard and mouse, and set it up for her.&lt;/p&gt;
&lt;h1&gt;I Didn't Use the LTS&lt;/h1&gt;
&lt;p&gt;In the process of setting up this new computer, I found out about System76's then freshly released Cosmic desktop. Honestly speaking, it looked pretty Mac like, so I took the plunge and upgraded from the LTS to 21.10. My logic was pretty simple, I'm there about every 6 months or so, surely that's enough time to keep things up to date, and no matter how far the OS lags the current release, everything I put on there is virtually guaranteed to be newer than whatever was available in 2018 from Apple.&lt;/p&gt;
&lt;p&gt;To be clear, my plan wasn't to keep upgrading my grandmother to each new non-LTS release of Pop, it was just to use this one so the interface wouldn't be changing as soon as I next showed up to her house. I live pretty far away, so stability is actually a priority here, so I figured this would be a risk for the first 6 months and at worst get ironed out after that.&lt;/p&gt;
&lt;h1&gt;Upgrade time!&lt;/h1&gt;
&lt;p&gt;So it was my first time back since I installed the new computer, and I see a bunch of ominous warnings. They said things along the lines of "This version of Pop is no longer supported!" alongside the usual cheery "upgrade available!" notices. Being a long-time Ubuntu user up until a year or so before they axed the Unity desktop, I wasn't expecting this. Non-LTS releases of Ubuntu last a few months before they go obsolete, and the sources stay online for a year or two after they've shuttered support.&lt;/p&gt;
&lt;p&gt;Not so here.&lt;/p&gt;
&lt;p&gt;I opened the Pop Shop to grab updates, and was greeted by a very detailed error message saying it couldn't pull some archives. I figured this had to be a mistake, the archives had moved, or there was some package I was missing.&lt;/p&gt;
&lt;p&gt;After some browsing around, I found the hard truth- System76 had pulled the archives for Impish off of their servers, and nothing I found pointed to an "old-releases" archive where I could get fresh copies. As a result, the official Pop OS updater repeatedly failed to update to Jammy, since it would try to replace the sources.list it expected, complete with the (now gone) Pop OS packages, then update the existing system first. This is usually good practice when doing an OS upgrade like this, it ensures that you're taking the smallest leap in versions possible, and it ensures that the core components are already patched for the upgrade, etc. Since it put the sources.list back on its own, though, I could never get it to even refresh the package indexes.&lt;/p&gt;
&lt;p&gt;I tried all sorts of things to make this work, like typing in the Pop OS PPA address that they used in the old days, which existed for Impish, but every time the updater would point back to System76's own site and the update would fail.&lt;/p&gt;
&lt;h1&gt;Solution?&lt;/h1&gt;
&lt;p&gt;I did get it to update.&lt;/p&gt;
&lt;p&gt;I've used Debian for a long time now, and I've upgraded at least from 9 -&amp;gt; 10 -&amp;gt; 11, and probably before that too. The process of upgrading sources.list by hand doesn't daunt me all that much, and I'm prepared to do it. The wild card was System76's customizations. I could expect this would work on Ubuntu or Debian, but this wasn't my machine, would it be better to wipe it and do all of the work of re-importing things from 6 months ago?&lt;/p&gt;
&lt;p&gt;I took the plunge, in the end. I just hand-edited the sources.list from &lt;code&gt;deb https://url.example.com impish main universe multiverse&lt;/code&gt; to &lt;code&gt;deb https://url.example.com jammy main universe multiverse&lt;/code&gt; or whatever for each line, ran &lt;code&gt;apt update&lt;/code&gt; then &lt;code&gt;apt dist-upgrade&lt;/code&gt; and waited for fireworks.&lt;/p&gt;
&lt;p&gt;Fortunately, they never came and the update went smoothly. I asked Pop OS to update its recovery partition, and that worked OK, too.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Be careful with these smaller distributions. They're great for a lot of things, but take them seriously when they say they recommend the LTS. There's a good chance they don't expect you'll be upgrading 6 months down the line with no opportunity to even check in between.&lt;/p&gt;
&lt;p&gt;In the case of Pop OS, back up your data and do what I did if you ever find yourself in a jam upgrading to Jammy (or whatever the latest release is, I couldn't resist the pun). Just remember what you're getting yourself into.&lt;/p&gt;
&lt;p&gt;I should also note at this point that the computer has otherwise been working great for her. I bought the "tall" model with the 10th gen chip and an SD slot so that she could store the 20+ years of digital photos she has, and Shotwell as worked excellently as an iPhoto replacement. Pop OS is really solid, and the System76 support team has always been good to me, so they would probably help you through things if you got stuck and didn't know what I know. I still recommend them highly, even for Grandma!&lt;/p&gt;</content><category term="Tech"></category><category term="popos"></category><category term="linux"></category></entry><entry><title>Muscle over Motor: Why Biking is the Way to Travel the Last Mile</title><link href="https://cannoncontraption.github.io/biking.html" rel="alternate"></link><published>2022-08-04T16:10:00-04:00</published><updated>2022-08-04T16:10:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-04:/biking.html</id><summary type="html">&lt;p&gt;In high school, I was the bike kid. I think every high school has at least one person like me, you know, that guy who rides a bike literally everywhere. In all honesty, looking back at it, I wouldn't shut up about it. The more time goes on, the more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In high school, I was the bike kid. I think every high school has at least one person like me, you know, that guy who rides a bike literally everywhere. In all honesty, looking back at it, I wouldn't shut up about it. The more time goes on, the more I believe this is a good thing.&lt;/p&gt;
&lt;h1&gt;I Like Cars!&lt;/h1&gt;
&lt;p&gt;Whoa, whiplash anyone?&lt;/p&gt;
&lt;p&gt;It's true, though. I learned to drive a manual transmission at the same time as I learned to drive. It was very efficient! This gave me an immediate appreciation for driving, as anyone who drives a small stick shift car can tell you. There's a certain connection with the vehicle that isn't possible any other way. I currently drive a sporty little Mazda3, which is incredibly fun to take on backroads on the weekend.&lt;/p&gt;
&lt;p&gt;But even so, it's an expensive hobby, and not something I want to turn into a chore. I like driving, but I like it because it's fun, not because it's practical.&lt;/p&gt;
&lt;h1&gt;I Bike Everywhere I Practically Can.&lt;/h1&gt;
&lt;p&gt;I live west of Boston. Anyone who knows this area probably thinks of winding, narrow roads surrounded by trees, punctuated by the occasional stroad or highway. That's about spot on. The amount of consideration bikes are given here is insanely low, this is the very type of situation I believe road design regulations were created to prevent, though in all reality those were created only considering cars.&lt;/p&gt;
&lt;p&gt;All of that said, I don't feel unsafe on a bike. I'm sure this is different in the American south, and other places in the world that think of cyclists as opinionated, wimpy, avocado-toast-addicted morons, but in my corner of the world, people in cars are generally pretty courteous. They tend to give you space on the road, they watch carefully to keep from running into you, and they wait to pass you if there isn't enough space. That's not to say that nobody is crazy or entitled on the road, but so far my Close Call Counter is still in the single-digits since I started riding.&lt;/p&gt;
&lt;p&gt;So, I ride everywhere. If I'm low on milk or out of apples, I jump on my bike and ride to the store. If I need a new pair of jeans, I jump on my bike and ride to the local thrift store, or very rarely the local clothing store. There's a pharmacy within biking distance, all of downtown, a brewpub and coffee roaster, another brewpub, and a ton of other local business and restaurants. The vast, vast majority of things I do can be serviced by a bike. I even ride my bike to visit friends miles away. I ride everywhere.&lt;/p&gt;
&lt;h1&gt;Why? You Just Said You Like Your Car...&lt;/h1&gt;
&lt;p&gt;It's true, I like my car, I love driving. In spite of this, I still bike.&lt;/p&gt;
&lt;p&gt;First of all, there's the cost equation. I remember actually running these numbers in high school when I was considering whether to buy a car. I was actually pretty amazed. The obvious two expenses are the cost of the vehicle and the cost of gas. These are the two things most people think about. However, when you take into account insurance, repair costs, oil, random filter changes, and so on, the cost per year is incredibly high. Even if your gas cost is somehow zero and you don't drive anywhere, you still need annual inspections from the state (at least here in MA), current insurance, registration, and a pile of other random fees. Even if your car is free, before you've driven a single mile, you've already paid more than you would need to buy a pretty nice bike, kitted out with headlights and taillights for nighttime riding, a rear rack for cargo, fenders for when it rains, and a new coat for riding in the winter. I could get rid of my car and buy a new, relatively high-end bike with the money I would save each year. I actually paid for my car and buy gas for it, so I could probably actually buy more like 2-3 bikes of the same variety as the one I own each year for the same cost.&lt;/p&gt;
&lt;p&gt;If you think that's the end of the costs, you're mistaken. That's just what you pay for, and I didn't even mention everything. Do your own accounting and your picture will probably look pretty similar to mine, just make sure you count all the expenses you incur as a result of the car. There's more than just monetary costs, though.&lt;/p&gt;
&lt;p&gt;There are also health implications to driving as well. Your tolerance for extreme heat and cold will be severely damaged, where riding a bike will acclimate you to even relatively extreme seasonal weather changes pretty painlessly and gradually (which will make the day the heat goes out way easier). You'll stay in shape better, you'll have more energy, you'll have less risk of injury from common tasks just due to your body adapting to doing even light work, and this in turn will lead to extra &lt;em&gt;years&lt;/em&gt; on your life and a better attitude in the mean time. For those of you worried about COVID, this also does improve your immune response to viruses like COVID. That means less sick days lying in bed. That's not even mentioning the emissions from the cars that you aren't generating, making everyone else healthier. On top of all of this, the WHO recommends at least 30 minutes of moderate exercise in order to maintain a baseline of health, so you can think of your first half an hour of riding each day as essentially multitasking, you get that minimum benefit out of it. Anything in addition is like putting in a little extra time at the gym. You're unlikely to regret it.&lt;/p&gt;
&lt;p&gt;If you think those emissions are a serious risk to someone on a bike, you'll probably be interested to know that being in a car doesn't reduce your own risk at all. In fact, depending on where the air intake in your car is, you may actually be inhaling more toxic fumes from driving. This really is a wash either way.&lt;/p&gt;
&lt;p&gt;I don't have the stats in front of me, but I hear anecdotally that a large proportion of bike accidents are due to biking drunk. If you don't, your risk of getting into an accident on your bike (involving a car or otherwise) should be pretty low, even compared to driving. My own experience is that while driving tired is incredibly dangerous, especially if my body is on the verge of sleep (very late at night), the added physical activity from biking keeps me alert enough that even at 2AM I'm not about to run into anything. Alertness is not a problem in the same way (though you NEED to equip your bike with BOTH front &lt;em&gt;and&lt;/em&gt; back lights colored appropriately if you ride at night. &lt;strong&gt;DO NOT CHEAP OUT ON THIS, IT'S NOT WORTH THE $30 SAVINGS.&lt;/strong&gt; Plus, it's only like $30-$60, compare that to headlights and tail lights on a car.)&lt;/p&gt;
&lt;p&gt;For me personally, I have a well-fitted bike with a rack and fenders, so I can haul almost two weeks of groceries in one trip, and that's with only some pretty basic pannier bags and no milk crate on top. Also, no bike trailer. These can be had cheaply on Craigslist or Ebay, not to mention new from most places that sell bike anything. You can haul a lot more than you might think on a bike.&lt;/p&gt;
&lt;h1&gt;There Are Some Drawbacks&lt;/h1&gt;
&lt;p&gt;Biking takes longer than driving. If your commute is 50+ miles, might I suggest moving closer to work? I bet you would save money even with a more expensive house. But, barring that, biking probably isn't practical over that distance every day. While safety isn't the big glaring concern you've probably been led to believe it is, you do still need to be aware that you're not in a giant metal box. Stay to the side of the road and keep your eyes up and open. Owning an upright bike helps with safety much more than even owning a helmet, so it's probably wise to choose your ride carefully.&lt;/p&gt;
&lt;p&gt;You're also exposed to the elements. If it's hot, bring water. Bottle cages can be had for less than $10, bring water when it's over maybe 30-32 degrees C, (a little under 90F or so, if I recall). Wear a coat in winter. As much as this is a drawback, see my earlier section for why this is a benefit. If you're afraid of the cold, remember that you're doing work by riding, you'll stay surprisingly warm. After the first time or two overdressing, you'll know what I mean.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I couldn't think of any more big drawbacks, at least none that I've run into. My bike doesn't have the same carrying capacity as my hatchback, but think around the same as a Mazda Miata. Anyone who's owned one of those knows how deceptive they are, you can really fit a lot more than you think in one. Bikes are kind of like that.&lt;/p&gt;
&lt;p&gt;My bike is my vehicle of choice the vast majority of the time, and for most of you it probably should be, too. If you're not sold, do your own research, buy a bike, and try it. Even if you use it part of the year, having it around the next time gas prices go crazy will be a huge help. I haven't even really talked about bikes as recreation, you probably already know about that.&lt;/p&gt;
&lt;p&gt;So in conclusion, ride a bike! I'll see you out there!&lt;/p&gt;</content><category term="Misc"></category><category term="travel"></category><category term="car"></category><category term="bike"></category><category term="commute"></category></entry><entry><title>Running an Unfederated XMPP Server For Fun (but Not Profit)</title><link href="https://cannoncontraption.github.io/xmpp.html" rel="alternate"></link><published>2022-08-02T19:15:00-04:00</published><updated>2022-08-02T19:15:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-08-02:/xmpp.html</id><summary type="html">&lt;p&gt;Since late 2018 or early 2019, I've been running a personal XMPP server. It's not federated, and there's only about 4 or 5 users, but I've learned a lot in the process of maintaining it.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;When I was in college, I had a number of friends who would text …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since late 2018 or early 2019, I've been running a personal XMPP server. It's not federated, and there's only about 4 or 5 users, but I've learned a lot in the process of maintaining it.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;When I was in college, I had a number of friends who would text constantly. However, the state of text messaging on Android at the time was not all that great. There was no way to mute individual chats, nor was there a way to customize sounds on a chat-by-chat basis, and so on. Given these features, and the fact that some of my friends were somewhat disaster prone at the time, it was somewhat unwise to mute my phone in the car, but every time somebody sent a meme it would always buzz my pocket, pulling me out of the zone. I like driving quite a lot, but I definitely like it most when I can drive in the zone, uninterrupted and focused on getting the most out of the machine.*&lt;/p&gt;
&lt;p&gt;Given all of this, and the fact that SMS can sometimes be a bit flaky on the delivery side (leading to some heated arguments at times), I convinced the majority of the people I spent the most time with to switch to Hangouts.&lt;/p&gt;
&lt;p&gt;Who remembers Google's first few announcements about Hangouts going away?&lt;/p&gt;
&lt;h2&gt;Hangouts Substitutes&lt;/h2&gt;
&lt;p&gt;Around the first of these announcements I started searching for a replacement. I'm not sure if we had been on the platform for more than a year at this point, so feeling burned, I started my search.  There were a few that sat on my shortlist, but here are some of the highlights:&lt;/p&gt;
&lt;h3&gt;Tox&lt;/h3&gt;
&lt;p&gt;I'm not sure how seriously I took this one. Tox is a great system if everyone you're talking to has a degree in computing of some sort, and certainly the people that introduced this to me in high school were highly technical, so they would have used it OK. However, probably about half of the people I wanted to use this with would have gotten frustrated with it and moved on.&lt;/p&gt;
&lt;p&gt;This is mostly since Tox is totally peer-to-peer. This means no offline delivery, no central caching, and user IDs had to be carefully backed up in case somebody's phone broke. I suspect delivery in particular is handled slightly better by the most popular Tox clients today, but at the time this made it a non-starter.&lt;/p&gt;
&lt;h3&gt;IRC&lt;/h3&gt;
&lt;p&gt;This was my first choice, but I couldn't really figure out how to make it work right. The biggest problem was actually me- I didn't have mobile data at the time, which meant I couldn't just stay connected to an IRC channel all day. For anyone who doesn't know IRC all that well, I don't know of any server software that does delayed delivery. Either you're online and you receive the message from the server, or you're offline and you don't. This makes it actually an even harder sell than Tox, in spite of being centralized.&lt;/p&gt;
&lt;p&gt;I had planned at first to try and see if I could modify an IRC server to recognize registered nicks and send delayed messages, but in the end I never got around to even looking to see if an established server supported this. IRC is maybe a little &lt;em&gt;too&lt;/em&gt; barebones for my uses in this case.&lt;/p&gt;
&lt;h3&gt;Matrix&lt;/h3&gt;
&lt;p&gt;I wanted this to work so badly. Matrix had the most promising server software, along with the concept of "bridges" which would have allowed those of us who wanted to use a console CLI and an IRC client to join in. There was at least one such person. However, I followed the official install instructions for their python server software, Synapse, and couldn't ever get it to work properly. Not wanting to dive into Docker (which in hindsight was pretty dumb, Docker is dead simple), I ended up giving up on this, too.&lt;/p&gt;
&lt;h3&gt;XMPP&lt;/h3&gt;
&lt;p&gt;I'll get into this later. Obviously it's the option I went with.&lt;/p&gt;
&lt;h2&gt;Chat Services I Didn't Want at All&lt;/h2&gt;
&lt;h3&gt;Whatsapp&lt;/h3&gt;
&lt;p&gt;This got ruled out pretty quickly. since I believe by the time I had looked into it enough to know what it is, Facebook had long since bought it. I don't think I really need to explain this, we all know about Facebook and data privacy.&lt;/p&gt;
&lt;h3&gt;Skype&lt;/h3&gt;
&lt;p&gt;I never took this one seriously. In hindsight maybe I should have, since it's very close in function to Hangouts, but the interface always sucked and it probably wouldn't have stuck around for very long as our preferred choice.&lt;/p&gt;
&lt;h3&gt;Signal&lt;/h3&gt;
&lt;p&gt;This wasn't very big or polished yet. It worked, and I do recall a friend or two telling me I should use it, but these were the same people who were telling me about Tox some years ago, so I dismissed the option. My impression is that Signal was quite a lot rougher in 2017 and 2018 than it is now (2022), so this probably wasn't a bad decision for the time. I didn't check, though.&lt;/p&gt;
&lt;h3&gt;Discord&lt;/h3&gt;
&lt;p&gt;This was aimed at gaming chat rather than general chatter like it is now. Many of us did play video games, but we already used Steam chat for that, and there didn't seem to be another compelling reason to use it.&lt;/p&gt;
&lt;h1&gt;Switch to XMPP&lt;/h1&gt;
&lt;p&gt;We had all decided to take Hangouts' shutdown seriously at this point, and I had been promising people I'd come up with a solution for a while. So, eventually, I figured out hosting and spun up a Prosody instance.&lt;/p&gt;
&lt;p&gt;The transition was less than smooth, however. One of my friends owned an iPhone at the time, and this turned out to be a serious problem since I used a strange port for the server. It was only ever supposed to be just among friends. As it turns out, we couldn't find an XMPP app on the app store (that was free) that let us set the port number for the server.&lt;/p&gt;
&lt;p&gt;Once we all did manage to get onto the server, though, there was a significant number of problems with the Android app we used at first. Yaxim is not a bad option, all things considered, but it's kind of heavy on data and battery. Shortly after I got this working, I also got mobile data on my phone, but only up to a maximum of 512 MB. It also had a tendency to crash every now and again, leading to missed messages.&lt;/p&gt;
&lt;p&gt;Eventually, I heard about Conversations and OMEMO encryption, and moved everyone over. This not only improved our encryption from simple HTTPS (like Telegram, but with hosting we controlled) to real end-to-end double-ratchet goodness (a la Signal). This also crashes a lot less, and uses a lot less data and battery. However, the only way to get it for free is to use F-Droid or compile it yourself. Normally I would just pay for it, but I was moving away from using the Play Store as much as possible, and I didn't want to input my credit card on each person's phone just to buy them one app.&lt;/p&gt;
&lt;p&gt;I don't actually recommend you go this route, always support the creator if it's practical, and Conversations deserves your support. The $3 or whatever on the Play Store is worth it, this is one of the most quality apps on the platform (IMO).&lt;/p&gt;
&lt;p&gt;At any rate, this is more or less the state of things now. The friend with an iPhone had been having other minor problems with it for a while, and took the chance to switch to Android and has been there ever since.&lt;/p&gt;
&lt;h1&gt;Experience Since&lt;/h1&gt;
&lt;p&gt;Honestly, it's worked OK. If you don't want to read the rest, my final verdict is that it's worth the effort if you're in &lt;em&gt;exactly&lt;/em&gt; my position from a few years ago, but things have changed a bit since.&lt;/p&gt;
&lt;h2&gt;Pros&lt;/h2&gt;
&lt;p&gt;This is probably the most private solution for our uses. Like I've mentioned several times, we control the hosting, and since we all use either Profanity or Conversations (or both), we all have access to OMEMO encryption, which is on by default in most direct chats. All of the server and client code can be audited at any time, and we can rest easy to some degree since not being federated means that nobody is going to just server-to-server exploit our chat system. I actually briefly talked about federating the server, and the former iPhone friend actually stopped me for this reason.&lt;/p&gt;
&lt;p&gt;Since XMPP uses usernames (unlike cell phones), there are a few more options for notifications. For example, in a big group chat we can all link each other memes and say stuff that doesn't need everyone's attention, and anybody interested can see it. Anybody who's not interested doesn't have to have their pocket vibrate every time. This silence is truly golden, and the implementation of mentions (just say the person's username) is probably the smoothest one I've ever used. XMPP and IRC seem to be the primary users of this system, pretty much everywhere else you have to say +Somebody or @somebody, which is awkward on a cell phone keyboard. Equally critically, though, you can set this on a chat by chat basis, meaning that if there's a group chat where you want to hear everything right away, say for example for business reasons, you can just tell Conversations to make that chat always ping you. The default is mentions only, however.&lt;/p&gt;
&lt;p&gt;There's no storage limit on uploaded files, unless you impose one or use a tiny disk to store information. In our case space is pretty limited, but we don't tend to do a lot of large image or file transfers over XMPP, so storage hasn't been a problem yet.&lt;/p&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;p&gt;Just like any other chat system, you either have to trust someone else to host it for you, or host it yourself. There's a huge issue with the number of choices for hosting elsewhere, so choosing a provider can be the same type of decision paralysis as choosing a Linux distro, or even worse. Also, not every server provides every feature you might want, so choosing somebody else's comes with some caveats.&lt;/p&gt;
&lt;p&gt;Self-hosting comes with other compromises, too. Unless you pick someone else's datacenter, you will need to either pay to colocate, or purchase a UPS and other associated hardware. If you run disk encryption (which is probably a good idea on your own hardware, just for privacy reasons), you'll need to unlock the disks on bootup for the server to operate. This can mean power outages lead to extended downtime without that UPS.&lt;/p&gt;
&lt;p&gt;Some components aren't very well documented. I haven't run into much of this, but at the beginning of the pandemic we tried voice/video calling, just out of curiosity, and it "worked", but never managed to connect successfully. I never looked into it any farther, but my hunch is the strange ports have something to do with it.&lt;/p&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;In today's world, I would pick Signal over going this route. It's quite possible that this XMPP server setup isn't long for this world at this point, in spite of some of its advantages. This is in part due to the small user base, I've been pretty picky about who I grant access to the server, even among friends. It was never interesting enough for someone to even question that, most people who found out about it reacted with "oh, that's cool" or something similar.&lt;/p&gt;
&lt;p&gt;Signal, on the other hand, is far better than even when I started using it. Since it uses phone numbers, connecting with people on the platform is seamless, so long as they're a contact. Furthermore, I'm not maintaining the user database, that's someone else's problem. This means anyone can join. We can pull in new members of the friend group pretty much risk free. It can also replace your SMS app, making it very easy to just automatically start using it with someone new. This all avoids device-specific pitfalls like over-simplified iOS clients, or vendor lock-in like with iMessage.&lt;/p&gt;
&lt;p&gt;I'd love a world where we all use XMPP much like we all use email. It's designed to work like that, and because of this design it's likely going to outlive all of the other options. However, you'll want a federated server to get that.&lt;/p&gt;
&lt;p&gt;* I drive stick shift, hence why I even &lt;em&gt;can&lt;/em&gt; focus on that.&lt;/p&gt;</content><category term="Tech"></category><category term="xmpp"></category><category term="chat"></category><category term="server"></category><category term="communication"></category></entry><entry><title>GNOME Shell is a Great Tablet UI</title><link href="https://cannoncontraption.github.io/gnomeshell-tablets.html" rel="alternate"></link><published>2022-07-31T14:30:00-04:00</published><updated>2022-07-31T14:30:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-07-31:/gnomeshell-tablets.html</id><summary type="html">&lt;p&gt;GNOME Shell is a pretty great tablet UI. It's not the most polished one ever, but it works really well, in spite of targeting desktop first these days.&lt;/p&gt;
&lt;p&gt;I honestly wish I could get it on my (up-to-date) Surface RT.&lt;/p&gt;
&lt;p&gt;This all started from &lt;a href="https://cannoncontraption.github.io/tabletrevo.html"&gt;a post I did a couple …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;GNOME Shell is a pretty great tablet UI. It's not the most polished one ever, but it works really well, in spite of targeting desktop first these days.&lt;/p&gt;
&lt;p&gt;I honestly wish I could get it on my (up-to-date) Surface RT.&lt;/p&gt;
&lt;p&gt;This all started from &lt;a href="https://cannoncontraption.github.io/tabletrevo.html"&gt;a post I did a couple days ago&lt;/a&gt; about why the tablet revolution never came like we expected. This whole topic came to mind recently as I started reading other people's blogs, notably &lt;a href="mrmoneymustache.com"&gt;Mr. Money Mustache&lt;/a&gt;, and I dug up my old Surface RT so I could read the blog like a book. I got the Surface off of a friend who used it briefly in high school and was about to throw it out. It did get me to muse a little about what the future looked like back in 2012 when 'Surface' was a sexy new brand that showed a lot of promise, and some people still believed laptops and desktops would be gone in a few more years.&lt;/p&gt;
&lt;p&gt;The Surface wasn't the first tablet I reached for, though. I also have an XPS 15 2-in-1 (which in this case I bought myself) that I was briefly using GNOME on so I could use it like a tablet. In spite of its heft and size, this was a really nice way to read as far as I'm concerned, and I only really switched back to the Surface when the battery started running low.&lt;/p&gt;
&lt;p&gt;So that brings me to the other thought that occurred to me when I came up with &lt;a href="https://cannoncontraption.github.io/tabletrevo.html"&gt;the last post&lt;/a&gt;, GNOME is a really pretty excellent tablet and touch interface. It's not perfect, but it's very comfortable and really would only need minor tweaks to do excatly what Windows 8 set out to do, but much better.&lt;/p&gt;
&lt;h1&gt;GNOME still targets keyboard and mouse&lt;/h1&gt;
&lt;p&gt;This is probably the single most important point. GNOME still supports keyboard and mouse input, and still treats it like a first-class citizen. That's where Windows stumbled with Windows 8. I'll defend that UI, actually, I think Windows 8 made a much better tablet OS than Windows 10, it's not even close. However, it's hard to argue that in the process of making Windows tablet friendly they didn't neglect the desktop in the process. GNOME came from keyboard and mouse, and while they also made radical shifts, they never went so far as to make the desktop a second-class interface in favor of whatever new thing they were doing.&lt;/p&gt;
&lt;p&gt;I'd also like to point out here that GNOME makes an excellent desktop UI; even without a touchpad or touchscreen, GNOME shines as a great desktop for productivity use. I almost gave up my tiling window manager for work at one point because GNOME was working so well. That's saying something, since I &lt;a href="https://gitlab.com/CannonContraption/headcannon-dwm"&gt;maintain my own&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind, the GNOME team made some really smart (but not too drastic) decisions about UI scaling over time that made GNOME easier to use with a mouse, as well. A lot of people complained about the bigger buttons and UI elements, but once you get used to it, they're not so big as to make the UI comical and it's much faster (even with a mouse) to hit the button you want.&lt;/p&gt;
&lt;p&gt;In addition, when running on a tablet, you do actually have enough space to manage windows like a desktop, and it lends itself well to a much more productive workflow. App switchers make sense on a phone, but on a tablet you should have the option to look at more than one thing at a time.&lt;/p&gt;
&lt;p&gt;They also didn't make the desktop an "app" or something dumb like that.&lt;/p&gt;
&lt;h1&gt;GTK+ 3&lt;/h1&gt;
&lt;p&gt;I think it's safe to say at this point that, in spite of all of its early adoption struggles and increased system resource usage, GTK 3 was a massive leap forward. Beyond just smoother rendering and CSS themes (even if some people are in denial about these), we also got real multitouch support, swipe to scroll, and eventually enhanced versions of these with Wayland.&lt;/p&gt;
&lt;p&gt;As a brief aside, if you're trying to use a touchscreen or trackpad with GNOME on Xorg, try Wayland instead and see if things improve. Xorg has some very sane design decisions for the 1980s and 90s, but misses a lot of finer points about desktop navigation in the 21st century. For example, touching the screen moves the mouse pointer and left-clicks on the screen. The behavior in Wayland is similar, but the touch input is its own cursor and can get much fancier much more easily. This manifests in small (but important) graphical and input glitches that just don't exist on Wayland.&lt;/p&gt;
&lt;h1&gt;Touch Gestures&lt;/h1&gt;
&lt;p&gt;GNOME has touch gestures! Seriously, on your laptop try swiping up or down with 3 fingers, your overview should appear. Left and right switch workspaces.&lt;/p&gt;
&lt;p&gt;I really don't think I have to say much more, these gestures are very reliable, and you'll end up using them a lot if you learn them. They also work on the touchpad just as well as on a touchscreen.&lt;/p&gt;
&lt;h1&gt;Multitasking&lt;/h1&gt;
&lt;h2&gt;Multiple Windows&lt;/h2&gt;
&lt;p&gt;I touched on this earlier, but I feel like this is important. GNOME makes an effort to make window titlebars grabbable. You can touch and drag any window anywhere on the screen, and with snapping gestures, split screen and maximized windows are easy to accomplish with a finger. I remember header bars being somewhat controversial, but honestly I think this is a smart way to use all of the space in a window without making the titlebar too small to grab with a finger.&lt;/p&gt;
&lt;h2&gt;Workspaces&lt;/h2&gt;
&lt;p&gt;This is the real winner for the GNOME workflow, in my opinion.&lt;/p&gt;
&lt;p&gt;When you ask someone how they organize their work vs how they organize their desktop, there's probably a disconnect somewhere in there. Either the person will get confused, and say that they have folders for all of their projects, or they'll lay out a detailed system of how to identify which windows they want to restore from minimize in their taskbar to bring up the exact project they were working on. Alternatively, they'll admit it's a mess and probably say they should close stuff more often.&lt;/p&gt;
&lt;p&gt;This is why I count the fact that GNOME has no minimize button by default as a hilariously, obviously positive trait. You'll never find me faulting you for turning it back on if that's your preference, and it's good they kept that option, but in all honesty workspaces should be the real way people organize their work. Rather than hiding the stuff you're not working on, why not just categorize it?&lt;/p&gt;
&lt;p&gt;On a tablet this works just as well. In fact, it's even better here since you don't have to target your finger at tiny little taskbar icons to pull your work back up, you just swipe to the side.&lt;/p&gt;
&lt;h1&gt;Rough Edges&lt;/h1&gt;
&lt;p&gt;So, this whole post is mostly just me gushing about GNOME and all that's great about it. Truthfully, it's far from perfect, and there are even a few things that Windows 8 does much better, notably in the app grid. There are other rough edges elsewhere, too.&lt;/p&gt;
&lt;p&gt;Normally this is where I would say that I intend to fix these things or at least take a crack at them, but in all honesty I use GNOME maybe a few times a year at the moment, since I do most of my work in Headcannon-DWM and Sway. I would encourage anyone working on the team who still sees these as issues to give it a try, this really is most of the extra polish someone like me is looking for to take this from a "great" desktop to an "excellent" or "nearly flawless" desktop.&lt;/p&gt;
&lt;h2&gt;Virtual Keyboard&lt;/h2&gt;
&lt;p&gt;This exists! It works pretty well, as a matter of fact. However, there's definitely a reason there's a button to pull it up in the taskbar on Windows, a button that GNOME really needs. Using my XPS as an example, if it's folded into 2-in-1 mode, autorotate turns on (by default) and hitting a text field in a GTK3 app brings up the virtual keyboard. However, this isn't 100% reliable in apps using other frameworks. If you open a window that uses an old version of Tk and try to type, you'll probably need the keyboard again. GNOME can tell when the system is folded, so making this icon contextual would make a lot of sense and save a lot of headaches.&lt;/p&gt;
&lt;h2&gt;App Grid&lt;/h2&gt;
&lt;p&gt;This is one of those things that is "fine". It works as it should for basic things, and mostly isn't a big issue. The icons are huge, but many of them look nice enough I don't mind. There are three main issues with it, though.&lt;/p&gt;
&lt;h3&gt;Switching Pages&lt;/h3&gt;
&lt;p&gt;This just plain sucks. You need to complete a full swipe across the entire screen for the page to turn. I mess this up much more than I get it right, so I'm hard pressed to believe that this couldn't use some tweaking. You can tap the dots at the bottom of the page, but they're tiny and as far as I can tell they're built for a mouse. If you use a touchpad this swipe is fairly reliable, so this really seems to just be an issue with the touchscreen implementation.&lt;/p&gt;
&lt;h3&gt;Folders&lt;/h3&gt;
&lt;p&gt;Folders work just fine, but they're only really usable through touch gestures. There used to be a way to add things via the Software app (horrible name for that, while I'm on the topic), but that's gone now, as far as I can tell. If you want to use a folder, you have to drag and drop every item by hand into the folder without missing it by one tile.&lt;/p&gt;
&lt;p&gt;Furthermore, if you have a lot of apps you haven't categorized yet (for example you downloaded the "security lab" group in Fedora), you'll probably be dragging and dropping each app across multiple pages of the app grid. See the section on switching pages for why this is annoying.&lt;/p&gt;
&lt;p&gt;The easiest way I can think of on the spot to make this work better is to simply rip off the PS4's folder interface. You can create a folder and then pick what you want to put in it (which is useful for when you're just starting to sort things), or you can pick an item and tell the system to put it in a specific folder. This could look similar to the WiFi network picker, but with checkboxes rather than just a flat list.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Especially if you have a 2-in-1 laptop, or maybe even if you just have a regular laptop with a big touchpad, give GNOME another crack if it's been a while. They did what I once considered to be the impossible, and made a UI that targets tablet and desktop &lt;em&gt;both&lt;/em&gt; without making either stick out as a bad experience.&lt;/p&gt;
&lt;p&gt;GNOME is a pretty solid tablet interface, and they didn't even make a "tablet mode" to get there. You'd also never know if you didn't have a touchscreen. I think that's pretty impressive indeed.&lt;/p&gt;</content><category term="Tech"></category><category term="tablet"></category><category term="tech"></category><category term="ios"></category><category term="android"></category></entry><entry><title>What Happened to the Tablet Revolution?</title><link href="https://cannoncontraption.github.io/tabletrevo.html" rel="alternate"></link><published>2022-07-29T00:00:00-04:00</published><updated>2022-07-29T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-07-29:/tabletrevo.html</id><summary type="html">&lt;p&gt;Not that many years ago, there was a significant amount of worry from people in the PC world. There was a new, disruptive marketplace segment that threatened to wipe out the PC world entirely. The tablet takeover is all but irrelevant now, and PCs remain (in one form or another …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Not that many years ago, there was a significant amount of worry from people in the PC world. There was a new, disruptive marketplace segment that threatened to wipe out the PC world entirely. The tablet takeover is all but irrelevant now, and PCs remain (in one form or another) completely dominant for serious work in many (perhaps even most) professions.&lt;/p&gt;
&lt;h2&gt;Why Use a Tablet?&lt;/h2&gt;
&lt;p&gt;First of all, it's probably worthwhile to first discuss what problems the tablet was suppsed to solve.&lt;/p&gt;
&lt;p&gt;Tablet computing was meant (as far as I can tell) to bring about a new revolution in computing by bringing a bigger screen to the more intuitive touchscreen interfaces. I don't think it's very hard to imagine why somebody would want this. Teaching someone new to computers how to use a mouse takes time, no matter how small that amount of time is. Ths time could be better spent teaching someone concepts such as design language in user interfaces, or what types of websites to avoid. Mousing around can be quite frustrating for a beginner, but by the time tablets were taken seriously, capacitive touchscreens had improved enough that they could be used to deliver actually compelling experiences all their own. It's natural to pinch to zoom, it's like stretching fabric, and you don't generally need a hint on screen to tell you how to do it. On the other hand, I'm not sure what portion of the popultion knows about Ctrl + and Ctrl -, but I'm pretty confident it's not 100%, or even as widely known as pinch to zoom. There's a lot of human factors involved in why this is, so intuitively it makes sense to push for this type of design. That's what progress looks like.&lt;/p&gt;
&lt;p&gt;So, the smartphone revolution happened, starting with the iPhone and cascading into Windows Mobile 7, the Zune HD, Android OS, and even (briefly) Blackberry OS. There were (and are) others, but these are the major players from the early days.&lt;/p&gt;
&lt;p&gt;Given this new revolution of friendly computing you can carry in your pocket, it made sense to scale this up to something bigger. We had been reading the news on our computers for ages, but a phone screen (still) is a little too small for many people to be comfortable using it to read the Times. The result was an immediate race to make the biggest and best tablet interface. Again, this more or less kicked into full gear with Apple's solution, the iPad.&lt;/p&gt;
&lt;h2&gt;Less than Excellent, Less than Last Time&lt;/h2&gt;
&lt;p&gt;This time was a little different, though. The major players (for the most part) took a phone interface and scaled it up for a tablet. Android 3.0, iOS, and Windows 8 all took this approach. Out of these, Windows largely went back to focusing on desktop, and Android went back to investing in the phone OS. Android still has a presence, as does Windows, but they're both relegated to budget offerings, where the iPad virtually dominates the high end of the market.&lt;/p&gt;
&lt;p&gt;Basically the only one of the thre of these to keep continuing to focus on a tablet interface in any meaningful way was Apple, and it shows. Android and Windows still offer tablet features, but both of them have kept their focuses on their original markets, respectively. More accurately, Android has never kept its focus on tablets, and Windows has opted to focus on 2-in-1 PCs over tablets.&lt;/p&gt;
&lt;p&gt;This has left us with Apple, Amazon's Kindle (basically the last serious long-running Android tablet), and 2-in-1 PCs that run desktop apps. Google's Play Store will ususally give you phone apps that scale poorly to larger screens, Windws apps scale poorly to smaller screens, and the iPad is left as the only really polished experience.&lt;/p&gt;
&lt;p&gt;Far from the revolution that was the smarphone, this time around we get a scaled up version of the phones we already have, or we get a lot of upset PC users over Windows 8.&lt;/p&gt;
&lt;h2&gt;Bad Email Device?&lt;/h2&gt;
&lt;p&gt;Typing on a tablet can be awkward. I'm writing this article on a Surface RT with the included touch cover, and while vastly better than using the touchscreen to try and type, it's far from a real keyboard and I mess up a lot more than even on my worst laptop.&lt;/p&gt;
&lt;p&gt;Phones get away with this due to their size. You can comfortably use your thumbs to type on the screen and get reasonable speeds that way. I think it's fair to say that the typing speed ceiling is far higher on a full size keyboard, but that doesn't make the phone terrible at typing. Then there's desktops and laptops. Both of these have a full size keyboard that (usually) give you individual, full size keys and a plethra of hotkeys to use with them, making the experience for keyboard users actually pretty good. Even Windows 8 could be operated comfortably from the keyboard without thinking too hard about it.&lt;/p&gt;
&lt;p&gt;Tablets, on the other hand, have a screen size that makes using thumbs to type a little awkward, since the full device is much bigger and heavier than a phone, but they're often too small to put a full size keyboard on screen; even when they're big enough, they rarely even try since half of the benefit of a full size keyboard is raised keys to aid in touch typing.&lt;/p&gt;
&lt;p&gt;The best solution that I've seen is on the Surface with the type cover, but then you're basically sitting down with a laptop and a stand. That's putting aside the fact that you're getting the touch cover with the $500 base surface, which doesn't even feature an Intel CPU. That's far less of a burden if you can at least install your own apps, but Microsoft's play during this era was to offer a tablet that only allows Windows Store apps. For a similar price you could get a much more capable laptop with a touchscreen and have a better in-lap experience anyhow.&lt;/p&gt;
&lt;p&gt;So while Ballmer's infamous soundbyte about the iPhone may seem funny now, had he been talking about tablets he may have had a point.&lt;/p&gt;
&lt;h2&gt;So do they Suck?&lt;/h2&gt;
&lt;p&gt;No*&lt;/p&gt;
&lt;p&gt;Tablets were never going to take over the PC market, and it's silly to think so in hindsight. The mouse offers so much more precision, and serious business usually requires a keyboard or something similar for conversations over email.&lt;/p&gt;
&lt;p&gt;Tablets are very good for reading things online, however, as well as in-car movies and light gaming, like Solitaire.&lt;/p&gt;
&lt;p&gt;This may seem kind of obvious in hindsight, but it's why the tablet revolution never came. Even for professions that now have the iPad Pro for their work, such as graphic design, there are lots and lots of industries that never got their tablets. Nobody seems to target the engineer or software developer with a tablet. It's widely preferred in these fields to have the precision and utility of a mouse and keyboard, and tablets sre specifically designed to remove the complicated options and precise input of a mouse in favor of a more intuitive touchscreen and fewer confusing looking ports on the side of the device.&lt;/p&gt;
&lt;p&gt;I feel like I should mention that this is in fact (very slowly) changing with the iPad. You /can/ do serious work on it in video and sound production, or really any artistic field that makes use of the pen. It's become a very cool /option/, and options are good. Furthermore, this iPad seems different with its keyboard case, similar to what the Surface attempted to do so many years ago.&lt;/p&gt;
&lt;p&gt;But that's it, that's my take on why the tablet revolution never came. Now to stop typing on this stupid touch cover and go back to my model M :)&lt;/p&gt;</content><category term="Tech"></category><category term="tech"></category><category term="tablet"></category><category term="android"></category><category term="ios"></category><category term="windows8"></category></entry><entry><title>Transition to Pelican</title><link href="https://cannoncontraption.github.io/transition-to-pelican.html" rel="alternate"></link><published>2022-07-27T00:00:00-04:00</published><updated>2022-07-27T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2022-07-27:/transition-to-pelican.html</id><summary type="html">&lt;p&gt;In my last post in the tech blog, I talked about how blogging tech is hard, and generally whined about how I managed my site for way too long. My conclusion was that it was my own fault and I should do better. Eventually, I implemented the changes I had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my last post in the tech blog, I talked about how blogging tech is hard, and generally whined about how I managed my site for way too long. My conclusion was that it was my own fault and I should do better. Eventually, I implemented the changes I had suggested to myself in order to get myself to post more often, and lo and behold I nearly abandoned the blog immediately after that.&lt;/p&gt;
&lt;p&gt;I personally don't believe that the tech I had made before was all that bad, it was just a lot of manual effort for a blog I'm not super invested in at the moment, and any amount of real work to maintain it felt like it was too much work. I'm here to solve that now with probably the most drastic site redesign since I left Blogger and struck out to make my own site from my own tech.&lt;/p&gt;
&lt;h1&gt;Blogging Was Hard&lt;/h1&gt;
&lt;p&gt;First, I feel like I should talk about what I was doing before that made blogging so difficult to justify. In reality I've never had any trouble expressing myself with words, and I rather enjoy writing long-form articles every now and again. There's a lot of reasons why, but mainly it boils down to the same reason many software folks keep a rubber duck on their desks, it's a way to vent and clear one's thoughts in order to better organize them. Putting a structure on things that mentally crystallize for months or years can shed light on the full scope of those thoughts, and this organization process is therefore very valuable to me.&lt;/p&gt;
&lt;p&gt;This only works when it's easy to do.&lt;/p&gt;
&lt;h2&gt;First Generation Bashworks&lt;/h2&gt;
&lt;p&gt;My first iteration of the site was Blogger. This worked, but I ended up writing most of my posts directly in HTML. There's nothing wrong with doing this, but it's tedious and kind of defeats the purpose, in a way. I also never quite got the site looking like I wanted, it always seemed unfinished.&lt;/p&gt;
&lt;h2&gt;Second Generation Bashworks&lt;/h2&gt;
&lt;p&gt;At the time I was attending university, and had written a new blogging framework with some friends as a project for the computer science club. The idea was that we'd have an intranet site on campus that members of the club could post interesting things to, possibly hosted on a raspberry pi. We toyed with posting it to the internet but nobody came up with a good way to do that on the cheap (free). In the end, we made a desktop-in-a-browser, which we had licensed &lt;a href="http://www.wtfpl.net/"&gt;WTFPL&lt;/a&gt; meaning I could do as I pleased with it. There was also some server-side stuff involved, since we wanted user logins, and a simple way for new members to post stuff without having taken our classes on web programming. All of this I discarded, since my hosting platform would be GitHub Pages.&lt;/p&gt;
&lt;p&gt;Basically, I took &lt;a href="https://gitlab.com/CannonContraption/windowtools"&gt;WindowTools&lt;/a&gt; and &lt;a href="https://gitlab.com/CannonContraption/widgettools"&gt;WidgetTools&lt;/a&gt; and made a new site with them. However, I did a pretty lazy job in this first iteration, and rather than store articles as separate pages that are loaded upon request, the whole blog was pretty much contained to a single JS file which set up the page and also stored the posts as JavaScript strings. I knew this was insanely dumb at the time even, but I didn't really care. It got me up and running.&lt;/p&gt;
&lt;p&gt;Around the time I wrote the &lt;a href="blogging-is-hard.html"&gt;Blogging is Hard&lt;/a&gt; article, I had finally gotten fed up with this. I also wanted a static site. Read the post if you want more information about that generation of this site.&lt;/p&gt;
&lt;p&gt;I had used mainly groff at the time to compose articles. This was pretty convenient compared to the JavaScript strings, but still required some hand-editing afterwards. I had a custom font I wanted to use, and the new classic site and the desktop site both required hand-coded links to hook up the articles.&lt;/p&gt;
&lt;h1&gt;Transition to Pelican&lt;/h1&gt;
&lt;p&gt;Around the same time as I moved to the second-generation blog site, a &lt;a href="https://kroche.io"&gt;friend of mine&lt;/a&gt; had just transitioned to Pelican himself. He had told me in great detail how great it was, how it made a nice static site, and how all it required to compose articles was Markdown.&lt;/p&gt;
&lt;p&gt;It wasn't until a few years later that I went into business with him and a friend of his, and the site they had created was Pelican based. I was impressed.&lt;/p&gt;
&lt;p&gt;The site coming out the other side looked as professional as most other sites in our field, and it was really quite easy to add content to. The dev server was also very helpful in making changes of any type to the site, so I eventually concluded that this was the right move for my blog.&lt;/p&gt;
&lt;p&gt;There's also the added benefit that I have an Atom feed again, something that's been missing since I moved away from Blogger since I'm a little too lazy to hand-write that.&lt;/p&gt;
&lt;h2&gt;This looks pretty plain...&lt;/h2&gt;
&lt;p&gt;Yes it does. If you don't agree with this, you're probably reading this (far?) in the future once I've gotten around to rewriting the default theme with something a little more unique. If so, enjoy! I'm sure whatever I came up with is suitably dry and boring, just like this post probably is to most people.&lt;/p&gt;
&lt;h1&gt;Desktop site?&lt;/h1&gt;
&lt;p&gt;This is going to be in limbo for a bit, I think. The desktop site is pretty formulaic, so I could transition it to a simple Pelican theme, or I could start over entirely and just integrate WindowTools as an alternate frontend. I believe Pelican is flexible enough to support this well, without losing any of the simplicity of site management that it brings.&lt;/p&gt;
&lt;p&gt;So, I've moved all of my posts over to Pelican, and pretty soon I should have the desktop back up and running, available from a link at the top of the page or something.&lt;/p&gt;</content><category term="Tech"></category><category term="blog"></category><category term="tech"></category></entry><entry><title>Ratchet and Clank (PS2) Review</title><link href="https://cannoncontraption.github.io/ratchet-and-clank-ps2-review.html" rel="alternate"></link><published>2020-12-28T00:00:00-05:00</published><updated>2020-12-28T00:00:00-05:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2020-12-28:/ratchet-and-clank-ps2-review.html</id><summary type="html">&lt;h2&gt;1. Introduction
&lt;a name="1. Introduction"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;The Ratchet and Clank series has
been getting a lot of buzz lately, what with the trailers
for the new PS5 entry, Rift Apart. However, the series got
its start way back in 2002 on the PS2, as Insomniac
Games&amp;rsquo; first entry on the platform. This particular
series …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. Introduction
&lt;a name="1. Introduction"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;The Ratchet and Clank series has
been getting a lot of buzz lately, what with the trailers
for the new PS5 entry, Rift Apart. However, the series got
its start way back in 2002 on the PS2, as Insomniac
Games&amp;rsquo; first entry on the platform. This particular
series is, in my opinion, the single best 3D platforming
series ever released, and I don&amp;rsquo;t think I&amp;rsquo;m
alone in this.&lt;/p&gt;

&lt;h3&gt;1.1. Personally
&lt;a name="1.1. Personally"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;I got my start with the series
on the PS3. Ratchet and Clank Future: A Crack in Time was
the second game I ever played on PS3, behind the original
Little Big Planet. Having grown up mostly with the Nintendo
Entertainment System and a relatively weak
&amp;quot;multimedia&amp;quot; PC, the experience was mind-blowing
to me. Watching what was essentially a computer game render
visuals with particle effects everywhere, a 3D world I could
run around in, the massive number of things on screen, it
captivated me. As if the visuals weren&amp;rsquo;t enough, the
sound design and soundtrack in that game are among the best
ever made, certainly up to that point, but even now the
experience still holds up remarkably well.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;My first interaction with the
first game, however, was much later on. The first time I
played it was in the Ratchet &amp;amp; Clank Collection, on PS3.
The graphics and sound were of course much more primitive
than the technical showpieces that are the PS3 entries I had
played up to that point, but nevertheless it felt like much
the same game.&lt;/p&gt;

&lt;h3&gt;1.2. Game Basics
&lt;a name="1.2. Game Basics"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;Core to the Ratchet and Clank
series is the usual 3D-platforming challenges, a diverse set
of enemies with different attack styles, and an enormous
arsenal of weaponry in various amusing and cartoonish forms.
Interspersed with this are occasional racing or puzzle
sections, that require either quick thinking, mastery of a
DualShock, or careful consideration and planning. Usually
it&amp;rsquo;s a mix of all of this. I believe it&amp;rsquo;s for
reasons of easy adaptability to new concepts and hardware
that Sony chose to make another Ratchet and Clank be one of
the showpieces of PS5 launch marketing.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;The focus of Ratchet and Clank
is combat-readiness first, platforming chops second.
You&amp;rsquo;ll need both to a degree, but there&amp;rsquo;s a lot
more focus on the gun- and wrench-play than on tricky camera
setups and precise jumps. This, in my opinion, makes it a
lot more approachable to modern (2020) audiences than many
of its contemporaries.&lt;/p&gt;

&lt;h2&gt;2. Controls
&lt;a name="2. Controls"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;So yes, as a warning, you should
have an original controller for whatever PlayStation the
Ratchet and Clank you&amp;rsquo;re interested came out on.
Aftermarket controllers work, but they often make the game
much harder to play. In the case of Ratchet and Clank 1,
that would be a DualShock 2.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This, in my opinion, is one of
the great strengths of the game. Most of the series,
possibly all of it, shares this in common- while not every
feature of the console the game launched on is used, the
developers aren&amp;rsquo;t afraid to take advantage of
what&amp;rsquo;s unique and special about that system. In the
case of the PS2 that&amp;rsquo;s the controller, as I mentioned.
However, the game does this without feeling like features
got shoehorned in or slapped on for no reason- if a feature
of a controller is used, for example, it&amp;rsquo;s done
because whatever mechanic uses that feature is uniquely
suited to it. Analog buttons, for example, are used in
swimming in the game. Not only do you have the option of
ascending and descending underwater, but you can control
that by changing the pressure of your finger on the X and
square buttons. A similar story is true for jumping, though
arguably this could be done as well to a reasonable degree
with a digital button.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Beyond just the featureset of
the controller, the controls in Ratchet and Clank are...
fine. They work, they don&amp;rsquo;t feel super awkward or
silly, but they&amp;rsquo;re certainly among the roughest in the
series. For example, the lack of a strafe function is
annoying, even though there&amp;rsquo;s a button basically free
for that.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Where the control set really
seems odd is in its choice to duplicate buttons. Both sets
of shoulder buttons generally do the same thing. So, while
in the PS3 Ratchet and Clank games, you can use R1 to fire
your equipped weapon, R1 is crouch in the original, and so
is R2. There are some minor areas where one set has a
different function from the other, but it&amp;rsquo;s rare.&lt;/p&gt;

&lt;h2&gt;3. Graphics
&lt;a name="3. Graphics"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Ratchet and Clank is...
inoffensive in terms of graphics. It probably won&amp;rsquo;t
blow your mind, even as PS2 games go, but it&amp;rsquo;s also
not hideous. It&amp;rsquo;s stylized enough that the world fits
with itself, the graphics don&amp;rsquo;t get in the way of
this. However, it still retains a lot of flat polygonal
objects, and there are some cut corners when it comes to
things like rounded edges.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;As you would expect, the
particle effects are rough and dated, the character models
aren&amp;rsquo;t super detailed, and there&amp;rsquo;s not very much
in the world that could be used to relate scale to the real
world. It&amp;rsquo;s part of the charm of the game in a way,
but if you&amp;rsquo;re not into that sort of thing I could see
the sort of random scale of some objects being an issue. If
you can play Half-Life without any issue, you&amp;rsquo;ll be
fine here, too. However, when put together, what really are
just technical limitations contribute immensely to the style
of the game, making it feel a little bit more like
you&amp;rsquo;re inside a cartoon. The basic particle effects
are maybe the only thing that breaks this a little bit, but
even then it&amp;rsquo;s nothing to really break the experience
overall.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;That&amp;rsquo;s not to say I
don&amp;rsquo;t enjoy the graphics in this game. I think
what&amp;rsquo;s especially impressive is that they managed to
get long, detailed, winding stages all to fit into memory on
the PS2 without awkward loading screens in the middle of a
planet or a path. Once you&amp;rsquo;ve landed, you aren&amp;rsquo;t
waiting for anything to load off of disk, which contributes
immensely to the feeling of immersion that the game&amp;rsquo;s
world provides. Given that the game was released two years
in to the lifespan of the PS2 (which itself is notoriously
difficult to develop for) and that this is Insomniac&amp;rsquo;s
first PS2 title, what they pulled off with the hardware is
still impressive, despite its shortcomings.&lt;/p&gt;

&lt;h2&gt;4. Sound
&lt;a name="4. Sound"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;4.1. Sound Effects
&lt;a name="4.1. Sound Effects"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;This is one area where the
collection falls flat. If you care a lot about audio in your
PS2 games for some reason, play this on the PS2. The PS3
gets the pitch wrong in a bunch of places, which renders
some features of a couple gadgets useless (most affected
being the metal detector).&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Sound on the PS2 is fine for a
PS2 game. It won&amp;rsquo;t win any awards, it&amp;rsquo;s dated at
best and has a few harsh sounds that some people will find
annoying, like a lot of (especially older) games, but
it&amp;rsquo;s no so bad as to ruin the experience. Again, it
fits with the style of the game, and where in history it
belongs.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Sound effects are generally
basic. There&amp;rsquo;s quite a lot of pitch shifting involved,
which can sometimes make the different sounds sound
interesting, but usually the developers use this for an
over-exaggerated Doppler effect.&lt;/p&gt;

&lt;h3&gt;4.2. Music
&lt;a name="4.2. Music"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;The soundtrack to the original
is very much computer generated. It wears this proudly on
its sleeve, and while it does occasionally try to mimic a
real instrument, it generally doesn&amp;rsquo;t do this in a
totally blatant, tasteless way, and once again the way that
instruments are used contributes somewhat to the aesthetic
of the game. Of course there are ups and downs in this one,
just like any soundtrack, but by the time the game is done
very few of the tracks should have worn out their welcome,
and if one did it won&amp;rsquo;t have probably played for all
that long past that point.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;However, that&amp;rsquo;s something
I should also put in context. Relative to what most other
soundtracks of the time were like, this one is a great
example of well-composed music matched excellently to each
environment. The music beautifully complements the game
world, both of them feeling dated, but in a pleasant,
nostalgic kind of way for a modern audience, rather than a
tacky, tasteless way. Despite any minor complaints I make
about the soundtrack, I wouldn&amp;rsquo;t switch it for
anything, even at its weakest.&lt;/p&gt;

&lt;h2&gt;5. Game World
&lt;a name="5. Game World"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;5.1. Story
&lt;a name="5.1. Story"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;I&amp;rsquo;m going to try my best
not to spoil anything here, but the &amp;quot;Save the solar
system&amp;quot; premise presented within the first 10 minutes
of the game is fairly true to what the game is. It does
require some suspension of disbelief, since the hero of the
story is basically a kid who made a starship using a wiki in
his backyard, not some galactic authority. However,
overlooking this the story is sufficient to keep the game
engaging, and to give some stakes to everything the
character does in that world.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;The writing is generally pretty
smart, and while not every joke in the game is going to be
to everyone&amp;rsquo;s taste, the game is overall very
lighthearted, especially considering one of the core tools
the character has is an enormous arsenal of insane weaponry
and various other massive mayhem making mechanisms. In fact,
I would go so far as to say that even given that it was the
original in the series, Ratchet and Clank has some of the
better writing of all of the games in the series. It has its
rough edges, and unfortunately portrays Ratchet as a whiny
teenager, rather than the level-headed awkward fun-guy from
the later games. However, the way this story is told makes
Ratchet and Clank&amp;rsquo;s friendship in the later games make
a lot more sense. In this early game, they start out as
total strangers. Ratchet especially views his relationship
with Clank at first as transactional, and doesn&amp;rsquo;t seem
to be seeking companionship at all.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I want to note briefly here that
in this respect, I think the original game far outpaces the
2016 remake. The new game is good as well, but story-wise
the original introduces the characters and knits them
together in a much more logical way. You know why Ratchet
and Clank stick together, it&amp;rsquo;s not something that just
happens out of nowhere with no explanation or story behind
it other than just pure availability of another character in
the vicinity when robots attack. While we&amp;rsquo;re on the
subject, the tone of the original is, at least in my
opinion, much more suited to the kind of game that any
Ratchet and Clank really is.&lt;/p&gt;

&lt;h3&gt;5.2. Environments
&lt;a name="5.2. Environments"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;The different planets the
characters explore, and overall the setting in general is
something that contributes a lot to the game. Starting off
in the middle of nowhere, then proceeding to explore nearly
abandoned spaceships and stations, toxic worlds filled with
poisonous gas, worlds covered in ocean, ice worlds, each
with their own challenges unique to that world adds a great
amount of depth to the game. A lot of the puzzle of the game
is simply figuring out the best way to conquer an
environment. Graphically, most of these areas are fairly
primitive, and some of them feel mechanically similar, but
it almost always feels like there&amp;rsquo;s something unique
about each place. It&amp;rsquo;s also unique to see flying
chainsaws that aren&amp;rsquo;t trying to kill your character,
and find yourself not really questioning it. This may be the
ultimate test of a game world- can you believe it? If not,
do you need to? By the way, I feel I can spoil this much
safely- if you manage to shoot down one of those flying
chainsaws, it gives you a bolt- while not worth much,
it&amp;rsquo;s still kind of fun to see if you can manage.&lt;/p&gt;

&lt;h3&gt;5.3. Side Missions
&lt;a name="5.3. Side Missions"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;On the whole, this is a linear
game. Side missions aren&amp;rsquo;t the focus here at all.
However, there are some alternate paths you can take.
Sometimes these are more obvious than others, but the side
areas and the main quest path feel incredibly similar. This
means that it&amp;rsquo;s easy to choose the wrong one in some
cases, and travel down the side path thinking it was the
story path. Unfortunately for those who like a quick, linear
game, the only way to know that all paths are completed is
to travel through the start menu for a minute and find the
missions page.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;There generally aren&amp;rsquo;t
side missions per se, as a result. However, there are
gadgets and items that can be collected by visiting side
paths. They usually come with mission items in the missions
screen marked as just &amp;quot;Explore the Destroyed City&amp;quot;
and things along those lines. If there&amp;rsquo;s something
major to explore (as in not a gold bolt, etc.) then there
will be a mission item for it marked in the missions
page.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Each of these side paths result
in a reward of some sort, and the vast majority end up being
well worth it. Unlike future games, for example, gold bolts
are not just used for unlocking cosmetics in-game, but are
instead used to buy gold weapons. This becomes incredibly
useful, especially in late game or in new game+ (which is
NOT challenge mode in this entry).&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Overall, my advice in most
Ratchet and Clank games is to follow all of the side paths
completely. Even if you don&amp;rsquo;t want the reward at the
end, one of the common tasks in the game is grinding for
bolts. It&amp;rsquo;s not strictly required, you can get by
without doing it, however there&amp;rsquo;s almost always some
weapon or item that would make the game that much more fun
that requires a great sum of bolts (or later other
currencies) to obtain.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Usually, Ratchet and Clank games
have some specific mini-game challenges, and in this game
that&amp;rsquo;s just hoverboard racing. Everything else is
generally just the usual platforming.&lt;/p&gt;

&lt;h4&gt;5.3.1. Hoverboard Races
&lt;a name="5.3.1. Hoverboard Races"&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p style="margin-top: 1em"&gt;Being perfectly honest,
I&amp;rsquo;m a little bit conflicted about these. The races
control like a kart racer just as much as anything.
There&amp;rsquo;s in-air steering, powerups, accelerator pads,
etc. etc. There&amp;rsquo;s no such thing as a twitch reaction
due to the heavy use of slow tank controls, and
there&amp;rsquo;s a heavy penalty for missing an accelerator
pad, or crashing. Given that both of these are easy to do,
the races certainly take some practice and patience.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;These races usually also have
crates all over the place, which can make for a fun
additional target. Participation in races isn&amp;rsquo;t a
terribly great way to earn bolts, but at least the first few
times through a course there&amp;rsquo;s something to be
collected if you have built up the skill to do it.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;There are two courses in the
game, one in Blackwater City on Rilgar, fairly early in the
game, and a required race on Kalebo later in the game. While
the Blackwater City race is strictly optional, I strongly
suggest everyone play it. Between the two courses, this is
the easier one, and the prize for first place, while not
strictly required, makes the later race MUCH easier.
It&amp;rsquo;s hard to understate this- while the prize you get
only matters in races, you&amp;rsquo;ll spend a similar amount
of time racing either way, you&amp;rsquo;ll enjoy it a lot more
if you win the first race.&lt;/p&gt;

&lt;h2&gt;6. Conclusions
&lt;a name="6. Conclusions"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;In conversation I don&amp;rsquo;t
give people number scores for a game, I don&amp;rsquo;t think
that really gives a good impression of a game on its own.
However, I&amp;rsquo;m going to bury one way down at the bottom
here, to sort of give my overall impressions. I give Ratchet
and Clank a 56/64. It was a solid start to an even more
solid game, and despite my nitpicks with it, it&amp;rsquo;s not
a case where having played the later games the original is
no longer playable or enjoyable. The earliest games in the
series hold up almost as well as the later entries, and is
certainly worth playing if you can get your hands on a
copy.&lt;/p&gt;

&lt;h2&gt;7. A Note on the Ratchet and Clank Collection
&lt;a name="7. A Note on the Ratchet and Clank Collection"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;If this is the way you find the
game, it&amp;rsquo;s still worth picking up. However, it runs
only at 720p, not 1080 like you might expect for a simpler
game running on PS3. Also, it does have a few more framerate
dips than the original. That said, the first game is fine
here, at any rate. I would advise getting the PS2 original
for any of the later games, however. At my best guess, the
engine from the first game was ported, and all of the newer
games run on that. This is fine to simply play the games,
but with my experience with the third game, even running on
an HDTV it looks far better on the PS2. There are various
blur and depth of field effects that sell some environments
(like underwater) where in the collection it looks like a
cheap PS2 game. This isn&amp;rsquo;t a case where that should
stop you from trying the game, again, but bear it in mind
when playing through.&lt;/p&gt;</content><category term="Games"></category><category term="game"></category><category term="review"></category></entry><entry><title>Games!</title><link href="https://cannoncontraption.github.io/games.html" rel="alternate"></link><published>2020-12-18T00:00:00-05:00</published><updated>2020-12-18T00:00:00-05:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2020-12-18:/games.html</id><summary type="html">&lt;p style="margin-top: 1em"&gt;I Play Video Games.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This isn&amp;rsquo;t really anything
special these days, but I figure that at this point
I&amp;rsquo;ve probably played enough video games to have some
meaningful comments on them from time to time. This section
will be where I talk about games, gaming, what I&amp;rsquo;m …&lt;/p&gt;</summary><content type="html">&lt;p style="margin-top: 1em"&gt;I Play Video Games.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This isn&amp;rsquo;t really anything
special these days, but I figure that at this point
I&amp;rsquo;ve probably played enough video games to have some
meaningful comments on them from time to time. This section
will be where I talk about games, gaming, what I&amp;rsquo;m
playing, the state of the industry, so on and so forth.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;While not a terribly unique
position, I&amp;rsquo;ve been playing games most of my life,
starting on PC and on the original Nintendo (some of you
probably know it best as the NES). While these days all my
PC gaming is on Linux, I have four of the five Playstations,
an Xbox One X, a Nintendo, a Super Nintendo, and a FireCore
Genesis. This, in my opinion, gives me a wide base of gaming
experience to draw upon. As someone technical, I believe I
also have a basic understanding of how each of these
consoles work, as well as their strengths and
weaknesses.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;So if any of this sounds
interesting, please stay tuned! Hopefully this section will
prove entertaining and informative to you.&lt;/p&gt;</content><category term="Games"></category><category term="games"></category><category term="intro"></category></entry><entry><title>Blogging is Hard.</title><link href="https://cannoncontraption.github.io/blogging-is-hard.html" rel="alternate"></link><published>2019-07-31T00:00:00-04:00</published><updated>2019-07-31T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2019-07-31:/blogging-is-hard.html</id><summary type="html">&lt;p&gt;Update (2022-08-23): This post was written &lt;em&gt;long&lt;/em&gt; before I started using Pelican, and the entire post was originally shown via the desktop site. If you see mentions of the technology showing this post/blog and you want the full experience of what that looked like (and you're on a desktop …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Update (2022-08-23): This post was written &lt;em&gt;long&lt;/em&gt; before I started using Pelican, and the entire post was originally shown via the desktop site. If you see mentions of the technology showing this post/blog and you want the full experience of what that looked like (and you're on a desktop/laptop, not a phone), open the post in the "desktop site", linked above.&lt;/p&gt;
&lt;h2&gt;1. No It&amp;rsquo;s Not.
&lt;a name="1. No It&amp;rsquo;s Not."&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;My title this time is a lie.
It&amp;rsquo;s a big, fat, JUICY lie. I&amp;rsquo;ve just put myself
in a position where it&amp;rsquo;s hard. No, really.&lt;/p&gt;

&lt;h2&gt;2. Cool Tech
&lt;a name="2. Cool Tech"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;The existence of this whole blog
is a testament to one thing in particular- I really love
technology. Many people would probably go so far as to say
that I love web technology, since I used so many
up-and-coming web browser features to make such a blog.
It&amp;rsquo;s this interest in cool tech that first drew my eye
to the Computer Science Club at school. This is where our
story about blogging starts.&lt;/p&gt;

&lt;h3&gt;2.1. The Computer Science Club
&lt;a name="2.1. The Computer Science Club"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;I loved the concept of a
computer science club, and for the first semester I was a
part of it, it introduced me to many wonderful people,
exciting tech, and challenging puzzles. All this was without
the aid of a professor. The first (and really only) major
project I embarked on during my time with the club was work
on a website. We had huge goals for the site, ranging from
personal blogs for members, to scheduling tools, to small
size for easy hosting down the road. And that&amp;rsquo;s
ignoring the big killer feature for me personally. It was
going to be a desktop in a browser.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;As is probably clear by now,
this site is sort of born out of the ashes of that project.
Club leadership was only solid for the first semester I was
there, and quickly as schedules filled up people started
wandering off to internships or other random commitments. It
wasn&amp;rsquo;t really even a lack of interest in the club,
there was plenty of that. It was lack of interest in
leadership. No one wanted to figure out the logistics, the
marketing, the random member questions, the finances of a
small club and restrictions on what can be done with
university funds.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;That project had gotten really
close to being finished, too. We had a solid front-end, as
I&amp;rsquo;ve mentioned (and you can probably see) it&amp;rsquo;s a
desktop in a browser, complete with most of the hallmark
features of a desktop like stacking windows, minimization,
maximization, a taskbar, and many other things. At the time
of writing there&amp;rsquo;s no mobile site, but I&amp;rsquo;ve been
mulling over options for that for a really long time, and
when the site was still the computer science club site I had
even begun development of a drop-in replacement window
manager for mobile, since, after all, the API itself is
really not too complex. What we lacked was a backend.&lt;/p&gt;

&lt;h3&gt;2.2. Server-side CMS systems suck.
&lt;a name="2.2. Server-side CMS systems suck."&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;That last sentence was a sort of
lie. We had most of a backend. We had enough so that our
site could list a directory and pull up blog posts, using a
database to hold metadata and other random stuff of that
nature. It worked, we had example blog &amp;quot;posts&amp;quot;,
and if it were just us we probably could have left it at
that and put the site live. The problem was it was supposed
to be club wide.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;The thing about computer science
as a major is that it attracts a wide variety of people, all
at different skill levels. There are people interested in
low- level programming for robotics, embedded systems, and
other such fields. They probably wouldn&amp;rsquo;t have much
interest in learning PHP in order to insert a blog post onto
a website, nor would they probably want to do it in
JavaScript. As a general rule, we wanted to avoid making
people learn database programming, probably some Python,
maybe PHP, and of course HTML and CSS just to post about
some new tool they were playing with in their Java I course,
or to post about how they think their class (and broadly
classes on a specific topic) might be improved. That kind of
learning curve would be a huge turn-off. To add insult to
injury, not everyone associated with the club would need to
even be a CS major, they&amp;rsquo;d just have to be interested
in the topic in some way. Shutting them off with huge
technical barriers would have been a mistake.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;To be clear about all of this,
we knew we didn&amp;rsquo;t have to do most of this. The problem
wasn&amp;rsquo;t at all how to make a blogging site, it was how
to make a site that could grow with the club, and also be a
project for the club. We wanted it to be a one-stop-shop for
everything CS, and we wanted it to be set up so that no one
could just waltz in and delete everyone else&amp;rsquo;s posts
with an accidental query or mis-click. We could have used
WordPress, but that has a lot of problems. We could have
used Pellican with someone managing the merge of new posts.
That doesn&amp;rsquo;t leave much avenue for people to just post
stuff though, since there&amp;rsquo;d be a social process to
getting things posted. We all know how the stereotypical CS
student loves social processes. So we may have bit off a bit
more than we were willing to chew.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Even now, though, I&amp;rsquo;m
underselling this a bit. We had a login system, we had
randomized user IDs for sessions, we had a salted, hashed
password table, and all of this had a frontend. We just
never finished the blog composer (we got really close
though) and we never integrated any of this with any other
part. If we had decided to go ahead and bring the site live
in the state it was in, it would have been a matter of a
couple of weeks before we had it more or less working fully.
That&amp;rsquo;s weeks as a side project, not weeks of constant
development time.&lt;/p&gt;

&lt;h2&gt;3. Surviving the CS Club Site
&lt;a name="3. Surviving the CS Club Site"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;By the time two months had
passed and no development had really happened on the site,
or even sooner when I realized I was the only one to commit
in a month or two, I was already thinking ahead a bit. Many
of my friends from the old CS club are what I like to refer
to as &amp;quot;technical &lt;br&gt;
minimalists&amp;quot;. We all like software that follows the
UNIX philosophy to some extent. Tools or components that
make up a bigger project have served all of us well over the
years, and so with that we wanted to make sure that the site
we use to post all of this random chatter followed that as
well to some extent. In reality, I was the one who really
enforced this, but I think everyone at worst approved of it.
So, the design of the site wasn&amp;rsquo;t one big
interconnected set of assets and scripts and so forth, but
instead a few frontend modules tied together with some light
scripts and a backend. And while the backend was two pieces
that never got integrated with one another, this design
proved effective enough that only the site-specific
&amp;quot;glue&amp;quot; scripts needed to even know about the fact
that any of these modules were used together. This model is
still in use today, and I&amp;rsquo;m going to briefly touch on
the different parts that survive.&lt;/p&gt;

&lt;h3&gt;3.1. WindowTools
&lt;a name="3.1. WindowTools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;This is, quite frankly, the most
important piece of the entire site from a pure front-end
perspective. It&amp;rsquo;s the window manager, as the name
implies. It handles all of the movement, drawing, resizing,
and actions that can be performed on windows, and more
broadly on elements on screen. It even has a sort of
rudimentary event processor, though that&amp;rsquo;s really more
a set of queues and lists copy-pasted into the various
places they make sense for autostarting programs and letting
window contents run some JS code to handle resizing and
maximization.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;WindowTools was one of the
single most challenging pieces of web software I&amp;rsquo;ve
ever written. It is pure JavaScript. No libraries were
harmed- I mean used- in the making of this tool.&lt;/p&gt;

&lt;h3&gt;3.2. WidgetTools
&lt;a name="3.2. WidgetTools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;This is one of the less exciting
pieces. It&amp;rsquo;s a big wrapper so you don&amp;rsquo;t have to
think about the fact that you can&amp;rsquo;t really sit down
and write a web page in any reasonable amount of time in
pure JavaScript. It&amp;rsquo;s just not meant for that.
Instead, I took cues from GTK and designed a wrapper that
could do more traditional widget drawing without needing to
reinvent the wheel every time a button shows up on screen.
It can also do some &amp;quot;cooler&amp;quot; things like take a 2
dimensional array and turn it into a table, but I
didn&amp;rsquo;t end up using that very much at all.&lt;/p&gt;

&lt;h3&gt;3.3. PageTools
&lt;a name="3.3. PageTools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;I mentioned a mobile site. This
would have been the wrapper for the WindowTools API that
would make it mobile-ready. I never finished it, and frankly
it&amp;rsquo;s a mess. This isn&amp;rsquo;t helped by the fact that
I didn&amp;rsquo;t know how to write web pages for mobile at
that point in time. At all. While the tool technically is
still around, I don&amp;rsquo;t know if I even bothered
uploading it to GitLab or GitHub along with the rest of the
project.&lt;/p&gt;

&lt;h2&gt;4. There Is No Backend; Long Live the Backend
&lt;a name="4. There Is No Backend; Long Live the Backend"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;This site, as you see it right
now, contains absolutely none of the backend that we had
worked so hard to develop for the CS club site. Instead, in
the glue scripts I wrote this time, I added a JS file with a
bunch of functions. Each function would return the full text
of a post, and the blog display window simply takes that
text and sets the inside of the content window to whatever
that post function returned.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This is for a number of reasons.
First of all, the club site was designed to work in a very
similar way. The big exception here is that instead of one
big, dumb JS file, there would be an actual backend.
That&amp;rsquo;s not to say I couldn&amp;rsquo;t still do something
similar, with each page in its own HTML file that&amp;rsquo;s
dynamically loaded when you start the page, but for whatever
reason I didn&amp;rsquo;t do that. I probably eventually will,
but this time I didn&amp;rsquo;t. Also, it means that if at some
point I want to put some more immersive content in a page,
there&amp;rsquo;s nothing to stop me from simply scripting that
in place. I think I had a concept for &amp;quot;live posts&amp;quot;
that I was going to start using after the first few, but
this turned out to be a little less practical and useful
than I had originally thought.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This is actually the first place
where the actual goal of a blogging site has been realized
with these tools. I had a previous site at this same
address, but rather than hosting any content on its own, it
simply linked back to my then-active blogspot site. That
situation had much worse challenges than this one does,
mainly stemming from limitations in blogspot that make
things like inserting code somewhat more challenging, since
it very much relies on its WYSIWYG editor. This editor
injects random style into even manually entered text should
you really touch it at all. Compared to that, this is quite
similar in terms of effort required to post.&lt;/p&gt;

&lt;h2&gt;5. The Future of #/bin/bash it
&lt;a name="5. The Future of #/bin/bash it"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;This has been something
I&amp;rsquo;ve thought about for a very long time. This site is
built around a lot of older ideas from a younger me. Someone
who used (and loved) every inch of KDE. Someone who believed
in text editors like Kate and GEdit, someone who would only
sometimes venture into the world of Vim for quick tweaks to
some configuration file, and who wholly avoided Emacs for
fear of it being &amp;quot;too complicated&amp;quot;. When I wrote
this site, I very much thought of true software minimalism
such as Suckless as a hindrance more than a useful and
productive way to use a computer. Times have changed.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;That doesn&amp;rsquo;t mean this
site is going away. I feel like this sort of idea in the web
space is something that isn&amp;rsquo;t explored or used enough,
and that many different styles of sites could benefit from
using something like this. It also amuses me that my blog,
which I have in the past thought of as a way to showcase the
various side projects I&amp;rsquo;ve developed over the years is
in fact one such project itself. I am, however, considering
my options.&lt;/p&gt;

&lt;h3&gt;5.1. Challenges with the Site Now
&lt;a name="5.1. Challenges with the Site Now"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;As I mentioned a little while
ago, this whole site is fed by a big ol&amp;rsquo; JS file which
contains the full text of every post. It just returns that
text and that&amp;rsquo;s about it. This needs to change before
too long, if for no other reason than it being the Wrong
Way(tm) to do things.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;The side I left alone to some
extent is exactly how metadata is stored. I have one
function call that creates the blog window, and at the
moment for each post button in the browse window, I have
&amp;quot;hard coded&amp;quot; the metadata for each post in
literals to this function call. Needless to say, if I ever
have enough volume of posts that any form of search becomes
relevant, this isn&amp;rsquo;t a good enough way to store
metadata.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;One of the biggest comments I
get about this site is how awful it is on mobile. When I
designed the site, I had intended to come up with some
clever way to determine platform, and simply refer people to
m.whatevermydomain.is and they&amp;rsquo;d be served up the
mobile version of the site. No additional thought required.
While this would probably work well for people who know
about it, there&amp;rsquo;s not exactly any magic-bullet
software that can tell a browser if you&amp;rsquo;re actually on
mobile or not. Furthermore, even if there were, I&amp;rsquo;d
probably want to do something similar to PageTools for the
site just to keep my duplication of effort to a minimum.
There are, of course, compromises. I&amp;rsquo;ll get into some
of those in a moment.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;As icing on the cake here, I
just started a second &amp;quot;blog&amp;quot;, or more accurately
started up a second category of my blog dedicated to food.
As a user of this site, you see the separation of posts
between the tech and food sides of the site. There is no
technical separation. The very same posts.js file houses all
of the texts for the posts, and the backend names share the
same space. So, if for example I wanted to talk about
cinnamon in conjunction with baking, and also post about the
Cinnamon Desktop Environment, I&amp;rsquo;d have to come up with
different function names for each post or there&amp;rsquo;d be
conflicts preventing the site from loading.&lt;/p&gt;

&lt;h3&gt;5.2. Potential Next Steps
&lt;a name="5.2. Potential Next Steps"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p style="margin-top: 1em"&gt;With my current computing
lifestyle, I rather enjoy things that are keyboard driven. I
put off getting any sort of decent mouse for my computer
until really quite recently, since I can do almost
everything I want to do with just the keyboard when left to
my own devices.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;With this in mind, I&amp;rsquo;ve
given serious consideration to a static site, no JS
included. This would make my job much easier, because I
already have been writing the vast majority of my writings
in groff, which exports natively to plain HTML. This would
mean I could use something like Qutebrowser to browse my own
site with a keyboard. It would also mean that with very
minor work I could get a great degree of accessibility for
mobile users virtually for free. No fancy frameworks or
media queries required. It would also mean that people using
text based browsers could read my musings. The problem here
is that I like the idea of the desktop in a browser and very
much want to keep it.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;One thing is clear, no matter
how the front end works out. I am going to ditch that stupid
posts.js file, probably sooner rather than later. It
doesn&amp;rsquo;t serve its purpose particularly well, and
it&amp;rsquo;s got a lot of single lines that are frankly too
large for many text editors to even read. For example, even
Vim gives up trying to syntax highlight after half of the
first post, and Emacs has historically gotten confused about
what line it&amp;rsquo;s on and how big the file is. To be
clear, they both can read it just fine, but it&amp;rsquo;s not
what one would consider &amp;quot;supported&amp;quot; in the way it
probably should be.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;In order to work with this,
I&amp;rsquo;m going to adopt a one-file-per-post approach.
I&amp;rsquo;ll be making a posts folder before too long, and in
it will be a bunch of html files, one for each post.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;So with that problem solved, the
biggest question in my mind is &amp;quot;to static or not to
static&amp;quot;. My current stance on things is that I should
support both. When the page is loaded, maybe it could ask if
you want a classic or modern experience, and present the
caveat that the &amp;quot;modern&amp;quot; experience basically
requires a mouse and desktop browser. If you choose
&amp;quot;classic&amp;quot;, it&amp;rsquo;ll dump you onto a landing
page with post names, and load each post as its own HTML
file. In place of the current browser on the
&amp;quot;modern&amp;quot; site will be an HTML iframe tag inside of
a window for each post you decide to read. In reality,
it&amp;rsquo;ll all go to the static site for actual post
reading, but if I decide down the road to integrate some
web-app like thing into the modern site, it won&amp;rsquo;t get
in the way of the clean, static-site CMS setup. It&amp;rsquo;ll
merely extend and enhance it.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I don&amp;rsquo;t really have a
roadmap for any of this. If you look at the dates for my
posts over the years you&amp;rsquo;ll get an idea for why. I
don&amp;rsquo;t post a lot, and it usually happens in short
bursts when I feel like writing. Maybe one day that will be
different, but for now it&amp;rsquo;s a hack, and it&amp;rsquo;s a
hack that works.&lt;/p&gt;

&lt;h2&gt;6. EDIT FROM THE FUTURE!
&lt;a name="6. EDIT FROM THE FUTURE!"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;If you&amp;rsquo;re reading this,
I&amp;rsquo;ve gone and made the switch. There&amp;rsquo;s now a
prompt that asks for &amp;rsquo;classic&amp;rsquo; or
&amp;rsquo;desktop&amp;rsquo; sites, and they very much operate on
their own. If you&amp;rsquo;re in the desktop version, however,
you&amp;rsquo;ll notice that (for now) there&amp;rsquo;s still a
button for the old, dumb JS blog windows. This is because of
one important limitation of iframes I forgot about up until
now. It was a large part of why I didn&amp;rsquo;t do this
sooner.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Try moving the window around a
bit and you&amp;rsquo;ll notice the mouse quickly outraces the
titlebar. The window will appear stuck. Just move your mouse
back to the titlebar and click and the problem will go away.
I intend to fix this at some point, probably by creating an
AJAX parser for web pages like I may have suggested
elsewhere in this post, but I don&amp;rsquo;t anticipate that
happening really quickly. This is one of those future plans
for a while down the road.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;In the mean time, the classic
site works, and while I&amp;rsquo;m still hand coding the
entries for each post, the posts themselves at least can be
virtually taken direct from Groff&amp;rsquo;s output, no need to
do any tricky JS string formatting or nonsense like
that.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I&amp;rsquo;ll probably update this
post again when I&amp;rsquo;ve implemented the change to make
smoother windows, and at that point I&amp;rsquo;ll be removing
posts.js for good- and good riddence!&lt;/p&gt;

&lt;p&gt;Update (2022-08-23): I never did fix this bug, but I removed the references to post.js (but not the file, for some reason) long before I moved to Pelican. Of course, the old classic site is gone now, see &lt;a href="https://cannoncontraption.github.io/tag/blog.html"&gt;the other posts on this transition&lt;/a&gt;.&lt;/p&gt;</content><category term="Tech"></category><category term="blogging"></category><category term="tech"></category><category term="desktop"></category><category term="blog"></category></entry><entry><title>Zsh Scripts are Dumb</title><link href="https://cannoncontraption.github.io/zsh-scripts-are-dumb.html" rel="alternate"></link><published>2019-07-27T00:00:00-04:00</published><updated>2019-07-27T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2019-07-27:/zsh-scripts-are-dumb.html</id><summary type="html">&lt;h2&gt;1. Background
&lt;a name="1. Background"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;As you can probably tell by the
existence of this blog, I&amp;rsquo;m what most people in the
tech world call a &amp;quot;power user&amp;quot;. I make use of all
sorts of little hacks and tricks to make my computers run
faster, and do what I want rather than …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. Background
&lt;a name="1. Background"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;As you can probably tell by the
existence of this blog, I&amp;rsquo;m what most people in the
tech world call a &amp;quot;power user&amp;quot;. I make use of all
sorts of little hacks and tricks to make my computers run
faster, and do what I want rather than what the manufacturer
wanted out of the box. I run a lot of programs that
don&amp;rsquo;t show up on a hard disk from a new Best Buy
computer, in fact there&amp;rsquo;s very little overlap.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;One of those programs is Zsh.
Even in the Linux world, Zsh is fairly obscure. It&amp;rsquo;s
got a devoted following, but many people wonder why they
would want it, or consider it too bloated for everyday use.
Many people also link this bloat to slower operation.
They&amp;rsquo;re both right and wrong, in my experience.&lt;/p&gt;

&lt;h2&gt;2. So why Zsh?
&lt;a name="2. So why Zsh?"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;I wouldn&amp;rsquo;t use it if I
didn&amp;rsquo;t love it. Zsh has a wonderful interactive
prompt, and its autocomplete is nearly instantaneous. For a
while I swore by Zsh for everything. I started writing
functions in my zshrc rather than increasing the size of my
~/bin folder, and I ported over all of my customizations to
Bash and tweaked and improved them with some of Zsh&amp;rsquo;s
more useful features.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Zsh really isn&amp;rsquo;t slow. It
might be bloated, in fact the argument could be made that
Zsh is enormous. For interactive use, however, it&amp;rsquo;s
zippy. I&amp;rsquo;ve actually ended up backing myself into a
corner on friends&amp;rsquo; machines since they all run Bash,
and I&amp;rsquo;ll try and autocomplete a package in Apt or
Pacman, only to see the prompt hang for a few minutes.
That&amp;rsquo;s not seconds, that&amp;rsquo;s minutes. I&amp;rsquo;ve
tried to make Bash expand a !!* statement, only to get a
system bell. I&amp;rsquo;ve written regex statements and wanted
to double-check them by tab-expanding them, like Zsh does,
only to be greeted with another system bell. It&amp;rsquo;s
frustrating to go back.&lt;/p&gt;

&lt;h2&gt;3. Big git = Big problems
&lt;a name="3. Big git = Big problems"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Part of my Bash setup which got
ported to Zsh was my git integration. I used that particular
feature constantly in school, and it seemed a natural fit
for my workflow. My setup for integrating git was
essentially run git status and check the return code. This
works great if you&amp;rsquo;re working in a very small
repository. Unfortunately, as soon as you jump to something
of any significant size, this becomes a huge bottleneck. My
prompt would normally show up instantly, but simply
cd&amp;rsquo;ing into too big of a repository would make it take
a second or sometimes more to even show up. This is simply
too much time to wait for a prompt. I began to
investigate.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Since this happens only in the
git code, that seemed like the logical place to start
looking. That code made three calls to git, one to see if
there&amp;rsquo;s a repository here, one to get the branch, and
one to get the number of changed files. My first instinct
was to start using files in the .git directory rather than
using git itself to get as much of this information as
possible. This has a number of important drawbacks. First of
all, it requires that there be code to traverse backwards in
the directory tree until it finds whether there&amp;rsquo;s a
.git directory anywhere higher on the tree. But, for testing
purposes, I ignored this and started poking around. I
figured out quite quickly that a simple file exists to list
the current branch. This is somewhat more efficient than
calling git branch and parsing the output to get this
information, which is what I was assuming the code did. Bear
in mind here it had been years since I had originally wrote
this particular git integration script, or really touched it
at all in any significant way. I put this into the script,
only to realize that I was using some special parameters
with git branch that effectively did the same thing anyhow-
I wasn&amp;rsquo;t just parsing the list of branches to see
which one had the asterisk next to it. On to the next
solution.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;This is where I became curious
enough to start timing commands to see what the shortest
running time git command I could think of was. I
didn&amp;rsquo;t try exhaustively, and there&amp;rsquo;s probably a
command better suited to this task than what I settled on.
However, after testing git status, git branch, and a couple
other information prompts, I figured out that git branch was
the quickest one, and running it in a non-repository
directory caused it to exit non-zero. Bingo. I swapped out
the first git status with git branch, and got a real
improvement. That said, it still wasn&amp;rsquo;t quite as quick
as I&amp;rsquo;d like, so further down the rabbit hole we
go.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Next up was the remaining git
status command. When passed the -s option, it gives a brief
output, one line per changed file. Counting the number of
lines in the output of that command is a decent way of
getting this number, and it&amp;rsquo;s what I was doing. What I
wondered was whether this was really the best way in terms
of speed. To the man pages I went, only to quickly discover
the -u option. This option allows for control over untracked
files, and whether they are displayed on screen. This turns
out to somewhat significantly reduce the time git status
takes to display something.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Putting all of this together
made for a Bash prompt that while still not as instant as
without the git integration, was barely passible and
performed well enough.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I was doing all of that work in
Bash. However, when I finally managed to get Zsh running on
that particular computer, I quickly realized that its
interpreter for scripts was slow enough to undo almost all
of the speed gains I had gotten through optimizing the
prompt in Bash. Needless to say, this was not acceptable. On
to the next tweak&lt;/p&gt;

&lt;h2&gt;4. POSIX shell to the rescue
&lt;a name="4. POSIX shell to the rescue"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Recently, I&amp;rsquo;ve been
reading a lot of things about shell scripting, as well as
watching videos by various different Linux users. Notable
among those users is Luke Smith. He and I share some
interesting parallels in computing. We both use suckless
tools, like dwm, dmenu, st, and a few others. We both use
groff. We have both used Arch and i3 in the past. We both
use Void Linux at the moment, and a number of other things.
The coolest part about this in my mind is that we both got
to this point independently at more or less the exact same
time, without ever really crossing paths.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I mention this because among Mr.
Smith&amp;rsquo;s videos is one titled &amp;quot;Bash is
Bloated!&amp;quot; Intrigued, I watched it to see what he had to
say. I&amp;rsquo;m not going to recount everything he said in
the video, but one small statistic he cited stuck in my
head. He mentioned DASH, or the Debian Almquist Shell.
It&amp;rsquo;s an implementation of pure POSIX shell, with no
extensions or enhancements. It&amp;rsquo;s just a shell. This
means no autocomplete with tab (at least by default), no
process substitution using parentheses, and a variety of
other things. DASH supposedly runs scripts something like
four times faster than Bash. Since it&amp;rsquo;s supposed to be
a POSIX shell anyhow, regardless of whether it&amp;rsquo;s ASH
or DASH or anything else, I decided to start setting the
interpreter for all of my existing scripts to /bin/sh. Sure
enough, most of them worked and I had to wait a little less
time between doing a thing and seeing it done.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Of course the problem here
isn&amp;rsquo;t whether just any old script could be faster, but
whether Git integration in my prompt could be faster. I
think the answer at this point might be pretty obvious,
since Zsh is quite a lot bigger than Bash. One caveat,
however, is that I would have to take my existing inline
function in Zsh and come up with a way to make it
external.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;I set out to create this magical
external script which could handle this all for me. I
started copying the different parts of the script out of my
zshrc, and plugging it into another file pointed at /bin/sh.
After briefly becoming confused as to why it was printing
-ne, only to realize -e isn&amp;rsquo;t needed for escape
sequences to work, I got it working. No trouble at all. When
I then ran my Zsh built-in and compared it against the sh
script, the result was nothing short of impressive.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;Before I close out this post,
however, there&amp;rsquo;s one important technical point I
should mention about using escape sequences in prompts. This
is something that will probably confuse people at first when
they first try to do this. See, prompts are tricky. They
expect that their prompt strings be labelled such that the
shell can anticipate how many characters long it is for word
wrapping purposes. Since escape characters don&amp;rsquo;t
print, they mess up this calculation. In order to get around
this, various different shells handle this with a variety of
delimiters. For Bash, this is \[, for Zsh this is %{, other
shells will probably use other different delmiters. These
generally can be substituted with \001 and \002 in
situations where you&amp;rsquo;re dealing with output from a
script like this, but just to be safe, I broke the line
after the output from the git integration finished. This is
for a couple other reasons too, such as tiling window
managers like dwm not always giving adequate horizontal
space for really long prompts, but it&amp;rsquo;s something to
keep in mind.&lt;/p&gt;

&lt;h2&gt;5. Conclusion Time
&lt;a name="5. Conclusion Time"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p style="margin-top: 1em"&gt;Honestly speaking, if speed is
no object, Bash and Zsh both have some wonderful advantages
when it comes to the features available in a shell scripting
language. It&amp;rsquo;s entirely impossible to redirect the
output of a program to more than one other program in POSIX
shell, and Bash supports such a feature. It&amp;rsquo;s
something I&amp;rsquo;ve used myself a fair amount at this
point, and in some circumstances this warrants the speed hit
for readability and extra features. This is, after all,
shell scripting. The shell is not a programming environment,
and it was never meant to be used as one.&lt;/p&gt;

&lt;p style="margin-top: 1em"&gt;With that said, however, Zsh is
a dumb idea for little shell scripts. It&amp;rsquo;s way too
slow for its benefits to really be useful in most cases, and
it can make little tweaks in any environment really slow
down your workflow.&lt;/p&gt;
&lt;hr&gt;</content><category term="Tech"></category><category term="zsh"></category><category term="scripting"></category><category term="scripts"></category><category term="shell"></category></entry><entry><title>An Instant Pot is NOT a Slow Cooker!</title><link href="https://cannoncontraption.github.io/an-instant-pot-is-not-a-slow-cooker.html" rel="alternate"></link><published>2019-05-14T00:00:00-04:00</published><updated>2019-05-14T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2019-05-14:/an-instant-pot-is-not-a-slow-cooker.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Imagine for a moment a world where you need to bring food with you every day. I know, I know, no one reading this could possibly be in that situation. But bear with me anyhow. Let's just assume for a moment that you have a nice chili that you …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Imagine for a moment a world where you need to bring food with you every day. I know, I know, no one reading this could possibly be in that situation. But bear with me anyhow. Let's just assume for a moment that you have a nice chili that you want to slow cook- you put all the ingredients in your crock pot, and since obviously everyone in this situation only owns a crock pot (college student times, it really happened) you put your rice in with everything else. You turn it on, next morning everything comes out well enough- the rice may be a bit soggy but you live with it since it's got a good taste and the flavors blend nicely.&lt;/p&gt;
&lt;p&gt;Fast forward a bit. Rather than having a crock pot, the crock pot started flaking off rust chips because it's old (also happened) and it's now gone. In its place is a shiny new instant pot! When I was in this situation, I figured they couldn't be too different and just put my usual chili recipe in there and turned on the pressure. Boy was I in for a shock.&lt;/p&gt;
&lt;h2&gt;How not to cook rice&lt;/h2&gt;
&lt;p&gt;The instant pot over and over again displayed the error "BURN". It didn't seem to matter what settings I used to make this happen, or whether it was the whole thing at once as before, or just the rice on its own with the "rice" setting advertised on the front. Every time it would display this message, and there'd be a sticky mess of rice remains stuck to the bottom of the pot, sometimes with other ingredients trapped underneath. All in all, not a pleasant experience.&lt;/p&gt;
&lt;h2&gt;Instant Pots are NOT Slow Cookers&lt;/h2&gt;
&lt;p&gt;My immediate next thought was that the pressure was the problem. The next time I went to cook my chili, I simply set the instant pot on slow cook mode and walked away. All indications were that this would work fine. Then I decided enough time had passed and checked on it. I had set the instant pot to slow cook medium heat, which I figured would probably land somewhere in between low and high on a traditional slow cooker.&lt;/p&gt;
&lt;p&gt;I was wrong. Sticking my finger into a pot of what was essentially still luke-warm soup was not a pleasant surprise. At that point I was about ready to call it quits on that idea, and switched to pressure cook mode. I encountered the same "BURN" error as before, but after a couple of attempts at least I had something I could eat for lunch that week. Trying it again the next week yielded the same result.&lt;/p&gt;
&lt;p&gt;For those who might end up in the same sort of position as me, here's about where the Instant Pot's slow cook temperature lines up with a crock pot:&lt;br&gt;&lt;br&gt;&lt;table border=1px&gt;&lt;tr&gt;&lt;td&gt;Instant Pot setting&lt;/td&gt;&lt;td&gt;Crock Pot analog&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;High&lt;/td&gt;&lt;td&gt;Low with the lid off&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Medium&lt;/td&gt;&lt;td&gt;Keep Warm&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Low&lt;/td&gt;&lt;td&gt;Off&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;&lt;br&gt;Clearly you're not going to get very good results if you go into this without this knowledge.&lt;/p&gt;
&lt;h2&gt;Potential Issues&lt;/h2&gt;
&lt;p&gt;I have a lot of theories as to why this problem is as bad as it is. Firstly, the lid doesn't seal the same way. The crock pot is designed with a lid that forms a loose seal from the steam built up as the food cooks. While it's not a hard seal, and steam can still escape, there should be no holes in the lid of a properly functioning crock pot, or else the food won't cook right. The Instant Pot's lid is designed for pressure cooking, so it requires pressure to seal completely. This allows for the pressure release and for the lid to come off safely when used as a pressure cooker. There don't seem to be any good third-party lid options, at least none that I tried did the trick. You may have better luck.&lt;/p&gt;
&lt;p&gt;Secondly, the Instant Pot only seems to heat from the bottom, where the crock pot heats all sides. Furthermore, the crock in a crock pot has a fair amount of thermal mass, which helps to spread out the heat. The Instant Pot uses a steel liner, much like a soup pot or a really big saucepan. The Instant Pot may also just not have good enough heat control to give a good in-between heating setting. A lot of steam is required for pressure, which requires a lot of heat. When that kind of heat isn't required, the thermal controls may not be accurate enough to produce a desirable result.&lt;/p&gt;
&lt;h2&gt;Back to a real Crock-Pot&lt;/h2&gt;
&lt;p&gt;Finally, fed up with the extra work being put into lunch for the week, I broke down and bought a crock pot. Immediately I could tell the difference. Like any new appliance, it took some getting used to since the old one did not behave &lt;i&gt;quite&lt;/i&gt; exactly like the old one, but with not very much time I was back to my old routine.&lt;/p&gt;
&lt;p&gt;Most of this actually happened months ago by now. In fact, this whole blog site just got a minor facelift recently, including new background graphics and some under-the-hood improvements to themeing which made a color change practical. The reason those changes didn't go live in December of last year is because I was planning out this post. Since then, I've had some more time to experiment and figure out what works and what doesn't with an Instant pot. Long story short- if you expect a slow cooker, buy a slow cooker. The Instant Pot &lt;i&gt;will not do the trick&lt;/i&gt;. It won't. That said, I don't hate the thing. It makes the best macaroni and cheese I've ever had the pleasure of enjoying, and it can do meats, soups, even cheesecake really well.&lt;/p&gt;
&lt;p&gt;There's a number of things that both appliances do really well. For example, pulled meats are really easy with an Instant Pot. Nothing sticks to the bottom, and if you leave a roast in there for a little over an hour it comes out in pieces, ready to be pulled. Just season it, add some water, and hit 'go'. This is really the secret superpower of a crock-pot, however. Do the same thing with a crock-pot, and after about 14 hours or so, you have the same result but with more even flavor. It's not a big difference, but there's a difference.&lt;/p&gt;
&lt;h2&gt;Conclusion time&lt;/h2&gt;
&lt;p&gt;I know I've said it before, it's even in the title. An Instant Pot isn't a crock-pot. Don't buy an Instant Pot thinking you can just do away with the old crock-pot when it gets old. They serve different purposes, even if the Instant Pot tries to ape the crock-pot, it really does &lt;i&gt;just that&lt;/i&gt;, it apes it.&lt;/p&gt;
&lt;p&gt;Does this mean I think you shouldn't buy an Instant Pot? Honestly, no. I love the thing, and it really does making traditionally long cook time meals quick and easy. It does a lot of things really really well. It's just not a slow cooker. It really, really isn't.&lt;/p&gt;</content><category term="Food"></category><category term="instantpot"></category><category term="food"></category><category term="crockpot"></category><category term="slowcooker"></category><category term="pressurecooker"></category></entry><entry><title>Food!</title><link href="https://cannoncontraption.github.io/food.html" rel="alternate"></link><published>2019-05-14T00:00:00-04:00</published><updated>2019-05-14T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2019-05-14:/food.html</id><summary type="html">&lt;p&gt;We eat every day. It seems obvious, but really think about that. Eating is part of the human experience. For nearly literally all of us.&lt;/p&gt;
&lt;p&gt;With this in mind, I really love to cook. Sometimes there's nothing more satisfying than readying a new chili, making burritos, preparing a good steak …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We eat every day. It seems obvious, but really think about that. Eating is part of the human experience. For nearly literally all of us.&lt;/p&gt;
&lt;p&gt;With this in mind, I really love to cook. Sometimes there's nothing more satisfying than readying a new chili, making burritos, preparing a good steak dinner, experimenting with pasta, or even just preparing a unique salad. It's a huge world.&lt;/p&gt;
&lt;h1&gt;This isn't the most intelligent part of this site.&lt;/h1&gt;
&lt;p&gt;I'm not a cook. I'm not. I'd get all sorts of food in my keyboard, since I'd almost certainly set my workstation up in the kitchen if I ever became a cook. It's just how I work. That doesn't mean I don't love it, and it doesn't mean I'm not going to write about it, but I'd make a really poor professional chef. Algorithm-generated meals don't sound too appealing to me, and it's almost certainly one of the first things I would do to speed up production time.&lt;/p&gt;
&lt;p&gt;With all of this said, don't expect professional level advice or insight, I'm just another guy who eats food every day writing about some notable instances of food that comes out really well, or really poorly. If this has you interested, go ahead and pull up the Food Blog window again, and take a look!&lt;/p&gt;
&lt;p&gt;I will see you there, my fellow food-eating people!&lt;/p&gt;</content><category term="Food"></category><category term="intro"></category><category term="food"></category></entry><entry><title>Lisp: Recursive Glory!</title><link href="https://cannoncontraption.github.io/lisp-recursive-glory.html" rel="alternate"></link><published>2018-06-18T00:00:00-04:00</published><updated>2018-06-18T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2018-06-18:/lisp-recursive-glory.html</id><summary type="html">&lt;p&gt;Recently I've been toying a lot with the idea of doing more lisp programming to solve some of the tasks I generally would do with Python or BASH. Lisp often gets written off as old or weird, and while it is old and weird, it's certainly not past its usefulness …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I've been toying a lot with the idea of doing more lisp programming to solve some of the tasks I generally would do with Python or BASH. Lisp often gets written off as old or weird, and while it is old and weird, it's certainly not past its usefulness. Here are a few of the advantages I've seen just from messing with it the past few months:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Simplicity&lt;/h2&gt;
&lt;p&gt;Probably the most obvious advantage of a language like Lisp is that it has few core constructs. To illustrate, here is the basic syntax of any Lisp statement:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(command argument argument (command2 argument))&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
So there's a few things in this which look odd to the experienced C-esque or BASH-esque familiar. First and foremost statements are all parenthetical. The very first character is a parenthesis. While this has earned the language the nickname "Lots of Inconvenient Superfluous Parentheses" in the past, it's also its core strength.&lt;br /&gt;
&lt;br /&gt;
Lisp got its name from this very unusual syntax. The language was originally an abbreviation of "LISt Processing". Upon closer examination, it becomes clear that everything in that statement above could be considered part of a list. Indeed, this is exactly how Lisp interprets it and is a core part of its simple nature.&lt;br /&gt;
&lt;br /&gt;
So with all that said, let's try and parse what's actually happening here. Just like in mathematics, we start with the inner set of parentheses. Inside those are the words 'command2 argument'. What happens here is that the Lisp interpreter will execute the function 'command2' with the argument 'argument'.&lt;br /&gt;
&lt;br /&gt;
The only other real language structure that you would probably need to be aware of is the single quote. Here's another example:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
'("Joe" "Jill" "Jonathan" "Jacob" "Jenna")
&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
Yet again, quite simple looking. You'll notice first and foremost however, that we started with a string. If this worked like a normal list, that wouldn't work. Instead, what this is is a list of data. It is indeed possible to actually try and run this later (which is part of the power of lisp) but the single quote prevents any single element (be it a list or an atom- a single element of a list) from being evaluated. This means if you have a variable chocolate, and you wanted to pass the word chocolate to the function instead of the variable (similar to pass-by-reference if implemented correctly) you would run&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(command 'chocolate)&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
and instead of getting the value of chocolate, you would in fact get the word chocolate.&lt;br /&gt;
&lt;br /&gt;
That's it. Those are the two real main structures to keep in mind.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Recursive Glory&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-_VXOnE5jk1s/Wxq7vECyPHI/AAAAAAAAeUY/zgzIPnW-AYY-JOvBtolwSOYHb_P_GrNRgCK4BGAYYCw/s1600/Screenshot_20180608_132409.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-_VXOnE5jk1s/Wxq7vECyPHI/AAAAAAAAeUY/zgzIPnW-AYY-JOvBtolwSOYHb_P_GrNRgCK4BGAYYCw/s400/Screenshot_20180608_132409.png" /&gt;&lt;/a&gt;Part of the draw of Lisp is the simplicity I mentioned above. While this is nice from a structure perspective, Lisp is also really useful because it plays well with recursion. In fact, a well written Lisp program may never need to explicitly declare a variable. Not once. Let's take the example of summing the values 1 to n. Mathematically, you could write this as the equation you see to the left of this text (Unfortunately, I couldn't get it to format correctly inline). In lisp, this is quite simple to express:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(defun sum (n)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp;(if (= n 1)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp; 1&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;nbsp; (+ n (sum (- n 1)))))&amp;nbsp;&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
For the curious, the syntax to set a variable is (setq varname value) and if you want to define a global parameter, (defparameter varname value). You'll note neither is used here at all. &lt;br /&gt;
&lt;br /&gt;
So here's what's happening:&lt;br /&gt;
&lt;br /&gt;
First you hand it n. Let's say that's 3 in this case. We know, 3+2+1 = 6 so this is easy to test.&lt;br /&gt;
&lt;br /&gt;
Next, it checks to see if n is 1. If so, it just simply evaluates 1. The last thing you evaluate is the return of your function, and because of this we return 1.&lt;br /&gt;
&lt;br /&gt;
If it's not 1, it adds n to whatever (sum (- n 1)) is.&lt;br /&gt;
&lt;br /&gt;
In this case, the computer will actually end up adding things like this:&lt;br /&gt;
((1) + 2) + 3 = 6&lt;br /&gt;
I've put parentheses around each run of the function. If we were to write this in lisp's preferred syntax:&lt;br /&gt;
(+ (+ 1 2) 3) = 6&lt;br /&gt;
&lt;br /&gt;
You can see that this syntax perfectly represents our order of operations for any n calculations. For those notationally inclined who don't already know, this is commonly called prefix notation. It is also sometimes called "Polish notation" because the first person to popularly theorize its usefulness was Polish. Those who have used HP calculators will likely know about Reverse Polish Notation (RPN), or postfix, which is simply the same notation with the operator at the end.&lt;br /&gt;
&lt;br /&gt;
Let's take one more look at this function, this time in plain old C for those who know that best:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
int sum(&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    int n)&lt;br /&gt;
{&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  if(n == 1)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
    return 1;&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  return n+sum(n-1);&lt;br /&gt;
}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;&lt;/code&gt;
As you are probably aware, we really don't code C this way much at all. The more common way to do something like this is a for loop:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
int sum(&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    int n)&lt;br /&gt;
{&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  int sum = 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  for(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      int i = 1;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      i &amp;lt;= n;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      i++)&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
      sum += i;&lt;br /&gt;&amp;nbsp;&amp;nbsp;
    }&lt;br /&gt;&amp;nbsp;&amp;nbsp;
  return sum;&lt;br /&gt;
}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;br /&gt;
&lt;/code&gt;
&lt;br /&gt;
Which while better formatted in C than the recursive solution, and certainly more common, this solution takes a lot more code to write. It also requires the use of more structures. Furthermore, in both of these C programs we are forced to declare what we are returning. This means declaring a local variable as well.&lt;br /&gt;
&lt;br /&gt;
And one final note on the syntax here, let's imagine this code without the line breaks. It should become clear very quickly which one is easier to read and understand in this format:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
(defun sum (n) (if (= n 1) 1 (+ n (sum (- n 1)))))&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;int sum(int n){if(n == 1)return 1;return n+sum(n-1);}&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;int sum(int n){int sum = 0;for(int i = 1;i &amp;lt;= n;i++){sum += i;}return sum;}&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
I don't think anyone will argue this is the right way to code, but nonetheless, based on character count alone the Lisp version wins. Looking closer though, you can clearly see what the Lisp program is doing at any point along the line about as well as you might be able to with a mathematical formula. It's well compartmentalized, and all you have to see to know what executes first is where the parentheses are.&lt;br /&gt;
&lt;br /&gt;
In the C programs (especially the second one) inference of logical notation can't take you very far, in fact you have to know the syntax of C and you also have to be knowledgeable in its specific assignment-and-addition operators to read it. In the Lisp version, however, all you really need to know is that defun is define a function, and it takes the argument n, and an if statement is the conditional, what to do if true, then what to do if false. Everything else virtually explains itself.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Conclusion&lt;/h2&gt;
&lt;p&gt;In a world where programmer time is more expensive than CPU time, Lisp makes sense.&lt;br /&gt;
&lt;br /&gt;
It's clear that I like Lisp. It's a capable language, which lends itself well to reading and writing programs logically. It doesn't exactly seem easy at first, but after you understand the basic structure once, it's not a far leap to begin extending the language - in the language. Even C and C++, known for their flexibility, have to resort to a messy preprocessor syntax to really be extended in any way at all, meaningful or otherwise. Lisp allows for one program structure to rule them all.&lt;br /&gt;
&lt;br /&gt;
So here's a question that I get asked a fair amount when I start talking about Lisp:&lt;br /&gt;
'Why oh why would you ever want to use it?'&lt;br /&gt;
&lt;br /&gt;
My answer is usually,&lt;br /&gt;
'It's clean code for any purpose. You can write the language in the language; you can write really complex stuff in ten minutes, and explain it to someone who's never seen code in five.'&lt;br /&gt;
&lt;br /&gt;
While that doesn't justify things or go into detail like this post does, it usually will get someone to do one of two things:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;(or (call me crazy) (try it for themselves))&lt;/code&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="code"></category><category term="style"></category><category term="lisp"></category><category term="tech"></category></entry><entry><title>Code Style and How to Write for Reading</title><link href="https://cannoncontraption.github.io/code-style-and-how-to-write-for-reading.html" rel="alternate"></link><published>2017-09-03T00:00:00-04:00</published><updated>2017-09-03T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-09-03:/code-style-and-how-to-write-for-reading.html</id><summary type="html">&lt;p&gt;Recently I was browsing through YouTube, and it kept suggesting this video about programming mistakes, with one of those paper-cutout like CG thumbnails. My first impression was that it was one of those "let me show you how to code" videos, like so many of YouTube's suggestions to me are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I was browsing through YouTube, and it kept suggesting this video about programming mistakes, with one of those paper-cutout like CG thumbnails. My first impression was that it was one of those "let me show you how to code" videos, like so many of YouTube's suggestions to me are. The fact of the matter is, while YouTube tried to get me to watch beginning coder videos, like normal, they cycled through my feed pretty quickly, this one stuck around for a few days.&lt;br /&gt;
&lt;br /&gt;
I don't pretend to know the algorithm YouTube uses to display this stuff, but somehow it figured I would like that video. Intrigued, I clicked it and braced myself for what would surely be someone explaining why using single letters as variable names is bad.&lt;br /&gt;
&lt;br /&gt;
That's not what it was.&lt;br /&gt;
&lt;br /&gt;
One of the odd things I like to watch there is lectures. It doesn't have to be computer science related, but I like watching people talk about something they're passionate about. Every time I learn something new about the subject which I hadn't previously even thought about.&lt;br /&gt;
&lt;br /&gt;
This video, despite it's code-school thumbnail, was one of those videos.&lt;br /&gt;
&lt;br /&gt;
Up until I watched it, I was a hard line fan of Stroustrup indentation. Functions like this one below were nice to me, I was used to them, and they were rather standard.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
int do_a_thing(int this, string that, bool the_other_thing){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(the_other_thing){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;this&amp;lt;&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;that&amp;lt;&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int i = 0; i&amp;lt;this; i++){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something_with_i(i, this, that);&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 0;&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
I'm not going to get too deep into the topics in the video, I'll link to it at the end, but my takeaway was basically a whole bunch of stuff I had figured out before, but not really internalized. Here's the shortlist:
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comments get out of date fast, often conveying wrong information (In the words of the presenter, &lt;q&gt;comments are lies waiting to happen&lt;/q&gt;)&lt;/li&gt;
&lt;li&gt;It's OK to put a line break in an argument list&lt;/li&gt;
&lt;li&gt;Variable names should be human-readable, not Java-human-readable or abbreviated to the point of meaninglessness&lt;ul&gt;
&lt;li&gt;This means no networkedAntiTheftVisualRecorder, just use securityCamera&lt;/li&gt;
&lt;li&gt;Something out of my code to this effect: menubhoverout is bad, menuButtonMouseLeave is better&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout matters, and consitent predictable layout makes for readable, debuggable, sustainable code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These aren't exactly the points that were made, but again, not trying to repeat what was in the video in its entirety here.&lt;br /&gt;
&lt;br /&gt;
This prompted me to look at my largest, and arguably most worked on free time project, the FSU CS Club site. I've discussed a little about the site in my first post, and here I'm going to show the change in code style since I watched the video.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
function movewindow(currentwindow, increasex, increasey){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//client window bounaries: get the current dimensions of a window&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; cwbounds = currentwindow.toplevel.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//screen boundaries: get the current dimensions of the screen&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; scbounds = document.body.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//new X position (from top left corner)&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; newx = cwbounds.left + increasex;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//new Y position (from top left corner)&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt; newy = cwbounds.top + increasey;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//now we make sure we're not running off the screen in the horizontal direction&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(newx&amp;gt;0 &amp;amp;&amp;amp; cwbounds.right+increasex &amp;lt; scbounds.right){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.left = newx + "px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//and try to make sure we don't run off the screen in the vertical direction&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;//though the code for the bottom doesn't work right, not sure why.&lt;/i&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(newy&amp;gt;0 &amp;amp;&amp;amp; cwbounds.bottom + increasey &amp;lt; scbounds.bottom){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.top = newy + "px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
}
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;Note that most of these comments are obvious, and a number of them would be with better variable names. Also note that the code is largely horizontal, and can make for some long lines.&lt;br /&gt;
&lt;br /&gt;
Now the new code:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
&lt;b&gt;function&lt;/b&gt;&amp;nbsp;movewindow(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasex,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasey)&lt;br /&gt;
{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;currentWindowBounds&amp;nbsp;=&amp;nbsp;currentwindow.toplevel.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;screenBounds&amp;nbsp;=&amp;nbsp;document.body.getBoundingClientRect();&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;newx&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.left&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasex;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;var&lt;/b&gt;&amp;nbsp;newy&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.top&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;increasey;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newx&amp;gt;0&amp;nbsp;&amp;amp;&amp;amp;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.right&amp;nbsp;+&amp;nbsp;increasex&amp;nbsp;&amp;lt;&amp;nbsp;screenBounds.right)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.left&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newx&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;if&lt;/b&gt;(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newy&amp;gt;0&amp;nbsp;&amp;amp;&amp;amp;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentWindowBounds.bottom&amp;nbsp;+&amp;nbsp;increasey&amp;nbsp;&amp;lt;&amp;nbsp;screenBounds.bottom)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentwindow.toplevel.style.top&amp;nbsp;=&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newy&amp;nbsp;+&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"px";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
}&lt;br /&gt;

&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;When trying to debug the second version of this otherwise identical code, it's much easier to find specific variables, troubleshoot problems, and even understand to an extent. Also note that as parts of this program expand, the general format is not broken, and horizontal scrolling is not an issue. Switching to this style virtually eliminated &amp;gt;80 character lines, making it readable alongside not one more document, but two more on my 1080p monitor. With the old style, some functions would become unreadable if they didn't have at least 2/3 of the screen to display their enormous lines on.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
And this comes to the final part of this post: why any of this matters.&lt;br /&gt;
&lt;br /&gt;
I've seen a lot of lectures where someone will recommend something only for it to turn out to not be very useful. There are plenty of people who use some K&amp;amp;R derived indentation scheme like I was, and to good effect, it's a solid style. This time, however, the change in something as trivial as style has made the code arguably neater and easier to not only read, but expand upon down the line without breaking the readability of the code.&lt;br /&gt;
&lt;br /&gt;
I've been using GNU Emacs for my coding of late, and I do want to mention that it makes all of this really easy. A lot of my code had bad indentation, or hadn't been changed when a new level of code was inserted above another existing level, and it made for some trouble. When formatting all of this, if a mistake crops up, Emacs is intelligent enough that simply selecting the region where things went wrong and typing &lt;code&gt;C-M-\&lt;/code&gt; will solve indentation problems, and even go so far as to place the braces on the correct indentation level to separate code from parameter lists properly. Emacs will also let you align arguments to a function right at the end of the function name, where the list would run horizontally otherwise in Stroustrup style.&lt;br /&gt;
&lt;br /&gt;
Here's the original code sample in the new format:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
int&amp;nbsp;do_a_thing(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;this,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string&amp;nbsp;that,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool&amp;nbsp;the_other_thing)&lt;br /&gt;
{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(the_other_thing)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;this&amp;amp;lt&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cout&amp;lt;&amp;lt;that&amp;lt;&amp;lt;endl;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;countsUpToThis&amp;nbsp;=&amp;nbsp;0;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countsUpToThis&amp;lt;this;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countsUpToThis++)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;do_something_with_i(&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;countsUpToThis,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;that);&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0;&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;Much neater, right?&lt;br /&gt;
&lt;br /&gt;
&lt;a href="https://youtu.be/ytJnSttKL6A"&gt;Original lecture video (Edit: Appears to be broken?)&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="code"></category><category term="style"></category><category term="programming"></category></entry><entry><title>ANSI Color Block Graphics</title><link href="https://cannoncontraption.github.io/ansi-color-block-graphics.html" rel="alternate"></link><published>2017-06-22T00:00:00-04:00</published><updated>2017-06-22T00:00:00-04:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-06-22:/ansi-color-block-graphics.html</id><summary type="html">&lt;p&gt;Before reading, please note that anything surrounded by 'm/ and /' is to be interpreted as regex. If you are not familiar with regex, or REGular EXpressions, please&amp;nbsp; visit &lt;a href="https://www.codeproject.com/Articles/939/An-Introduction-to-Regular-Expressions"&gt;this CodeProject page&lt;/a&gt;. If you know a little, but don't know the syntax I'm using, visit &lt;a href="http://perldoc.perl.org/perlre.html"&gt;the PerlDoc page for regex&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
Introduction …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;Before reading, please note that anything surrounded by 'm/ and /' is to be interpreted as regex. If you are not familiar with regex, or REGular EXpressions, please&amp;nbsp; visit &lt;a href="https://www.codeproject.com/Articles/939/An-Introduction-to-Regular-Expressions"&gt;this CodeProject page&lt;/a&gt;. If you know a little, but don't know the syntax I'm using, visit &lt;a href="http://perldoc.perl.org/perlre.html"&gt;the PerlDoc page for regex&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
Introduction&lt;/h3&gt;
&lt;p&gt;For those who know how the world of sh and POSIX-like systems works, the idea of using escapes to color text is probably a very familiar one. Using that to create graphics, however, may not be so familiar.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
The ANSI Escape(s) &lt;/h3&gt;
&lt;p&gt;In my post on how to make BASH prompt you with return and git information, I used the 'm/\033[7;#m/' sequence to turn the background various colors. This works for the most part, but it caused problems during my testing when trying to overlay text. Because of this, I started using a slightly different set of color codes. In the case of text colors, the 'm/\033[3#m/' sequence is how the color is set. In this case the 'm/3#/' portion of that sequence is important. Numbers in the 30's from 30-37 indicate colors. This is what is called "foreground colors".&lt;br /&gt;
&lt;br /&gt;
To use foreground colors to color a background, one needs only change our 'm/\033[3#m/' pattern to 'm/\033[7;3#m/', adding a 7; before the color code. What this does is it enables a "reverse video" mode. This means that colors are kept at regular intensity (so no 1; prefix, we have a 7; there) and foreground colors populate the background and vice-versa.&lt;br /&gt;
&lt;br /&gt;
The other method of coloring the background is to change the color sequence entirely. Where in the last example, the color codes have all been 'm/3#/', if we swap this pattern for 'm/4#/' where the number in question is the same set of values as the 'm/3#/' pattern, we end up with background colors changing. This has the benefit of allowing the terminal emulator to judge which colors are appropriate for the foreground without setting them, so if you have a black background terminal and set a black character, the text on top will still be visible. If the reverse-video modifier is used, the text takes the background color and therefore is invisible.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
Escaping the Graphics&lt;/h3&gt;
&lt;p&gt;So far what I've been talking about has been about color escape sequences, and that's nothing new here. Where things get interesting is when you apply these sequences to try and make graphics.&lt;br /&gt;
&lt;br /&gt;
I have been working on a small text adventure game. It has been acting as a passtime and a time waster at that, and it may not even ever be finished. However, I didn't want to include any graphics libraries of any sort during the creation of the game. This means that, since I'm using my language of choice, C++, there is no sort of imagery whatsoever without color escapes or something similar. Here is where the interesting bits are.&lt;br /&gt;
&lt;br /&gt;
If you assume that wherever the program will be run, it will be run in a POSIX-like environment such as Linux (the only OS any of my desktops or laptops run), MacOS, or Cygwin, you can assume that these escapes will work. In order to make imagery and make the game more interesting, all one needs do is set the color escapes, and type a space for each character they want that color. For example, if I wanted to print a small French flag, I could do so with the following code:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n&lt;br /&gt;
\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n&lt;br /&gt;
\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n&lt;br /&gt;
&lt;/code&gt;&lt;br /&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
All that I would need to do from here to put this in my program is remove the line breaks (which I added to illustrate the pattern) and then paste this sequence into a cout&amp;lt;&amp;lt; line. The result would look something like this:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
#include&lt;iostream&gt;&lt;br /&gt;
int main(){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;std::cout&amp;lt;&amp;lt;"\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n\033[41m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[47m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[44m&amp;nbsp;&amp;nbsp;&amp;nbsp;\033[m\n";&lt;br /&gt;
&amp;nbsp;&amp;nbsp;return 0;&lt;br /&gt;
}
&lt;/iostream&gt;&lt;/code&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
While this looks ugly from a programmer's perspective, and probably would be much cleaner (not to mention better code) if instead of one cout I had used three, one per line, and instead of using \n to break the line I had used endl, but for the sake of my own sanity, doing that over twenty or more lines seemed impractical, and so I used the method I have so far illustrated.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;
How to Save your Sanity in the Process&lt;/h3&gt;
&lt;p&gt;That aside, coding large graphics in this way is tedious. When the end goal is to create a complicated image or graphic show up on screen, inputting escapes by hand gets old fast.&lt;br /&gt;
&lt;br /&gt;
In my case, after less than ten seconds of thought, I got to work developing a small Python script which would replace individual characters with colored spaces. My first design was to simply make something that would replace a single character (g for green, for example) with the appropriate escape code and a space. Immediately, I knew this was the wrong approach. Assuming that the same color is repeated more than once, the characters required to reissue the escape for every repeated space would be massive, and pasting large amounts of program output into a document can sometimes cause issues with text editors which cannot handle long lines. While this was a design issue with the easiest solution, I knew of a better way.&lt;br /&gt;
&lt;br /&gt;
My second and final design checks for repeated characters by storing whatever the last used color escape was, and only outputting a new one if the current and previous escapes did not match. This means that if I were to input a line of black characters, it would issue the black color, fill the line with spaces, and move on until it hits a different color.&lt;br /&gt;
&lt;br /&gt;
Here is a pattern I am using in the game I mentioned:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
rrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllllllllllllllllllbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrlllmmrrrrmmmmllllllllllllllllllllbbbbbbbbbbbbrrrrmmmmrrrrmlllrrrrmmmm&lt;br /&gt;
mmmmrrrrlywwwwllmmmmrrrrlllllllllllllllllllbbbbbbbbbbbbbmmmmrrrrmmlywwwwllmmrrrr&lt;br /&gt;
rrrrmmmlywwwwwwllrrrmmmmllllllllllllllllllbbbbbbbbbbbbbbrrrrmmmmrlywwwwwwllrmmmm&lt;br /&gt;
mmmmrrrlywwwwwwllmmmrrrrlllllllllllllllllbbbbbbbbbbbbbbbmmmmrrrrmlywwwwwwllmrrrr&lt;br /&gt;
rrrrmmmllllllllllrrrmmmmllllllllllllllllbbbbbbbbbbbbbbbbrrrrmmmmrllllllllllrmmmm&lt;br /&gt;
mmmmrrrlywwwwwwllmmmrrrrlllllllllllllllbbbbbbbbbbbbbbbbbmmmmrrrrmlywwwwwwllmrrrr&lt;br /&gt;
rrrrmmmmlywwwwllrrrrmmmmllllllllllllllbbbbbbbbbbbbbbbbbbrrrrmmmmrrlywwwwllrrmmmm&lt;br /&gt;
mmmmrrrrmlywwllrmmmmrrrrlllllllllllllbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmlywwllmmmrrrr&lt;br /&gt;
rrrrmmmmrrlyllmmrrrrmmmmllllllllllllbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrlyllrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmllrrrmmmmrrrrlllllllllllbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrllrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllllllllbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllllllbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllllllbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllllbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllllbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllllbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllllbbbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlllbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmllbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrlbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
rrrrmmmmrrrrmmmmrrrrmmmmbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbrrrrmmmmrrrrmmmmrrrrmmmm&lt;br /&gt;
mmmmrrrrmmmmrrrrmmmmrrrrbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmmmmrrrrmmmmrrrrmmmmrrrr&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
Even in pattern form, it is clear that there are distinct patterns in the text. In order to turn this into escape sequences, I used the following Python script:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
#!/usr/bin/env python3&lt;br /&gt;
&lt;br /&gt;
import sys;&lt;br /&gt;
"""&lt;br /&gt;
l = black char(30)&lt;br /&gt;
r = red char (31)&lt;br /&gt;
g = green char (32)&lt;br /&gt;
y = yello char (33)&lt;br /&gt;
b = blue char (34)&lt;br /&gt;
m = magenta char (35)&lt;br /&gt;
c = cyan char (36)&lt;br /&gt;
w = white char (37)&lt;br /&gt;
"""&lt;br /&gt;
filename = open(sys.argv[1], "r");&lt;br /&gt;
lastcode = 30;&lt;br /&gt;
code = 30;&lt;br /&gt;
for line in filename:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;for cchar in line:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lastcode = code;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if cchar == '\n':&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sys.stdout.write("\\n");&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;continue;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'l': code = 40;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'r': code = 41;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'g': code = 42;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'y': code = 43;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'b': code = 44;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'm': code = 45;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'c': code = 46;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elif cchar == 'w': code = 47;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if code == lastcode:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sys.stdout.write(" ");&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else:&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sys.stdout.write("\\033["+str(code)+"m ");&lt;br /&gt;
sys.stdout.write("\\033[m\n");&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
This then prints to stdout (the terminal) the exact string I should paste into my program in order to show the graphic I patterned above.&lt;br /&gt;
&lt;br /&gt;
Let's say I wanted to test this first, just to see what it would look like in color. If we name the above color map doorway.cmap, we can run a single line in Bash to print it to the screen:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;
echo -ne "`./colormap.py doorway.cmap`"
&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
This is the result of that image map:&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-YFQ3zjuYkq8/WUvjtlO2NAI/AAAAAAAAXKU/UFvrYn-xj2oYDxM_bKGQS6PmerMSKDkyACLcBGAs/s1600/Screenshot%2Bfrom%2B2017-06-22%2B11-35-01.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="442" data-original-width="654" height="432" src="https://1.bp.blogspot.com/-YFQ3zjuYkq8/WUvjtlO2NAI/AAAAAAAAXKU/UFvrYn-xj2oYDxM_bKGQS6PmerMSKDkyACLcBGAs/s640/Screenshot%2Bfrom%2B2017-06-22%2B11-35-01.png" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;The resulting cmap, as printed by echo on an 80x25 character terminal&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;The result is color graphics. Escape sequences can't do a full color palette, having only seven choices including black and white, and my monospace font doesn't have half-height characters to split widths and heights to gain more resolution. So, given that background colors and spaces are the only tools used, images like this are possible using this procedure.&lt;br /&gt;
&lt;br /&gt;
In the end, the result is a graphics-enriched text based game, for which I can generate graphics easily from a text editor. My first few images I first drew in a small Gimp canvas, but before too long I realized that it was almost as quick to forego gimp entirely, and since Gimp can't zoom in one dimension and not the other, the resulting images there always looked half the height of the actual end product.&lt;br /&gt;
&lt;br /&gt;
And that's how you make color graphics using ANSI escape sequences and spaces.&lt;/p&gt;</content><category term="Tech"></category><category term="color"></category><category term="ansi"></category><category term="tech"></category></entry><entry><title>Web Programming a Desktop with Javascript</title><link href="https://cannoncontraption.github.io/web-programming-a-desktop-with-javascript.html" rel="alternate"></link><published>2017-02-25T00:00:00-05:00</published><updated>2017-02-25T00:00:00-05:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-02-25:/web-programming-a-desktop-with-javascript.html</id><summary type="html">&lt;p&gt;One of the things which most people in web programming have to deal with is the problem of interactive content. The oldest methods for solving this were through the use of Java applets, and Flash content. There are other ways to accomplish this too, with software such as QuickTime, Real …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the things which most people in web programming have to deal with is the problem of interactive content. The oldest methods for solving this were through the use of Java applets, and Flash content. There are other ways to accomplish this too, with software such as QuickTime, Real Player, VLC Media Player, and many more. In today's world, however, the use of most of these is an out-of-date concept. Most modern web applications are written using the features of HTML5, which fills the need to have built in media support, JavaScript, which fills the space of dynamic content handling, CSS, which handles layout and style separate from HTML, allowing for modular, even animated styling support, and AJAX, which is a small subset of JavaScript which is useful for fetching and sending data without reloading a page, filling the need for single-page dynamically loaded content.&lt;/p&gt;
&lt;h2&gt;Why I care&lt;/h2&gt;
&lt;p&gt;
Last October, I joined the Framingham State Computer Science Club. It is a decision which I am very glad I made, for one simple reason. I was sitting at a table with three excellent individuals, and we decided we should make a website for the club. This is where my JS adventure began.
&lt;/p&gt;
&lt;p&gt;
Our first several drafts of what the site should be generally boiled down to conveying information to club members on meeting times, discussion topics, and other useful information. It was always meant to be something which would be useful first and foremost to club members, and a point of interest for those who might join. Eventually, we settled on the idea of making the entire site work like a large blog site, where members of the club can post interesting posts of the same nature as this blog. After running through several interface ideas, the one that stuck the best is writing a desktop-paradigm interface in a browser, using the new technologies I mentioned in the introduction.
&lt;/p&gt;
&lt;h2&gt;Assembling the Tools&lt;/h2&gt;
&lt;p&gt;
One of my first instincts when writing an interface of this sort is to take an objective look at exactly what needs to be done. My first thoughts in these matters were that we needed to work first on which toolkit we would use. I looked at JQuery first, because I had used it for some projects before. The first thing that hit me was version 3 in fact tried hardest to be compatible with Internet Explorer, and had a note about compatibility with more modern browsers at something along the lines of latest -1 version. This was not acceptable at all to me, because none of the people I know who would be using this site would be using IE. While it was likely that the features would work on many older browsers, JQuery didn't seem to actually add much value to a project like this, and was a relatively large JavaScript library, so I quickly moved away from that.
&lt;/p&gt;
&lt;p&gt;
I mentioned in my last post a &lt;a href=http://kroche.io&gt;friend of mine&lt;/a&gt;, whom I actually met because of this project. He directed me to another person's personal site, that of &lt;a href=http://samy.pl&gt;Samy Kamkar&lt;/a&gt;, and mentioned that he had used extjs. Upon closer examination, I found that he had used some clever tricks to stop the casual observer from finding his source code, labeling it as a challenge for those who really want to learn web. While I respect this, I would generally prefer to go into a project with a new library with an example, and this site wasn't going to make that easy.
&lt;/p&gt;
&lt;p&gt;
This brought me to the conclusion that I really should just learn enough JavaScript to implement this without any third-party libraries. That way, the code will run quicker, smoother, and without extra overhead from functions and programming I would not be using. As to that last point, the library is not any smaller than what it would probably be with someone else's library simply because I added so many comments to the code in order to facilitate its repurposing and reuse. Unlike Samy Kamkar, I would like it to be easy for some casual onlooker to fire up the CS club page and see how it works.
&lt;/p&gt;
&lt;h2&gt;Window Management in a Browser&lt;/h2&gt;
&lt;p&gt;
The first challenge I had to face was how exactly I would get windows to exist in an HTML space. It was clear that it was possible, &lt;a href=http://samy.pl&gt;others had done it before&lt;/a&gt;. I had already assembled a taskbar and rudimentary start menu, those were simple. All that took was knowledge of CSS3 transitions and the z-index property. After much thought on the matter, I started investigating how JavaScript handles mouse positioning. I found that it deals in coordinates relative to the top left corner of the page, much like most graphics libraries and engines. This made it simple. All I had to do was record where I clicked the mouse down, where I released the mouse button, and then take the difference of the two in order to figure out how much to move the window. My first prototype window toolkit used this method. The biggest problem with this was that I couldn't see where I was moving the window to while I was doing it. I could see where I started, and where the window ended up, but no in-between.
&lt;/p&gt;
&lt;p&gt;
After much tweaking, I found that the best way to handle the issue of window placement while moving was to actually make the browser update the window on the onMouseMove event. This would mean that every time the browser registered the mouse moving, there would be some JavaScript code to execute. My first thought was that this would make the entire interface unbelievably slow, but that expectation has largely been overshadowed by the fact that I have tried this on several computers, including a Dell Inspiron 6000 from 2003, and none of them have had a problem with it so far. As it turns out mouse position polling does not take that much work to accomplish. After hacking away at it for a little while, I managed to get a system which would detect when the user was dragging the window, and update automatically to reflect this. Window management was mostly done after that, as it was a simple matter to implement the JavaScript code to add and remove HTML elements with no ID and simply track them through JavaScript. This proved to be a stable and surprisingly quick solution which is still in use now.
&lt;/p&gt;
&lt;h2&gt;Window Components and Layout&lt;/h2&gt;
&lt;p&gt;
Another challenge I faced early on, perhaps even earlier than getting windows to move, was how to lay out a window so it has the same components that everyone and their uncle recognize from using Windows. The main components that I would need to add were:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Titlebar&lt;/li&gt;
&lt;li&gt;Window title text&lt;/li&gt;
&lt;li&gt;Window content area&lt;/li&gt;
&lt;li&gt;Close button&lt;/li&gt;
&lt;li&gt;(Time permitting) Minimize and Maximize buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I decided to stick to just implementing the close button at first, as the window manager would need to mature significantly before I could start working on the other parts.
&lt;/p&gt;
&lt;p&gt;
The first design I had in mind was a master toplevel div, which would float in a &lt;code&gt;position:absolute;&lt;/code&gt; style and be the thing which would hold all of the components of the window. Each component would sit in this toplevel div, and would actually be what showed content. The toplevel itself would provide a border around the whole window.
&lt;/p&gt;
&lt;p&gt;
That didn't work out quite like that. One of the oddities about HTML is how div elements work. You can nest div elements inside each other without trouble, but things become tricky as soon as you want one div to start before a nested div and end after it in vertical space. It simply doesn't work this way. What I ended up doing was I defined the height of the toplevel div to be about 22 pixels or so (I can't recall the exact value, but the code is public so the interested reader can &lt;a href="https://github.com/push-eax/fsu-csclub-site/blob/master/windowTools/windowTools.css"&gt;look it up&lt;/a&gt;), and then nesting all the child elements inside that div like I had intended. The toplevel served as the background for the titlebar, and I simply made the window content area show up white. Window buttons would show up on the right-hand side like in Windows and KDE (the desktop I use almost everywhere), and the title text would be centered in the window. The only parameter that would need to be specified when creating a window in terms of dimensions would be how wide the window should be, that way it can expand in height dynamically to fit the content and I don't have to worry about making the arithmetic work right even if fonts change depending on the browser and operating system. Being a Linux user, I care about this stuff as many of my friends and fellow classmates use a completely different font set than I even have access to. The only step after determining all this was to actually connect signals and make the window react predictably. Since this was a simple matter, and the details of how I did it are in the code itself, I will leave that out of this post.
&lt;/p&gt;
&lt;h2&gt;Determining How to Make Content in a Window&lt;/h2&gt;
&lt;p&gt;
Another interesting challenge was how I should then make the window available to end-developers to use. At the time I had (perhaps wisely) decided I wanted the windowing code to be a discrete component which could later be taken out of context and used in a different site, and I didn't want the task of actually populating windows to be too much of a task.
&lt;/p&gt;
&lt;p&gt;
My first solution was to simply add a section where someone could take flat HTML code and then insert it straight into the window as if it were another page. This was a neat idea, and very good for testing windows, but it raised on serious concern for me: there would be no easy way to ensure consistency of interface across all windows in the same site without some serious talk between members of the project about how to class each element so it matched up with the master stylesheets.
&lt;/p&gt;
&lt;p&gt;
The solution I finally settled on was to keep the option to insert custom code into a window as a way of populating it, but also to add the option to add a single element to a window. This was the dawn of the widgetTools toolkit, which was created as another discrete component to compliment the site and yet still be portable to places outside of the website project.
&lt;/p&gt;
&lt;h2&gt;Drawing Inspiration from GTK+&lt;/h2&gt;
&lt;p&gt;
A large part of how widgetTools works is drawn from my prior experience working with GTK+3 in Python, C, and C++. GTK+ is a wonderfully useful and complete widget toolkit which delivers on the promise of consistent look and feel across applications on a single platform. Unlike competing technology in Java, most notably Swing, it manages to look and feel right in a Linux environment, and in Windows both. I have seen screenshots of it also fitting in almost exactly like Apple's own toolkit in macOS, but I do not own a mac and so I can't corroborate this. The Achilles' Heel of this toolkit is complexity. In order to do some relatively simple things in GTK+, you need to have some knowledge of the data structures and functions that it uses in order to generate the content on the user's screen. While this is all really well documented, and easy to learn if you have the time to figure it out, it is quite complex. Further, while GTK+ has a web backend, it is not built to work like a website, instead it is built to work more like another form of remote desktop, allowing single-application access over a LAN or internet connection. While it does implement window management too, the simple fact of the matter is it wouldn't work for a situation like this because of its single-instance nature.
&lt;/p&gt;
&lt;p&gt;
That being said, I did quite enjoy working with GTK+, and it showed me a lot about what GUI development is and why so many people find it difficult. Some of the things they use in GTK+ are out of date, or workarounds for old problems since solved, but for the most part there is a valid reason for everything they do in that toolkit, which is something I wanted to do myself with mine. So that was what I decided I would do. I had already largely been working with JavaScript in order to write windowTools, so I continued using a similar model for widgetTools. First and foremost, windowTools was written in such a way that it could insert a single HTML DOM object into a window, as a sort of toplevel widget space. For that purpose, I created a simple function to create an empty div in widgetTools called the widget space. The first step in using widgetTools would be to create such an element and set it as the toplevel for the window.
&lt;/p&gt;
&lt;h2&gt;Less Complicated Widget Layout&lt;/h2&gt;
&lt;p&gt;
One thing that I really like about GTK+ is that it covers almost every case. In the case of widgetTools, however, I can't do that so much. A lot of that comes from the fact that HTML has a limited set of primitives to choose from when it comes to creating new UI elements. It is enough to do some really impressive stuff, as anyone who has used Google in recent years can tell you, but it is still not quite as much freedom as the developers of GTK+ had. Nor does it require quite so much work to get a foundation laid. This meant that I could both relax a little because some elements were ready-made for me, but it also meant that I would likely end up doing nothing but wrapping existing elements into JavaScript, which could turn dull quickly.
&lt;/p&gt;
&lt;p&gt;
The main idea behind the widgetTools setup is that in order to place an element, you need only tell the toolkit what its parent should be. This means that in order to get a horizontal split in a single window the developer would have to use a table or something similar, but it also means that if the window did not require fancy layouts like that it could be developed quite quickly without worrying about placement. While I think Gtk_Grid is a nice solution to the problem of layout, it is overkill to the nth degree here, and so it would not be useful. This means that the syntax for creating and positioning a window element could simply be &lt;code&gt;makeButton(widgetSpace, "button", "this is a test button");&lt;/code&gt;.  That line, if run in widgetTools, would create a standard button (hence the "button" argument) which would automatically be placed in the toplevel widgetSpace below any existing elements (or beside them if there's no block element and the window is wide enough). This system returns the HTML DOM element as a JS object for each item it creates. If, for example, we wanted to put the button in a table data (td), all we would need to do is change the widgetSpace argument to some other object we have created. Assuming our table data is named tdtest, that would make the code to insert a button there &lt;code&gt;makeButton(tdtest, "button", "this is a test button");&lt;/code&gt;. This means that in order to determine layout, all you need know is where you wish to place the element, and the browser's existing layout engine can take care of the rest.
&lt;/p&gt;
&lt;p&gt;
What we end up after this is actually relatively powerful:&lt;div class="separator" style="clear: both; text-align: center; width:550px; overflow:hidden;"&gt;&lt;a href="https://1.bp.blogspot.com/-5fJLo13DD9o/WLIDbndceDI/AAAAAAAAWTM/OYnDFKPcUgoPZ8s4C_jCwrds4oByZ2REQCPcB/s1600/widgetToolkit.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em; width:500px; overflow:hidden;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-5fJLo13DD9o/WLIDbndceDI/AAAAAAAAWTM/OYnDFKPcUgoPZ8s4C_jCwrds4oByZ2REQCPcB/s1600/widgetToolkit.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;Minimization, Window Resizing&lt;/h2&gt;
&lt;p&gt;
If I were to write this post in order of how I actually wrote the code, resizing the window would have come into play around the same time as the widget toolkit, but I feel like resize and minimize work closely with each other, so I decided to put them in the same section. Both were at least started after the widget toolkit, although resize was done well before much was done at all in the widget toolkit. For details on how it was put together, reading the commit list on &lt;a href="https://github.com/push-eax/fsu-csclub-site"&gt;the GitHub repository&lt;/a&gt; is where you should go. It is incredibly detailed, so if you're not up for a real commit swim, it may be worth skipping that and just taking my word for it.
&lt;/p&gt;
&lt;h3&gt;Resize&lt;/h3&gt;
&lt;p&gt;
In order to fix the problem of window resizing, I approached the problem from the same angle as moving the window. Take the dimensions of the window when you click the grab handle, then poll the mouse to see where it moves and change the window accordingly. This stops when the user lifts the button. The issue with this was that instead of moving X and Y coordinates alone, I was dealing with adding properties for height so that the user could resize in both directions. This turned out to be less of a problem. When I started working with the idea of resizing based on move commands, I did not know that JavaScript does not take all of the window dimensions into account. It takes the inner dimensions of the window, and the outer dimensions to a point. The trick was not only resizing the toplevel's width, but the height of the content div. Since the dimensions don't quite match between these because I initially wanted a window border, only to settle for the titlebar being a little wider than the window. After a lot of work, I found that if I take the inner dimensions of the window and then only deal with those, the outer dimensions follow suit. All I had to do was modify the style properties for width and height based on my knowledge of how the box model is handled and a little black magic with known pixel count values to make resize work properly, and not exponetially expand into infinity like before I had figured out the missing properties.
&lt;/p&gt;
&lt;h3&gt;Minimize&lt;/h3&gt;
&lt;p&gt;
Like I said, minimize and resize are similar. The first problem I had to solve was adding window buttons to the taskbar, but doing that (and even tracking their location) was quite easy. The real trick was figuring out how to hide the windows themselves. In the end, I decided to add some global variables to represent the position of the window at the start of minimization, and then just change its width to match the taskbar button, and set its X and Y coordinates to match the top corner of the button.
&lt;/p&gt;
&lt;p&gt;This was the right decision to make in the end largely because it made animating the minimization process really easy. All I had to do there is keep track of how long I wanted the animation to run, and then use that to set CSS transitions so that it would smoothly move from its original location to its spot in the taskbar. Since I had found out during the time when I was writing the move facilities that transitions mess with window moving, I had to make the transitions reset to 0s for all transition properties, but considering what it took to make other functions work, this was a simple enough task.
&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
Making windowing in a browser was a fun project which, in the end, turned out to include some useful components which can simply be placed in other projects to use for basically any purpose. Anyone can view the current CS Club site on GitHub, &lt;a href="https://github.com/push-eax/fsu-csclub-site"&gt;simply follow this link and you're there!&lt;/a&gt;
&lt;/p&gt;</content><category term="Tech"></category><category term="web"></category><category term="desktop"></category><category term="javascript"></category><category term="tech"></category></entry><entry><title>Making Bash Prompt you with Information</title><link href="https://cannoncontraption.github.io/making-bash-prompt-you-with-information.html" rel="alternate"></link><published>2017-02-20T00:00:00-05:00</published><updated>2017-02-20T00:00:00-05:00</updated><author><name>Jim Read</name></author><id>tag:cannoncontraption.github.io,2017-02-20:/making-bash-prompt-you-with-information.html</id><summary type="html">&lt;p&gt;In the world of Linux and Unix, one of the most powerful tools available is the command line. Those of us who are lucky enough to have Bash at our disposal will probably know of many of its varied powers and features. These include the ability to modify and rerun …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the world of Linux and Unix, one of the most powerful tools available is the command line. Those of us who are lucky enough to have Bash at our disposal will probably know of many of its varied powers and features. These include the ability to modify and rerun commands in history without retyping or scrolling through text, running simple logic and recursion from within the prompt, and setting custom prompts to display more information than is initially readily available.&lt;br /&gt;
&lt;br /&gt;
It is the last point of these that I want to touch on today.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Introduction to Bash's PS1 variable&lt;/h2&gt;
&lt;p&gt;If you are familiar with how bash handles PS1 strings and colors, skip ahead to the section about dynamic prompts. &lt;br /&gt;
&lt;br /&gt;
In the past year, I have started exploring the power in how Bash handles the PS1 environment variable. For those of you in the know, PS1 is the string variable responsible for deciding what the prompt will contain. A very basic one may just be &lt;code&gt;PS1='\$ '&lt;/code&gt;, which will simply display a dollar sign and a space to signify the prompt is ready for input. A more common arrangement would display the user, the hostname, the working path, and then the dollar sign. This is often represented by the following PS1 string (or something similar): &lt;code&gt;PS1=\u@\h: \w\$ '&lt;/code&gt;
&lt;br /&gt;
&lt;br /&gt;
This is still really quite a simple prompt, and for those who are familiar with bash it probably doesn't take very much effort to parse. Where things get interesting is when colors are added. Ubuntu, for example, uses green for the &lt;code&gt;\u@\h&lt;/code&gt;, making it something similar to &lt;code&gt;PS1='[\033[1;32m]\u@\h[\033[m]: [\033[1;34m]\w \$[\033[m] '&lt;/code&gt;. Notice that aside from what we had before, we have sections encapsulated in &lt;code&gt;[ ]&lt;/code&gt;. These essentially tell bash that we are no longer outputting printing characters. This helps it align text when a line of input is longer than a single line long. It can figure out where the line break should be, and place it appropriately. Without these delimiters, sometimes instead of getting a new line, overflowed lines will react like \r on its own, or cause other interesting and unintended effects. Inside of these, the escape character (&lt;code&gt;\033&lt;/code&gt;) followed by an ANSI color sequence. Here's where I start to get creative.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Making Dynamic Prompts&lt;/h2&gt;
&lt;p&gt;One of the neat features about bash is that it allows you to set custom functions to streamline a bunch of commands in the current process. In my case, I use this to evaluate the last return code from a program and then use that information when deciding how the PS1 variable should be put together. This works because Bash, unlike so many other shells, re-evaluates its PS1 every time you submit a command. In my case, I like to know whether a program returned 0 or not, and what it returned if it wasn't 0. Since I develop a lot of programs and scripts myself, this is really really handy for debugging things without using a debugger.&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;setpromptstyle(){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lastreturn=$?&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if [ $lastreturn = 0 ]; then &lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne "\001\033[7;32m\002"&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else &lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne "\001\033[7;31m\002 $lastreturn "&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fi&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;So from here you can see that things aren't exactly as I described them above. Firstly, Bash doesn't seem to evaluate [ and ] inside of functions like this, so instead I used \001 and \002, which for those of you who aren't familiar with them are start of header and start of body characters, respectively. Second of all, by using the reverse-video flag in the color sequences, I get an easily recognizable place to stop for when I'm scrolling up to the top of a command's output. For regular users, I usually use green for a zero-return-code, and red for a non-zero one. You'll note that the number itself doesn't show up unless the program actually didn't return zero. This is especially handy when you have a really long working directory.&lt;br /&gt;
&lt;br /&gt;
For a while, I had the following as my PS1 variable:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;section style="border-radius: 3px; border: 1px solid;"&gt;&lt;code&gt;PS1='$(setpromptstyle)\u@\h\[\033[m\]:\[\033[1;34m\]\w\[\033[1;33m\]\$\[\033[m\] '&lt;/code&gt;&lt;/section&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;h2&gt;
Adding Git integration&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;Just recently, &lt;a href="https://kroche.io/"&gt;a friend &lt;/a&gt;&lt;a href="https://github.com/push-eax/"&gt;of mine&lt;/a&gt; asked if I had ever used powerline, which is a git project for fancy vim/bash/etc. prompt lines. In vim, it clearly showed information like the current git branch. Being a frequent user of git and github, I figured this would be a nice feature to add to my own custom prompt. I didn't want to try powerline myself, in no small part because it would mean changing my current prompt (which I am really happy with) for something else which I'm not as familiar with. Normally I am all for jumping out of one's comfort zone, but this time I felt like it would be more useful for me to create my own variant of git/bash integration.&lt;br /&gt;
&lt;br /&gt;
The first thing I wanted to do was add a counter for uncommitted files. I know this post is about bash, but in this case I didn't want to bother with bash and went straight to perl:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;&lt;code&gt;
#!/usr/bin/perl&lt;br /&gt;
my $gscounter = 0;&lt;br /&gt;
for my $line(`git status -s`){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$gscounter++;&lt;br /&gt;
}&lt;br /&gt;
print "$gscounter";&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;I saved this into bin/gitstatuscounter.pl, and put that into a function in bash. Stderr is redirected to /dev/null (&lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; at the end of the command), and it outputs a single number with no line break at the end, perfect for inserting into a prompt.&lt;br /&gt;
&lt;br /&gt;
The next thing I wanted to do was make the current branch show up in the prompt, so it's easy to see which one I'm working on. I've messed up which branch I'm working with more times than I'd care to admit, and so this is where the real usefulness of this project comes in. As it turns out, with a little sed and perl magic, we can make the git branch command output just the current working branch.&lt;br /&gt;
&lt;code&gt;git branch | sed -n '/* /s///p' | perl -pe 'chomp'&lt;/code&gt;&lt;br /&gt;
This makes git spit out the branch list, and then sed searches it for the line with a * in it, which is the delimiter for the current branch, then perl comes in and removes the trailing line break.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;h2&gt;
But what if we're not in a repo?&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;I haven't addressed a major problem with git integration, and that is what happens when we're not in a repo. As it turns out, the fix is quite simple. If &lt;code&gt;git status&lt;/code&gt; runs without error, we are in a repo. If it does not return 0, we are not in a repo and shouldn't run the git integration code. The git integration code can now be shoved into a single bash function like so:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;getgitbranch(){&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;git status &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if [ $? == 0 ]; then&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne ' \001\033[7;37m\002'&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gitstatuscounter.pl 2&amp;gt;/dev/null&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -ne '\001\033[7;36m\002 '&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;git branch | sed -n '/\* /s///p' | perl -pe 'chomp'&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -n ' '&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;echo -n ''&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fi&lt;br /&gt;
}&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;I could probably take out that last &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;echo -n ''&lt;/code&gt; statement, but for a while I was waffling on whether to print something else if we're not in a repo, and that would be the place to do it. For a time, that would print a space there, and it wouldn't be padded so much.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
Applying our "wizdom"&lt;/h2&gt;
&lt;p&gt;When I looked at the powerline screenshots from vim, one thing struck me- the entire thing used the reverse-video flag (the 7 in my escape sequences). After giving it about five second of thought I figured this would only make the prompt more visible since I can look anywhere across a line to see where I am. One of the things about my directory tree in my home directory on any given machine is that I like to use long folder names and have bash's auto-complete fill in the full name after I typed enough characters to distinguish it from other folders. This means that prompts will often span more than half of my terminal window. If this were all reverse-video, the prompt would be visible indeed.&lt;br /&gt;
&lt;br /&gt;
After a little bit of messing with different options, I settled on this as my final prompt:&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;section style="border-radius: 3px; border: 1px solid;"&gt;
&lt;code&gt;PS1='$(setpromptstyle)\u@\h\[\033[m\]:\[\033[7;34m\]\w\[\033[m\]$(getgitbranch)\[\e[7;33m\]\$\[\e[m\] '
&lt;br /&gt;
&lt;/code&gt;&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;
And this provides a nice, tight prompt with git integration that hides itself if we're not in a repo (or don't have git installed).
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;
A note on code&lt;/h2&gt;
&lt;p&gt;Of course, any code I post on this blog is free for anyone to use. If it's posted on here, assume it is licensed under the GPLv2 and (C) James Read unless otherwise specified. Please respect these rules, and if you have something you think would improve any code I post or any solution I have, please just write a comment on that post! If it's really really good, I may even feature it in an edit to the post itself!&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
Edit: I feel it is probably best if I include a screenshot of what the prompt looks like when all this is said and done. Here are two, one with a git repository, and one outside:&lt;br /&gt;&lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://4.bp.blogspot.com/-NaRU-1MWFow/WLH2y1AAsJI/AAAAAAAAWSg/LKGtWTRj7E04lf3-JZJeo6ffI-kGJcdpQCLcB/s1600/bashrc%2Bprompt.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-NaRU-1MWFow/WLH2y1AAsJI/AAAAAAAAWSg/LKGtWTRj7E04lf3-JZJeo6ffI-kGJcdpQCLcB/s1600/bashrc%2Bprompt.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="https://4.bp.blogspot.com/-250B_-hUy54/WLH20VDzAvI/AAAAAAAAWSk/rUPrDhorha8fQPgdzDZidDyB9-Nzr-cqQCLcB/s1600/githidden.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-250B_-hUy54/WLH20VDzAvI/AAAAAAAAWSk/rUPrDhorha8fQPgdzDZidDyB9-Nzr-cqQCLcB/s1600/githidden.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="tech"></category><category term="bash"></category><category term="prompt"></category><category term="color"></category></entry></feed>