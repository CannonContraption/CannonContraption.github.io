/*
 * This is the style used for the generic toolbar, which is supposed to house buttons at
 * the top of windows. This includes save buttons, basic entry widgets, etc. It is NOT,
 * however, designed to house multiple lines of widgets. It CAN, but the style doesn't
 * account for that at the moment.
 */
div.toolbar{
    width:100%;
    position:relative;
}

/*
 * The subtoolbar is designed to sit in tabs. When a tab is used, it can make use of the
 * subtoolbar in order to add things like bold, italic, and underline buttons. These are
 * important elements of a UI because they are how controls can be housed without making
 * for a jarring experience within a tabbed interface such as the composer.
 */
div.subtoolbar{
    width:100%;
    position:relative;
}

/*
 * The tbutton is a button designed to work in a toolbar. It basically includes slightly
 * more pronounced gradiation in order to appear homogeneous with the plain-background
 * generic button. This is a workaround for how the eye percieves contrasting colors for
 * the most part.
 */
button.tbutton{
    vertical-align: center;
}

/*
 * div.icon is the main way we display icons. It is a 50px wide by 80px tall box, which
 * should be used to display icons in contexts such as the file manager. It should display
 * two child elements: the icon img element, and the text element.
 */
div.icon{
    display:inline-block;
    width:90px;
    overflow:hidden;
}

div.icon:focus, div.icon:active{
}

img.icon{
    background: linear-gradient(to top, white, #f4f4f4);
    border: 1px solid #d3d3d3;
    border-radius:3px;
}

/*
 * div.icontext is for icon text. Exists mainly to make text wrap lines instead of
 * overflowing the main div.icon area.*/
p.icon{
    display:inline-block;
    margin-left:auto;
    margin-right:auto;
    overflow:hidden;
}

/*
 * tabbtnsel, or the tab button selected (tab)(btn)(sel), is the currently selected tab
 * button in the tabs interface. It is built to sit on top of the tab content, flush with
 * the content below. This emphasizes where the user is currently in relation to the rest
 * of the interface.
 */
button.tabbtnsel{
    vertical-align: center;
    margin-bottom:0px;
}

/*
 * tabbutton is the master tab view style. This is what tabs are initialized as until they
 * are selected. This means that all created tabs show up with a standard style in the
 * background.
 */
button.tabbutton{
    vertical-align: center;
}

/*
 * tabbar is the standard tab bar styling. It is derived from the toolbar, and is built to
 * emphasize the fact that the tab space and the content space is different, without
 * creating dip illusions in the window. This is mainly done by adding a "drop shadow"
 * above tab content. It is a completely artificial drop shadow, created by the element's
 * gradiation, but the effect is the same, if more controlled.
 */
div.tabbar{
    width:100%;
    padding-bottom:0px;
    position:relative;
}

/*
 * tab is the main body of a tab. This is the area where all tab content shows up, meaning
 * that it essentially styles the widget space which the tab interface offers. This should
 * be somewhat different from the default in order to differentiate a tab from its 
 * background.
 */
div.tab{
}

/*
 * This is the style which defines what happens when a toolbar button is pressed. This is
 * where the real style changes need to take place in order to work around tricks of the
 * light because the eye percieves a regular button when pressed in a toolbar as not flat,
 * but gradiated because in reference to the gradiation in the background the difference
 * is not constant. In order to work around this, the style below defines a constant
 * appearance for these situations. It keeps the difference in color the same so that the
 * eye percieves the pressed button as flat.
 */
button.tbutton:active{
}

/*
 * button:focus determines how in-focus buttons should be handled. In a lot of browsers
 * the default is either a glow around the button, or more classic "ants" like in FF.
 * While this doesn't override the default behavior of FF, it does replace the blue glow
 * of chrome, and it adds the gold glow to FF.
 */
button.tbutton:focus, button.button:focus, button.toggled:focus, input.button:focus{
}

/*
 * This allows us to have "toggled" buttons as well as flat push buttons. This style is
 * meant to fit in with regular buttons so there is no real programmatic or stylistic
 * difference between buttons and toggle buttons.
 */
button.toggled{
    vertical-align: center;
}

/*
 * These style rules apply to drop-down menus and things of the select element. Based off
 * the style for buttons.
 */
select, button.button, input.button{
}

/*
 * This defines what happens when one of these dropdowns is selected.
 */
select:active, button.button:active, input.button:active{
}

/*
 * unused?
 * needs testing to make sure we don't need it.
 */
img.stock{
}

/*
 * filltext defines multi-line width filling text entries, such as are used in the
 * composer. The style is careful not to use "dynamic" height as this causes problems
 * with window resize and window bounds.
 */
.filltext{
    overflow:auto;
}

/*
 * hidden is bassically a class to define what happens when we want to hide an element.
 * This is used in order to implement tabs, and it is not really a style rule so much as
 * a functionality shortcut to remove and add elements without removing and adding them.
 */
.hidden{
    display:none;
}

/*
 * text defines what happens with single line text fields. Derived in part from the style
 * used in button.
 * */
input.text{
}

/*
 * text:focus defines what happens when a single-line text entry field is focused. (the
 * cursor is in the box)
 */
input.text:focus{
}

/*
 * section defines marked sections, so like the bordered text in the widget toolkit test
 * window. It is built to section off parts of the UI.
 */
div.section{
}

/*
 * This class is built to allow for bordered tables without using the ancient border=#px
 * argument in the table tag. The class is set when we want borders, unset when we don't.
 */
.tabledata{
}
